   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_setup,"ax",@progbits
  11               		.weak	matrix_setup
  13               	matrix_setup:
  14               	.LFB103:
  15               		.file 1 "./tmk_core/common/keyboard.c"
   1:./tmk_core/common/keyboard.c **** /*
   2:./tmk_core/common/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.c **** 
   4:./tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.c **** (at your option) any later version.
   8:./tmk_core/common/keyboard.c **** 
   9:./tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.c **** 
  14:./tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.c **** */
  17:./tmk_core/common/keyboard.c **** #include <stdint.h>
  18:./tmk_core/common/keyboard.c **** #include "keyboard.h"
  19:./tmk_core/common/keyboard.c **** #include "matrix.h"
  20:./tmk_core/common/keyboard.c **** #include "keymap.h"
  21:./tmk_core/common/keyboard.c **** #include "host.h"
  22:./tmk_core/common/keyboard.c **** #include "led.h"
  23:./tmk_core/common/keyboard.c **** #include "keycode.h"
  24:./tmk_core/common/keyboard.c **** #include "timer.h"
  25:./tmk_core/common/keyboard.c **** #include "print.h"
  26:./tmk_core/common/keyboard.c **** #include "debug.h"
  27:./tmk_core/common/keyboard.c **** #include "command.h"
  28:./tmk_core/common/keyboard.c **** #include "util.h"
  29:./tmk_core/common/keyboard.c **** #include "sendchar.h"
  30:./tmk_core/common/keyboard.c **** #include "eeconfig.h"
  31:./tmk_core/common/keyboard.c **** #include "backlight.h"
  32:./tmk_core/common/keyboard.c **** #include "action_layer.h"
  33:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  34:./tmk_core/common/keyboard.c **** #   include "bootmagic.h"
  35:./tmk_core/common/keyboard.c **** #else
  36:./tmk_core/common/keyboard.c **** #   include "magic.h"
  37:./tmk_core/common/keyboard.c **** #endif
  38:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  39:./tmk_core/common/keyboard.c **** #   include "mousekey.h"
  40:./tmk_core/common/keyboard.c **** #endif
  41:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  42:./tmk_core/common/keyboard.c **** #   include "ps2_mouse.h"
  43:./tmk_core/common/keyboard.c **** #endif
  44:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  45:./tmk_core/common/keyboard.c **** #   include "serial_mouse.h"
  46:./tmk_core/common/keyboard.c **** #endif
  47:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  48:./tmk_core/common/keyboard.c **** #   include "adb.h"
  49:./tmk_core/common/keyboard.c **** #endif
  50:./tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  51:./tmk_core/common/keyboard.c **** #   include "rgblight.h"
  52:./tmk_core/common/keyboard.c **** #endif
  53:./tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  54:./tmk_core/common/keyboard.c **** #   include "serial_link/system/serial_link.h"
  55:./tmk_core/common/keyboard.c **** #endif
  56:./tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
  57:./tmk_core/common/keyboard.c **** #   include "visualizer/visualizer.h"
  58:./tmk_core/common/keyboard.c **** #endif
  59:./tmk_core/common/keyboard.c **** 
  60:./tmk_core/common/keyboard.c **** 
  61:./tmk_core/common/keyboard.c **** 
  62:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  63:./tmk_core/common/keyboard.c **** static bool has_ghost_in_row(uint8_t row)
  64:./tmk_core/common/keyboard.c **** {
  65:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_row = matrix_get_row(row);
  66:./tmk_core/common/keyboard.c ****     // No ghost exists when less than 2 keys are down on the row
  67:./tmk_core/common/keyboard.c ****     if (((matrix_row - 1) & matrix_row) == 0)
  68:./tmk_core/common/keyboard.c ****         return false;
  69:./tmk_core/common/keyboard.c **** 
  70:./tmk_core/common/keyboard.c ****     // Ghost occurs when the row shares column line with other row
  71:./tmk_core/common/keyboard.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
  72:./tmk_core/common/keyboard.c ****         if (i != row && (matrix_get_row(i) & matrix_row))
  73:./tmk_core/common/keyboard.c ****             return true;
  74:./tmk_core/common/keyboard.c ****     }
  75:./tmk_core/common/keyboard.c ****     return false;
  76:./tmk_core/common/keyboard.c **** }
  77:./tmk_core/common/keyboard.c **** #endif
  78:./tmk_core/common/keyboard.c **** 
  79:./tmk_core/common/keyboard.c **** __attribute__ ((weak))
  80:./tmk_core/common/keyboard.c **** void matrix_setup(void) {
  16               		.loc 1 80 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE103:
  26               		.section	.text.keyboard_setup,"ax",@progbits
  27               	.global	keyboard_setup
  29               	keyboard_setup:
  30               	.LFB104:
  81:./tmk_core/common/keyboard.c **** }
  82:./tmk_core/common/keyboard.c **** 
  83:./tmk_core/common/keyboard.c **** void keyboard_setup(void) {
  31               		.loc 1 83 0
  32               		.cfi_startproc
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
  84:./tmk_core/common/keyboard.c ****     matrix_setup();
  37               		.loc 1 84 0
  38 0000 0C94 0000 		jmp matrix_setup
  39               	.LVL0:
  40               		.cfi_endproc
  41               	.LFE104:
  43               		.section	.text.keyboard_init,"ax",@progbits
  44               	.global	keyboard_init
  46               	keyboard_init:
  47               	.LFB105:
  85:./tmk_core/common/keyboard.c **** }
  86:./tmk_core/common/keyboard.c **** 
  87:./tmk_core/common/keyboard.c **** void keyboard_init(void) {
  48               		.loc 1 87 0
  49               		.cfi_startproc
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
  88:./tmk_core/common/keyboard.c ****     timer_init();
  54               		.loc 1 88 0
  55 0000 0E94 0000 		call timer_init
  56               	.LVL1:
  89:./tmk_core/common/keyboard.c ****     matrix_init();
  57               		.loc 1 89 0
  58 0004 0E94 0000 		call matrix_init
  59               	.LVL2:
  90:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  91:./tmk_core/common/keyboard.c ****     ps2_mouse_init();
  92:./tmk_core/common/keyboard.c **** #endif
  93:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  94:./tmk_core/common/keyboard.c ****     serial_mouse_init();
  95:./tmk_core/common/keyboard.c **** #endif
  96:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  97:./tmk_core/common/keyboard.c ****     adb_mouse_init();
  98:./tmk_core/common/keyboard.c **** #endif
  99:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
 100:./tmk_core/common/keyboard.c ****     bootmagic();
  60               		.loc 1 100 0
  61 0008 0E94 0000 		call bootmagic
  62               	.LVL3:
 101:./tmk_core/common/keyboard.c **** #else
 102:./tmk_core/common/keyboard.c ****     magic();
 103:./tmk_core/common/keyboard.c **** #endif
 104:./tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 105:./tmk_core/common/keyboard.c ****     backlight_init();
 106:./tmk_core/common/keyboard.c **** #endif
 107:./tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 108:./tmk_core/common/keyboard.c ****     rgblight_init();
  63               		.loc 1 108 0
  64 000c 0C94 0000 		jmp rgblight_init
  65               	.LVL4:
  66               		.cfi_endproc
  67               	.LFE105:
  69               		.section	.text.keyboard_task,"ax",@progbits
  70               	.global	keyboard_task
  72               	keyboard_task:
  73               	.LFB106:
 109:./tmk_core/common/keyboard.c **** #endif
 110:./tmk_core/common/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 111:./tmk_core/common/keyboard.c ****     keymap_config.nkro = 1;
 112:./tmk_core/common/keyboard.c **** #endif
 113:./tmk_core/common/keyboard.c **** }
 114:./tmk_core/common/keyboard.c **** 
 115:./tmk_core/common/keyboard.c **** /*
 116:./tmk_core/common/keyboard.c ****  * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 117:./tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
 118:./tmk_core/common/keyboard.c ****  */
 119:./tmk_core/common/keyboard.c **** void keyboard_task(void)
 120:./tmk_core/common/keyboard.c **** {
  74               		.loc 1 120 0
  75               		.cfi_startproc
  76 0000 BF92      		push r11
  77               	.LCFI0:
  78               		.cfi_def_cfa_offset 3
  79               		.cfi_offset 11, -2
  80 0002 CF92      		push r12
  81               	.LCFI1:
  82               		.cfi_def_cfa_offset 4
  83               		.cfi_offset 12, -3
  84 0004 DF92      		push r13
  85               	.LCFI2:
  86               		.cfi_def_cfa_offset 5
  87               		.cfi_offset 13, -4
  88 0006 EF92      		push r14
  89               	.LCFI3:
  90               		.cfi_def_cfa_offset 6
  91               		.cfi_offset 14, -5
  92 0008 FF92      		push r15
  93               	.LCFI4:
  94               		.cfi_def_cfa_offset 7
  95               		.cfi_offset 15, -6
  96 000a 0F93      		push r16
  97               	.LCFI5:
  98               		.cfi_def_cfa_offset 8
  99               		.cfi_offset 16, -7
 100 000c 1F93      		push r17
 101               	.LCFI6:
 102               		.cfi_def_cfa_offset 9
 103               		.cfi_offset 17, -8
 104 000e CF93      		push r28
 105               	.LCFI7:
 106               		.cfi_def_cfa_offset 10
 107               		.cfi_offset 28, -9
 108 0010 DF93      		push r29
 109               	.LCFI8:
 110               		.cfi_def_cfa_offset 11
 111               		.cfi_offset 29, -10
 112 0012 CDB7      		in r28,__SP_L__
 113 0014 DEB7      		in r29,__SP_H__
 114               	.LCFI9:
 115               		.cfi_def_cfa_register 28
 116 0016 2A97      		sbiw r28,10
 117               	.LCFI10:
 118               		.cfi_def_cfa_offset 21
 119 0018 0FB6      		in __tmp_reg__,__SREG__
 120 001a F894      		cli
 121 001c DEBF      		out __SP_H__,r29
 122 001e 0FBE      		out __SREG__,__tmp_reg__
 123 0020 CDBF      		out __SP_L__,r28
 124               	/* prologue: function */
 125               	/* frame size = 10 */
 126               	/* stack size = 19 */
 127               	.L__stack_usage = 19
 128               	.LVL5:
 121:./tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 122:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 123:./tmk_core/common/keyboard.c ****     static matrix_row_t matrix_ghost[MATRIX_ROWS];
 124:./tmk_core/common/keyboard.c **** #endif
 125:./tmk_core/common/keyboard.c ****     static uint8_t led_status = 0;
 126:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_row = 0;
 127:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_change = 0;
 128:./tmk_core/common/keyboard.c **** 
 129:./tmk_core/common/keyboard.c ****     matrix_scan();
 129               		.loc 1 129 0
 130 0022 0E94 0000 		call matrix_scan
 131               	.LVL6:
 132 0026 80E0      		ldi r24,lo8(matrix_prev.5188)
 133 0028 C82E      		mov r12,r24
 134 002a 80E0      		ldi r24,hi8(matrix_prev.5188)
 135 002c D82E      		mov r13,r24
 136 002e 00E0      		ldi r16,0
 137 0030 10E0      		ldi r17,0
 138               	.LVL7:
 139               	.L6:
 140 0032 B02E      		mov r11,r16
 141               	.LVL8:
 142               	.LBB6:
 130:./tmk_core/common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 131:./tmk_core/common/keyboard.c ****         matrix_row = matrix_get_row(r);
 143               		.loc 1 131 0
 144 0034 802F      		mov r24,r16
 145 0036 0E94 0000 		call matrix_get_row
 146               	.LVL9:
 147 003a E82E      		mov r14,r24
 148               	.LVL10:
 132:./tmk_core/common/keyboard.c ****         matrix_change = matrix_row ^ matrix_prev[r];
 149               		.loc 1 132 0
 150 003c F601      		movw r30,r12
 151 003e 2191      		ld r18,Z+
 152 0040 6F01      		movw r12,r30
 153 0042 F82E      		mov r15,r24
 154 0044 F226      		eor r15,r18
 155               	.LVL11:
 133:./tmk_core/common/keyboard.c ****         if (matrix_change) {
 156               		.loc 1 133 0
 157 0046 01F4      		brne .L5
 158               	.L13:
 159               	.LVL12:
 160 0048 0F5F      		subi r16,-1
 161 004a 1F4F      		sbci r17,-1
 162               	.LVL13:
 130:./tmk_core/common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 163               		.loc 1 130 0
 164 004c 0630      		cpi r16,6
 165 004e 1105      		cpc r17,__zero_reg__
 166 0050 01F4      		brne .L6
 167               	.LBE6:
 134:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 135:./tmk_core/common/keyboard.c ****             if (has_ghost_in_row(r)) {
 136:./tmk_core/common/keyboard.c ****                 /* Keep track of whether ghosted status has changed for
 137:./tmk_core/common/keyboard.c ****                  * debugging. But don't update matrix_prev until un-ghosted, or
 138:./tmk_core/common/keyboard.c ****                  * the last key would be lost.
 139:./tmk_core/common/keyboard.c ****                  */
 140:./tmk_core/common/keyboard.c ****                 if (debug_matrix && matrix_ghost[r] != matrix_row) {
 141:./tmk_core/common/keyboard.c ****                     matrix_print();
 142:./tmk_core/common/keyboard.c ****                 }
 143:./tmk_core/common/keyboard.c ****                 matrix_ghost[r] = matrix_row;
 144:./tmk_core/common/keyboard.c ****                 continue;
 145:./tmk_core/common/keyboard.c ****             }
 146:./tmk_core/common/keyboard.c ****             matrix_ghost[r] = matrix_row;
 147:./tmk_core/common/keyboard.c **** #endif
 148:./tmk_core/common/keyboard.c ****             if (debug_matrix) matrix_print();
 149:./tmk_core/common/keyboard.c ****             for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 150:./tmk_core/common/keyboard.c ****                 if (matrix_change & ((matrix_row_t)1<<c)) {
 151:./tmk_core/common/keyboard.c ****                     action_exec((keyevent_t){
 152:./tmk_core/common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 153:./tmk_core/common/keyboard.c ****                         .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 154:./tmk_core/common/keyboard.c ****                         .time = (timer_read() | 1) /* time should not be 0 */
 155:./tmk_core/common/keyboard.c ****                     });
 156:./tmk_core/common/keyboard.c ****                     // record a processed key
 157:./tmk_core/common/keyboard.c ****                     matrix_prev[r] ^= ((matrix_row_t)1<<c);
 158:./tmk_core/common/keyboard.c ****                     // process a key per task call
 159:./tmk_core/common/keyboard.c ****                     goto MATRIX_LOOP_END;
 160:./tmk_core/common/keyboard.c ****                 }
 161:./tmk_core/common/keyboard.c ****             }
 162:./tmk_core/common/keyboard.c ****         }
 163:./tmk_core/common/keyboard.c ****     }
 164:./tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 165:./tmk_core/common/keyboard.c ****     action_exec(TICK);
 168               		.loc 1 165 0
 169 0052 8FEF      		ldi r24,lo8(-1)
 170 0054 8983      		std Y+1,r24
 171 0056 8A83      		std Y+2,r24
 172 0058 1B82      		std Y+3,__zero_reg__
 173 005a 0E94 0000 		call timer_read
 174               	.LVL14:
 175 005e 8160      		ori r24,1
 176 0060 782F      		mov r23,r24
 177 0062 9D83      		std Y+5,r25
 178 0064 8C83      		std Y+4,r24
 179 0066 4981      		ldd r20,Y+1
 180 0068 5A81      		ldd r21,Y+2
 181 006a 6B81      		ldd r22,Y+3
 182 006c 8D81      		ldd r24,Y+5
 183 006e 0E94 0000 		call action_exec
 184               	.LVL15:
 185 0072 00C0      		rjmp .L11
 186               	.L5:
 187               	.LBB8:
 148:./tmk_core/common/keyboard.c ****             for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 188               		.loc 1 148 0
 189 0074 8091 0000 		lds r24,debug_config
 190 0078 81FD      		sbrc r24,1
 148:./tmk_core/common/keyboard.c ****             for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 191               		.loc 1 148 0 is_stmt 0 discriminator 1
 192 007a 0E94 0000 		call matrix_print
 193               	.LVL16:
 194               	.L8:
 195               	.LBE8:
 129:./tmk_core/common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 196               		.loc 1 129 0 is_stmt 1
 197 007e 80E0      		ldi r24,0
 198 0080 90E0      		ldi r25,0
 199               	.LBB9:
 200               	.LBB7:
 150:./tmk_core/common/keyboard.c ****                     action_exec((keyevent_t){
 201               		.loc 1 150 0
 202 0082 2F2D      		mov r18,r15
 203 0084 30E0      		ldi r19,0
 204               	.LVL17:
 205               	.L12:
 206 0086 482F      		mov r20,r24
 207               	.LVL18:
 208 0088 B901      		movw r22,r18
 209 008a 082E      		mov r0,r24
 210 008c 00C0      		rjmp 2f
 211               		1:
 212 008e 7595      		asr r23
 213 0090 6795      		ror r22
 214               		2:
 215 0092 0A94      		dec r0
 216 0094 02F4      		brpl 1b
 217 0096 60FF      		sbrs r22,0
 218 0098 00C0      		rjmp .L9
 151:./tmk_core/common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 219               		.loc 1 151 0
 220 009a 8E83      		std Y+6,r24
 221 009c BF82      		std Y+7,r11
 153:./tmk_core/common/keyboard.c ****                         .time = (timer_read() | 1) /* time should not be 0 */
 222               		.loc 1 153 0
 223 009e 81E0      		ldi r24,lo8(1)
 224 00a0 90E0      		ldi r25,0
 225               	.LVL19:
 226 00a2 6C01      		movw r12,r24
 227 00a4 00C0      		rjmp 2f
 228               		1:
 229 00a6 CC0C      		lsl r12
 230 00a8 DD1C      		rol r13
 231               		2:
 232 00aa 4A95      		dec r20
 233 00ac 02F4      		brpl 1b
 151:./tmk_core/common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 234               		.loc 1 151 0
 235 00ae 2E2D      		mov r18,r14
 236 00b0 30E0      		ldi r19,0
 237 00b2 2C21      		and r18,r12
 238 00b4 3D21      		and r19,r13
 239 00b6 232B      		or r18,r19
 240 00b8 01F4      		brne .L10
 241 00ba 80E0      		ldi r24,0
 242               	.L10:
 243 00bc 8887      		std Y+8,r24
 154:./tmk_core/common/keyboard.c ****                     });
 244               		.loc 1 154 0
 245 00be 0E94 0000 		call timer_read
 246               	.LVL20:
 151:./tmk_core/common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 247               		.loc 1 151 0
 248 00c2 8160      		ori r24,1
 249 00c4 782F      		mov r23,r24
 250 00c6 9A87      		std Y+10,r25
 251 00c8 8987      		std Y+9,r24
 252 00ca 4E81      		ldd r20,Y+6
 253 00cc 5F81      		ldd r21,Y+7
 254 00ce 6885      		ldd r22,Y+8
 255 00d0 8A85      		ldd r24,Y+10
 256 00d2 0E94 0000 		call action_exec
 257               	.LVL21:
 157:./tmk_core/common/keyboard.c ****                     // process a key per task call
 258               		.loc 1 157 0
 259 00d6 F801      		movw r30,r16
 260 00d8 E050      		subi r30,lo8(-(matrix_prev.5188))
 261 00da F040      		sbci r31,hi8(-(matrix_prev.5188))
 262 00dc 8081      		ld r24,Z
 263 00de 8C25      		eor r24,r12
 264 00e0 8083      		st Z,r24
 159:./tmk_core/common/keyboard.c ****                 }
 265               		.loc 1 159 0
 266 00e2 00C0      		rjmp .L11
 267               	.LVL22:
 268               	.L9:
 269 00e4 0196      		adiw r24,1
 270               	.LVL23:
 149:./tmk_core/common/keyboard.c ****                 if (matrix_change & ((matrix_row_t)1<<c)) {
 271               		.loc 1 149 0 discriminator 2
 272 00e6 8630      		cpi r24,6
 273 00e8 9105      		cpc r25,__zero_reg__
 274 00ea 01F4      		brne .L12
 275 00ec 00C0      		rjmp .L13
 276               	.LVL24:
 277               	.L11:
 278               	.LBE7:
 279               	.LBE9:
 166:./tmk_core/common/keyboard.c **** 
 167:./tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 168:./tmk_core/common/keyboard.c **** 
 169:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 170:./tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 171:./tmk_core/common/keyboard.c ****     mousekey_task();
 280               		.loc 1 171 0
 281 00ee 0E94 0000 		call mousekey_task
 282               	.LVL25:
 172:./tmk_core/common/keyboard.c **** #endif
 173:./tmk_core/common/keyboard.c **** 
 174:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 175:./tmk_core/common/keyboard.c ****     ps2_mouse_task();
 176:./tmk_core/common/keyboard.c **** #endif
 177:./tmk_core/common/keyboard.c **** 
 178:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 179:./tmk_core/common/keyboard.c ****     serial_mouse_task();
 180:./tmk_core/common/keyboard.c **** #endif
 181:./tmk_core/common/keyboard.c **** 
 182:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 183:./tmk_core/common/keyboard.c ****     adb_mouse_task();
 184:./tmk_core/common/keyboard.c **** #endif
 185:./tmk_core/common/keyboard.c **** 
 186:./tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 187:./tmk_core/common/keyboard.c **** 	serial_link_update();
 188:./tmk_core/common/keyboard.c **** #endif
 189:./tmk_core/common/keyboard.c **** 
 190:./tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
 191:./tmk_core/common/keyboard.c ****     visualizer_update(default_layer_state, layer_state, host_keyboard_leds());
 192:./tmk_core/common/keyboard.c **** #endif
 193:./tmk_core/common/keyboard.c **** 
 194:./tmk_core/common/keyboard.c ****     // update LED
 195:./tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 283               		.loc 1 195 0
 284 00f2 0E94 0000 		call host_keyboard_leds
 285               	.LVL26:
 286 00f6 9091 0000 		lds r25,led_status.5189
 287 00fa 8917      		cp r24,r25
 288 00fc 01F0      		breq .L4
 196:./tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 289               		.loc 1 196 0
 290 00fe 0E94 0000 		call host_keyboard_leds
 291               	.LVL27:
 292 0102 8093 0000 		sts led_status.5189,r24
 293               	.LVL28:
 294               	/* epilogue start */
 197:./tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 198:./tmk_core/common/keyboard.c ****     }
 199:./tmk_core/common/keyboard.c **** }
 295               		.loc 1 199 0
 296 0106 2A96      		adiw r28,10
 297 0108 0FB6      		in __tmp_reg__,__SREG__
 298 010a F894      		cli
 299 010c DEBF      		out __SP_H__,r29
 300 010e 0FBE      		out __SREG__,__tmp_reg__
 301 0110 CDBF      		out __SP_L__,r28
 302 0112 DF91      		pop r29
 303 0114 CF91      		pop r28
 304 0116 1F91      		pop r17
 305 0118 0F91      		pop r16
 306 011a FF90      		pop r15
 307               	.LVL29:
 308 011c EF90      		pop r14
 309               	.LVL30:
 310 011e DF90      		pop r13
 311 0120 CF90      		pop r12
 312 0122 BF90      		pop r11
 313               	.LBB10:
 314               	.LBB11:
 200:./tmk_core/common/keyboard.c **** 
 201:./tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds)
 202:./tmk_core/common/keyboard.c **** {
 203:./tmk_core/common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 204:./tmk_core/common/keyboard.c ****     led_set(leds);
 315               		.loc 1 204 0
 316 0124 0C94 0000 		jmp led_set
 317               	.LVL31:
 318               	.L4:
 319               	/* epilogue start */
 320               	.LBE11:
 321               	.LBE10:
 199:./tmk_core/common/keyboard.c **** 
 322               		.loc 1 199 0
 323 0128 2A96      		adiw r28,10
 324 012a 0FB6      		in __tmp_reg__,__SREG__
 325 012c F894      		cli
 326 012e DEBF      		out __SP_H__,r29
 327 0130 0FBE      		out __SREG__,__tmp_reg__
 328 0132 CDBF      		out __SP_L__,r28
 329 0134 DF91      		pop r29
 330 0136 CF91      		pop r28
 331 0138 1F91      		pop r17
 332 013a 0F91      		pop r16
 333 013c FF90      		pop r15
 334               	.LVL32:
 335 013e EF90      		pop r14
 336               	.LVL33:
 337 0140 DF90      		pop r13
 338 0142 CF90      		pop r12
 339 0144 BF90      		pop r11
 340 0146 0895      		ret
 341               		.cfi_endproc
 342               	.LFE106:
 344               		.section	.text.keyboard_set_leds,"ax",@progbits
 345               	.global	keyboard_set_leds
 347               	keyboard_set_leds:
 348               	.LFB107:
 202:./tmk_core/common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 349               		.loc 1 202 0
 350               		.cfi_startproc
 351               	.LVL34:
 352               	/* prologue: function */
 353               	/* frame size = 0 */
 354               	/* stack size = 0 */
 355               	.L__stack_usage = 0
 356               		.loc 1 204 0
 357 0000 0C94 0000 		jmp led_set
 358               	.LVL35:
 359               		.cfi_endproc
 360               	.LFE107:
 362               		.section	.bss.led_status.5189,"aw",@nobits
 365               	led_status.5189:
 366 0000 00        		.zero	1
 367               		.section	.bss.matrix_prev.5188,"aw",@nobits
 370               	matrix_prev.5188:
 371 0000 0000 0000 		.zero	6
 371      0000 
 372               		.text
 373               	.Letext0:
 374               		.file 2 "/usr/lib/avr/include/stdint.h"
 375               		.file 3 "./tmk_core/common/keyboard.h"
 376               		.file 4 "./tmk_core/common/matrix.h"
 377               		.file 5 "./tmk_core/common/debug.h"
 378               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 379               		.file 7 "./tmk_core/common/timer.h"
 380               		.file 8 "./tmk_core/common/bootmagic.h"
 381               		.file 9 "./quantum/rgblight.h"
 382               		.file 10 "./tmk_core/common/action.h"
 383               		.file 11 "./tmk_core/common/led.h"
 384               		.file 12 "./tmk_core/common/mousekey.h"
 385               		.file 13 "./tmk_core/common/host.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
     /tmp/cc9l5hWK.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc9l5hWK.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc9l5hWK.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc9l5hWK.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc9l5hWK.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc9l5hWK.s:13     .text.matrix_setup:0000000000000000 matrix_setup
     /tmp/cc9l5hWK.s:29     .text.keyboard_setup:0000000000000000 keyboard_setup
     /tmp/cc9l5hWK.s:46     .text.keyboard_init:0000000000000000 keyboard_init
     /tmp/cc9l5hWK.s:72     .text.keyboard_task:0000000000000000 keyboard_task
     /tmp/cc9l5hWK.s:370    .bss.matrix_prev.5188:0000000000000000 matrix_prev.5188
     /tmp/cc9l5hWK.s:365    .bss.led_status.5189:0000000000000000 led_status.5189
     /tmp/cc9l5hWK.s:347    .text.keyboard_set_leds:0000000000000000 keyboard_set_leds

UNDEFINED SYMBOLS
timer_init
matrix_init
bootmagic
rgblight_init
matrix_scan
matrix_get_row
timer_read
action_exec
debug_config
matrix_print
mousekey_task
host_keyboard_leds
led_set
__do_clear_bss
