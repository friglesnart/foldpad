   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB103:
  15               		.file 1 "./tmk_core/common/action.c"
   1:./tmk_core/common/action.c **** /*
   2:./tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action.c **** 
   4:./tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action.c **** (at your option) any later version.
   8:./tmk_core/common/action.c **** 
   9:./tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action.c **** GNU General Public License for more details.
  13:./tmk_core/common/action.c **** 
  14:./tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action.c **** */
  17:./tmk_core/common/action.c **** #include "host.h"
  18:./tmk_core/common/action.c **** #include "keycode.h"
  19:./tmk_core/common/action.c **** #include "keyboard.h"
  20:./tmk_core/common/action.c **** #include "mousekey.h"
  21:./tmk_core/common/action.c **** #include "command.h"
  22:./tmk_core/common/action.c **** #include "led.h"
  23:./tmk_core/common/action.c **** #include "backlight.h"
  24:./tmk_core/common/action.c **** #include "action_layer.h"
  25:./tmk_core/common/action.c **** #include "action_tapping.h"
  26:./tmk_core/common/action.c **** #include "action_macro.h"
  27:./tmk_core/common/action.c **** #include "action_util.h"
  28:./tmk_core/common/action.c **** #include "action.h"
  29:./tmk_core/common/action.c **** 
  30:./tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  31:./tmk_core/common/action.c **** #include "debug.h"
  32:./tmk_core/common/action.c **** #else
  33:./tmk_core/common/action.c **** #include "nodebug.h"
  34:./tmk_core/common/action.c **** #endif
  35:./tmk_core/common/action.c **** 
  36:./tmk_core/common/action.c **** 
  37:./tmk_core/common/action.c **** void action_exec(keyevent_t event)
  38:./tmk_core/common/action.c **** {
  16               		.loc 1 38 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  47               	.LVL0:
  39:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  40:./tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:./tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  42:./tmk_core/common/action.c ****     }
  43:./tmk_core/common/action.c **** 
  44:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  45:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  46:./tmk_core/common/action.c ****         process_hand_swap(&event);
  47:./tmk_core/common/action.c ****     }
  48:./tmk_core/common/action.c **** #endif
  49:./tmk_core/common/action.c **** 
  50:./tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  48               		.loc 1 50 0
  49 001e DE01      		movw r26,r28
  50 0020 1196      		adiw r26,1
  51 0022 86E0      		ldi r24,lo8(6)
  52 0024 FD01      		movw r30,r26
  53               		0:
  54 0026 1192      		st Z+,__zero_reg__
  55 0028 8A95      		dec r24
  56 002a 01F4      		brne 0b
  57 002c 85E0      		ldi r24,lo8(5)
  58 002e FE01      		movw r30,r28
  59 0030 3796      		adiw r30,7
  60               		0:
  61 0032 0190      		ld r0,Z+
  62 0034 0D92      		st X+,r0
  63 0036 8A95      		dec r24
  64 0038 01F4      		brne 0b
  51:./tmk_core/common/action.c **** 
  52:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  53:./tmk_core/common/action.c ****     action_tapping_process(record);
  65               		.loc 1 53 0
  66 003a 4981      		ldd r20,Y+1
  67               	.LVL1:
  68 003c 5A81      		ldd r21,Y+2
  69               	.LVL2:
  70 003e 6B81      		ldd r22,Y+3
  71 0040 7C81      		ldd r23,Y+4
  72 0042 8D81      		ldd r24,Y+5
  73 0044 9E81      		ldd r25,Y+6
  74 0046 0E94 0000 		call action_tapping_process
  75               	.LVL3:
  76               	/* epilogue start */
  54:./tmk_core/common/action.c **** #else
  55:./tmk_core/common/action.c ****     process_record(&record);
  56:./tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  57:./tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  58:./tmk_core/common/action.c ****     }
  59:./tmk_core/common/action.c **** #endif
  60:./tmk_core/common/action.c **** }
  77               		.loc 1 60 0
  78 004a 2B96      		adiw r28,11
  79 004c 0FB6      		in __tmp_reg__,__SREG__
  80 004e F894      		cli
  81 0050 DEBF      		out __SP_H__,r29
  82 0052 0FBE      		out __SREG__,__tmp_reg__
  83 0054 CDBF      		out __SP_L__,r28
  84 0056 DF91      		pop r29
  85 0058 CF91      		pop r28
  86 005a 0895      		ret
  87               		.cfi_endproc
  88               	.LFE103:
  90               		.section	.text.process_record_quantum,"ax",@progbits
  91               		.weak	process_record_quantum
  93               	process_record_quantum:
  94               	.LFB105:
  61:./tmk_core/common/action.c **** 
  62:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  63:./tmk_core/common/action.c **** bool swap_hands = false;
  64:./tmk_core/common/action.c **** 
  65:./tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
  66:./tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
  67:./tmk_core/common/action.c **** 
  68:./tmk_core/common/action.c ****     keypos_t pos = event->key;
  69:./tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1<<pos.col;
  70:./tmk_core/common/action.c ****     bool do_swap = event->pressed ? swap_hands :
  71:./tmk_core/common/action.c ****                                     swap_state[pos.row] & (col_bit);
  72:./tmk_core/common/action.c **** 
  73:./tmk_core/common/action.c ****     if (do_swap) {
  74:./tmk_core/common/action.c ****         event->key = hand_swap_config[pos.row][pos.col];
  75:./tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
  76:./tmk_core/common/action.c ****     } else {
  77:./tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
  78:./tmk_core/common/action.c ****     }
  79:./tmk_core/common/action.c **** }
  80:./tmk_core/common/action.c **** #endif
  81:./tmk_core/common/action.c **** 
  82:./tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  83:./tmk_core/common/action.c **** bool disable_action_cache = false;
  84:./tmk_core/common/action.c **** 
  85:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  86:./tmk_core/common/action.c **** {
  87:./tmk_core/common/action.c ****     disable_action_cache = true;
  88:./tmk_core/common/action.c ****     process_record(record);
  89:./tmk_core/common/action.c ****     disable_action_cache = false;
  90:./tmk_core/common/action.c **** }
  91:./tmk_core/common/action.c **** #else
  92:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  93:./tmk_core/common/action.c **** {
  94:./tmk_core/common/action.c ****     process_record(record);
  95:./tmk_core/common/action.c **** }
  96:./tmk_core/common/action.c **** #endif
  97:./tmk_core/common/action.c **** 
  98:./tmk_core/common/action.c **** __attribute__ ((weak))
  99:./tmk_core/common/action.c **** bool process_record_quantum(keyrecord_t *record) {
  95               		.loc 1 99 0
  96               		.cfi_startproc
  97               	.LVL4:
  98               	/* prologue: function */
  99               	/* frame size = 0 */
 100               	/* stack size = 0 */
 101               	.L__stack_usage = 0
 100:./tmk_core/common/action.c ****     return true;
 101:./tmk_core/common/action.c **** }
 102               		.loc 1 101 0
 103 0000 81E0      		ldi r24,lo8(1)
 104               	.LVL5:
 105 0002 0895      		ret
 106               		.cfi_endproc
 107               	.LFE105:
 109               		.section	.text.register_code,"ax",@progbits
 110               	.global	register_code
 112               	register_code:
 113               	.LFB108:
 102:./tmk_core/common/action.c **** 
 103:./tmk_core/common/action.c **** void process_record(keyrecord_t *record) 
 104:./tmk_core/common/action.c **** {
 105:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 106:./tmk_core/common/action.c **** 
 107:./tmk_core/common/action.c ****     if(!process_record_quantum(record))
 108:./tmk_core/common/action.c ****         return;
 109:./tmk_core/common/action.c **** 
 110:./tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 111:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 112:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 113:./tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
 114:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 115:./tmk_core/common/action.c **** #endif
 116:./tmk_core/common/action.c ****     dprintln();
 117:./tmk_core/common/action.c **** 
 118:./tmk_core/common/action.c ****     process_action(record, action);
 119:./tmk_core/common/action.c **** }
 120:./tmk_core/common/action.c **** 
 121:./tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action)
 122:./tmk_core/common/action.c **** {
 123:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 124:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 125:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 126:./tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 127:./tmk_core/common/action.c **** #endif
 128:./tmk_core/common/action.c **** 
 129:./tmk_core/common/action.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 130:./tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
 131:./tmk_core/common/action.c ****         dprintf("Oneshot layer: timeout\n");
 132:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 133:./tmk_core/common/action.c ****     }
 134:./tmk_core/common/action.c **** #endif
 135:./tmk_core/common/action.c **** 
 136:./tmk_core/common/action.c ****     if (event.pressed) {
 137:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 138:./tmk_core/common/action.c ****         clear_weak_mods();
 139:./tmk_core/common/action.c ****     }
 140:./tmk_core/common/action.c **** 
 141:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 142:./tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 143:./tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 144:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 145:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 146:./tmk_core/common/action.c ****     }
 147:./tmk_core/common/action.c **** #endif
 148:./tmk_core/common/action.c **** 
 149:./tmk_core/common/action.c ****     switch (action.kind.id) {
 150:./tmk_core/common/action.c ****         /* Key and Mods */
 151:./tmk_core/common/action.c ****         case ACT_LMODS:
 152:./tmk_core/common/action.c ****         case ACT_RMODS:
 153:./tmk_core/common/action.c ****             {
 154:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 155:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 156:./tmk_core/common/action.c ****                 if (event.pressed) {
 157:./tmk_core/common/action.c ****                     if (mods) {
 158:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 159:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 160:./tmk_core/common/action.c ****                             // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSF
 161:./tmk_core/common/action.c ****                             // Same applies for some keys like KC_MEH which are declared as MEH(KC_
 162:./tmk_core/common/action.c ****                             add_mods(mods);
 163:./tmk_core/common/action.c ****                         } else {
 164:./tmk_core/common/action.c ****                             add_weak_mods(mods);
 165:./tmk_core/common/action.c ****                         }
 166:./tmk_core/common/action.c ****                         send_keyboard_report();
 167:./tmk_core/common/action.c ****                     }
 168:./tmk_core/common/action.c ****                     register_code(action.key.code);
 169:./tmk_core/common/action.c ****                 } else {
 170:./tmk_core/common/action.c ****                     unregister_code(action.key.code);
 171:./tmk_core/common/action.c ****                     if (mods) {
 172:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 173:./tmk_core/common/action.c ****                             del_mods(mods);
 174:./tmk_core/common/action.c ****                         } else {
 175:./tmk_core/common/action.c ****                             del_weak_mods(mods);
 176:./tmk_core/common/action.c ****                         }
 177:./tmk_core/common/action.c ****                         send_keyboard_report();
 178:./tmk_core/common/action.c ****                     }
 179:./tmk_core/common/action.c ****                 }
 180:./tmk_core/common/action.c ****             }
 181:./tmk_core/common/action.c ****             break;
 182:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 183:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 184:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 185:./tmk_core/common/action.c ****             {
 186:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 187:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 188:./tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 189:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 190:./tmk_core/common/action.c ****                     case MODS_ONESHOT:
 191:./tmk_core/common/action.c ****                         // Oneshot modifier
 192:./tmk_core/common/action.c ****                         if (event.pressed) {
 193:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 194:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 195:./tmk_core/common/action.c ****                                 register_mods(mods);
 196:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 197:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 198:./tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 199:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 200:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 201:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Toggling oneshot");
 202:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 203:./tmk_core/common/action.c ****                                 set_oneshot_locked_mods(mods);
 204:./tmk_core/common/action.c ****                                 register_mods(mods);
 205:./tmk_core/common/action.c ****                     #endif
 206:./tmk_core/common/action.c ****                             } else {
 207:./tmk_core/common/action.c ****                                 register_mods(mods);
 208:./tmk_core/common/action.c ****                             }
 209:./tmk_core/common/action.c ****                         } else {
 210:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 211:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 212:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 213:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 214:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 215:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 216:./tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 217:./tmk_core/common/action.c ****                                     clear_oneshot_locked_mods();
 218:./tmk_core/common/action.c ****                                     clear_oneshot_mods();
 219:./tmk_core/common/action.c ****                                     unregister_mods(mods);
 220:./tmk_core/common/action.c ****                                 }
 221:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 222:./tmk_core/common/action.c ****                                 // Toggle Oneshot Layer
 223:./tmk_core/common/action.c ****                     #endif
 224:./tmk_core/common/action.c ****                             } else {
 225:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 226:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 227:./tmk_core/common/action.c ****                             }
 228:./tmk_core/common/action.c ****                         }
 229:./tmk_core/common/action.c ****                         break;
 230:./tmk_core/common/action.c ****     #endif
 231:./tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 232:./tmk_core/common/action.c ****                         if (event.pressed) {
 233:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 234:./tmk_core/common/action.c ****                                 register_mods(mods);
 235:./tmk_core/common/action.c ****                             }
 236:./tmk_core/common/action.c ****                         } else {
 237:./tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 238:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 239:./tmk_core/common/action.c ****                             }
 240:./tmk_core/common/action.c ****                         }
 241:./tmk_core/common/action.c ****                         break;
 242:./tmk_core/common/action.c ****                     default:
 243:./tmk_core/common/action.c ****                         if (event.pressed) {
 244:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 245:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 246:./tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 247:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 248:./tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 249:./tmk_core/common/action.c ****                                     record->tap.count = 0;
 250:./tmk_core/common/action.c ****                                     register_mods(mods);
 251:./tmk_core/common/action.c ****                                 } else
 252:./tmk_core/common/action.c **** #endif
 253:./tmk_core/common/action.c ****                                 {
 254:./tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 255:./tmk_core/common/action.c ****                                     register_code(action.key.code);
 256:./tmk_core/common/action.c ****                                 }
 257:./tmk_core/common/action.c ****                             } else {
 258:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 259:./tmk_core/common/action.c ****                                 register_mods(mods);
 260:./tmk_core/common/action.c ****                             }
 261:./tmk_core/common/action.c ****                         } else {
 262:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 263:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 264:./tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 265:./tmk_core/common/action.c ****                             } else {
 266:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 267:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 268:./tmk_core/common/action.c ****                             }
 269:./tmk_core/common/action.c ****                         }
 270:./tmk_core/common/action.c ****                         break;
 271:./tmk_core/common/action.c ****                 }
 272:./tmk_core/common/action.c ****             }
 273:./tmk_core/common/action.c ****             break;
 274:./tmk_core/common/action.c **** #endif
 275:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 276:./tmk_core/common/action.c ****         /* other HID usage */
 277:./tmk_core/common/action.c ****         case ACT_USAGE:
 278:./tmk_core/common/action.c ****             switch (action.usage.page) {
 279:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 280:./tmk_core/common/action.c ****                     if (event.pressed) {
 281:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 282:./tmk_core/common/action.c ****                     } else {
 283:./tmk_core/common/action.c ****                         host_system_send(0);
 284:./tmk_core/common/action.c ****                     }
 285:./tmk_core/common/action.c ****                     break;
 286:./tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 287:./tmk_core/common/action.c ****                     if (event.pressed) {
 288:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 289:./tmk_core/common/action.c ****                     } else {
 290:./tmk_core/common/action.c ****                         host_consumer_send(0);
 291:./tmk_core/common/action.c ****                     }
 292:./tmk_core/common/action.c ****                     break;
 293:./tmk_core/common/action.c ****             }
 294:./tmk_core/common/action.c ****             break;
 295:./tmk_core/common/action.c **** #endif
 296:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 297:./tmk_core/common/action.c ****         /* Mouse key */
 298:./tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 299:./tmk_core/common/action.c ****             if (event.pressed) {
 300:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 301:./tmk_core/common/action.c ****                 mousekey_send();
 302:./tmk_core/common/action.c ****             } else {
 303:./tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 304:./tmk_core/common/action.c ****                 mousekey_send();
 305:./tmk_core/common/action.c ****             }
 306:./tmk_core/common/action.c ****             break;
 307:./tmk_core/common/action.c **** #endif
 308:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 309:./tmk_core/common/action.c ****         case ACT_LAYER:
 310:./tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 311:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 312:./tmk_core/common/action.c ****                 if (!event.pressed) {
 313:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 314:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 315:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 316:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 317:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 318:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 319:./tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 320:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 321:./tmk_core/common/action.c ****                     }
 322:./tmk_core/common/action.c ****                 }
 323:./tmk_core/common/action.c ****             } else {
 324:./tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 325:./tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 326:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 327:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 328:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 329:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 330:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 331:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 332:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 333:./tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 334:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 335:./tmk_core/common/action.c ****                     }
 336:./tmk_core/common/action.c ****                 }
 337:./tmk_core/common/action.c ****             }
 338:./tmk_core/common/action.c ****             break;
 339:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 340:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 341:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 342:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 343:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 344:./tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 345:./tmk_core/common/action.c ****                     if (event.pressed) {
 346:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 347:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 348:./tmk_core/common/action.c ****                     } else {
 349:./tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 350:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 351:./tmk_core/common/action.c ****                     }
 352:./tmk_core/common/action.c ****                     break;
 353:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 354:./tmk_core/common/action.c ****                     /* tap toggle */
 355:./tmk_core/common/action.c ****                     if (event.pressed) {
 356:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 357:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 358:./tmk_core/common/action.c ****                         }
 359:./tmk_core/common/action.c ****                     } else {
 360:./tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 361:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 362:./tmk_core/common/action.c ****                         }
 363:./tmk_core/common/action.c ****                     }
 364:./tmk_core/common/action.c ****                     break;
 365:./tmk_core/common/action.c ****                 case OP_ON_OFF:
 366:./tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 367:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 368:./tmk_core/common/action.c ****                     break;
 369:./tmk_core/common/action.c ****                 case OP_OFF_ON:
 370:./tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 371:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 372:./tmk_core/common/action.c ****                     break;
 373:./tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 374:./tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 375:./tmk_core/common/action.c ****                                     layer_clear();
 376:./tmk_core/common/action.c ****                     break;
 377:./tmk_core/common/action.c ****             #ifndef NO_ACTION_ONESHOT
 378:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 379:./tmk_core/common/action.c ****                     // Oneshot modifier
 380:./tmk_core/common/action.c ****                 #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 381:./tmk_core/common/action.c ****                     do_release_oneshot = false;
 382:./tmk_core/common/action.c ****                     if (event.pressed) {
 383:./tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 384:./tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 385:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 386:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 387:./tmk_core/common/action.c ****                             break;
 388:./tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 389:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 390:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 391:./tmk_core/common/action.c ****                         }
 392:./tmk_core/common/action.c ****                     } else {
 393:./tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 394:./tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 395:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 396:./tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 397:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 398:./tmk_core/common/action.c ****                         } else {
 399:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 400:./tmk_core/common/action.c ****                         }
 401:./tmk_core/common/action.c ****                     }
 402:./tmk_core/common/action.c ****                 #else
 403:./tmk_core/common/action.c ****                     if (event.pressed) {
 404:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 405:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 406:./tmk_core/common/action.c ****                     } else {
 407:./tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 408:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 409:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 410:./tmk_core/common/action.c ****                         }
 411:./tmk_core/common/action.c ****                     }
 412:./tmk_core/common/action.c ****                 #endif
 413:./tmk_core/common/action.c ****                     break;
 414:./tmk_core/common/action.c ****             #endif
 415:./tmk_core/common/action.c ****                 default:
 416:./tmk_core/common/action.c ****                     /* tap key */
 417:./tmk_core/common/action.c ****                     if (event.pressed) {
 418:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 419:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 420:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 421:./tmk_core/common/action.c ****                         } else {
 422:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 423:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 424:./tmk_core/common/action.c ****                         }
 425:./tmk_core/common/action.c ****                     } else {
 426:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 427:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 428:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 429:./tmk_core/common/action.c ****                         } else {
 430:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 431:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 432:./tmk_core/common/action.c ****                         }
 433:./tmk_core/common/action.c ****                     }
 434:./tmk_core/common/action.c ****                     break;
 435:./tmk_core/common/action.c ****             }
 436:./tmk_core/common/action.c ****             break;
 437:./tmk_core/common/action.c ****     #endif
 438:./tmk_core/common/action.c **** #endif
 439:./tmk_core/common/action.c ****         /* Extentions */
 440:./tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 441:./tmk_core/common/action.c ****         case ACT_MACRO:
 442:./tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 443:./tmk_core/common/action.c ****             break;
 444:./tmk_core/common/action.c **** #endif
 445:./tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 446:./tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 447:./tmk_core/common/action.c ****             if (!event.pressed) {
 448:./tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 449:./tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 450:./tmk_core/common/action.c ****                         backlight_increase();
 451:./tmk_core/common/action.c ****                         break;
 452:./tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 453:./tmk_core/common/action.c ****                         backlight_decrease();
 454:./tmk_core/common/action.c ****                         break;
 455:./tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 456:./tmk_core/common/action.c ****                         backlight_toggle();
 457:./tmk_core/common/action.c ****                         break;
 458:./tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 459:./tmk_core/common/action.c ****                         backlight_step();
 460:./tmk_core/common/action.c ****                         break;
 461:./tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 462:./tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 463:./tmk_core/common/action.c ****                         break;
 464:./tmk_core/common/action.c ****                 }
 465:./tmk_core/common/action.c ****             }
 466:./tmk_core/common/action.c ****             break;
 467:./tmk_core/common/action.c **** #endif
 468:./tmk_core/common/action.c ****         case ACT_COMMAND:
 469:./tmk_core/common/action.c ****             break;
 470:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
 471:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 472:./tmk_core/common/action.c ****             switch (action.swap.code) {
 473:./tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 474:./tmk_core/common/action.c ****                     if (event.pressed) {
 475:./tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 476:./tmk_core/common/action.c ****                     }
 477:./tmk_core/common/action.c ****                     break;
 478:./tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 479:./tmk_core/common/action.c ****                     swap_hands = event.pressed;
 480:./tmk_core/common/action.c ****                     break;
 481:./tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 482:./tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 483:./tmk_core/common/action.c ****                     break;
 484:./tmk_core/common/action.c ****                 case OP_SH_ON:
 485:./tmk_core/common/action.c ****                     if (!event.pressed) {
 486:./tmk_core/common/action.c ****                         swap_hands = true;
 487:./tmk_core/common/action.c ****                     }
 488:./tmk_core/common/action.c ****                     break;
 489:./tmk_core/common/action.c ****                 case OP_SH_OFF:
 490:./tmk_core/common/action.c ****                     if (!event.pressed) {
 491:./tmk_core/common/action.c ****                         swap_hands = false;
 492:./tmk_core/common/action.c ****                     }
 493:./tmk_core/common/action.c ****                     break;
 494:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 495:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 496:./tmk_core/common/action.c ****                     /* tap toggle */
 497:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 498:./tmk_core/common/action.c ****                         if (!event.pressed) {
 499:./tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 500:./tmk_core/common/action.c ****                         }
 501:./tmk_core/common/action.c ****                     } else {
 502:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 503:./tmk_core/common/action.c ****                     }
 504:./tmk_core/common/action.c ****                     break;
 505:./tmk_core/common/action.c ****                 default:
 506:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 507:./tmk_core/common/action.c ****                         if (event.pressed) {
 508:./tmk_core/common/action.c ****                             register_code(action.swap.code);
 509:./tmk_core/common/action.c ****                         } else {
 510:./tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 511:./tmk_core/common/action.c ****                         }
 512:./tmk_core/common/action.c ****                     } else {
 513:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 514:./tmk_core/common/action.c ****                     }
 515:./tmk_core/common/action.c ****     #endif
 516:./tmk_core/common/action.c ****             }
 517:./tmk_core/common/action.c **** #endif
 518:./tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 519:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 520:./tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 521:./tmk_core/common/action.c ****             break;
 522:./tmk_core/common/action.c **** #endif
 523:./tmk_core/common/action.c ****         default:
 524:./tmk_core/common/action.c ****             break;
 525:./tmk_core/common/action.c ****     }
 526:./tmk_core/common/action.c **** 
 527:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 528:./tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 529:./tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 530:./tmk_core/common/action.c ****      */
 531:./tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
 532:./tmk_core/common/action.c ****         record->event.pressed = false;
 533:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 534:./tmk_core/common/action.c ****         process_record(record);
 535:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 536:./tmk_core/common/action.c ****     }
 537:./tmk_core/common/action.c **** #endif
 538:./tmk_core/common/action.c **** }
 539:./tmk_core/common/action.c **** 
 540:./tmk_core/common/action.c **** 
 541:./tmk_core/common/action.c **** 
 542:./tmk_core/common/action.c **** 
 543:./tmk_core/common/action.c **** /*
 544:./tmk_core/common/action.c ****  * Utilities for actions.
 545:./tmk_core/common/action.c ****  */
 546:./tmk_core/common/action.c **** void register_code(uint8_t code)
 547:./tmk_core/common/action.c **** {
 114               		.loc 1 547 0
 115               		.cfi_startproc
 116               	.LVL6:
 117               	/* prologue: function */
 118               	/* frame size = 0 */
 119               	/* stack size = 0 */
 120               	.L__stack_usage = 0
 548:./tmk_core/common/action.c ****     if (code == KC_NO) {
 121               		.loc 1 548 0
 122 0000 8823      		tst r24
 123 0002 01F4      		brne .+2
 124 0004 00C0      		rjmp .L3
 549:./tmk_core/common/action.c ****         return;
 550:./tmk_core/common/action.c ****     }
 551:./tmk_core/common/action.c **** 
 552:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 553:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 125               		.loc 1 553 0
 126 0006 8238      		cpi r24,lo8(-126)
 127 0008 01F4      		brne .L6
 554:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 555:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 556:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 128               		.loc 1 556 0
 129 000a 0E94 0000 		call host_keyboard_leds
 130               	.LVL7:
 131 000e 81FD      		sbrc r24,1
 132 0010 00C0      		rjmp .L3
 557:./tmk_core/common/action.c **** #endif
 558:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 133               		.loc 1 558 0
 134 0012 89E3      		ldi r24,lo8(57)
 135 0014 0E94 0000 		call add_key
 136               	.LVL8:
 559:./tmk_core/common/action.c ****         send_keyboard_report();
 137               		.loc 1 559 0
 138 0018 0E94 0000 		call send_keyboard_report
 139               	.LVL9:
 560:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 140               		.loc 1 560 0
 141 001c 89E3      		ldi r24,lo8(57)
 142 001e 00C0      		rjmp .L38
 143               	.LVL10:
 144               	.L6:
 561:./tmk_core/common/action.c ****         send_keyboard_report();
 562:./tmk_core/common/action.c ****     }
 563:./tmk_core/common/action.c **** 
 564:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 145               		.loc 1 564 0
 146 0020 8338      		cpi r24,lo8(-125)
 147 0022 01F4      		brne .L8
 565:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 566:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 148               		.loc 1 566 0
 149 0024 0E94 0000 		call host_keyboard_leds
 150               	.LVL11:
 151 0028 80FD      		sbrc r24,0
 152 002a 00C0      		rjmp .L3
 567:./tmk_core/common/action.c **** #endif
 568:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 153               		.loc 1 568 0
 154 002c 83E5      		ldi r24,lo8(83)
 155 002e 0E94 0000 		call add_key
 156               	.LVL12:
 569:./tmk_core/common/action.c ****         send_keyboard_report();
 157               		.loc 1 569 0
 158 0032 0E94 0000 		call send_keyboard_report
 159               	.LVL13:
 570:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 160               		.loc 1 570 0
 161 0036 83E5      		ldi r24,lo8(83)
 162               	.L38:
 163 0038 0E94 0000 		call del_key
 164               	.LVL14:
 165               	.L39:
 571:./tmk_core/common/action.c ****         send_keyboard_report();
 166               		.loc 1 571 0
 167 003c 0C94 0000 		jmp send_keyboard_report
 168               	.LVL15:
 169               	.L8:
 572:./tmk_core/common/action.c ****     }
 573:./tmk_core/common/action.c **** 
 574:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 170               		.loc 1 574 0
 171 0040 8438      		cpi r24,lo8(-124)
 172 0042 01F4      		brne .L9
 575:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 576:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 173               		.loc 1 576 0
 174 0044 0E94 0000 		call host_keyboard_leds
 175               	.LVL16:
 176 0048 82FD      		sbrc r24,2
 177 004a 00C0      		rjmp .L3
 577:./tmk_core/common/action.c **** #endif
 578:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 178               		.loc 1 578 0
 179 004c 87E4      		ldi r24,lo8(71)
 180 004e 0E94 0000 		call add_key
 181               	.LVL17:
 579:./tmk_core/common/action.c ****         send_keyboard_report();
 182               		.loc 1 579 0
 183 0052 0E94 0000 		call send_keyboard_report
 184               	.LVL18:
 580:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 185               		.loc 1 580 0
 186 0056 87E4      		ldi r24,lo8(71)
 187 0058 00C0      		rjmp .L38
 188               	.LVL19:
 189               	.L9:
 581:./tmk_core/common/action.c ****         send_keyboard_report();
 582:./tmk_core/common/action.c ****     }
 583:./tmk_core/common/action.c **** #endif
 584:./tmk_core/common/action.c **** 
 585:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 190               		.loc 1 585 0
 191 005a 9CEF      		ldi r25,lo8(-4)
 192 005c 980F      		add r25,r24
 193 005e 913A      		cpi r25,lo8(-95)
 194 0060 00F4      		brsh .L10
 586:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 587:./tmk_core/common/action.c ****         if (command_proc(code)) return;
 588:./tmk_core/common/action.c **** 
 589:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 590:./tmk_core/common/action.c **** /* TODO: remove
 591:./tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 592:./tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 593:./tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 594:./tmk_core/common/action.c **** 
 595:./tmk_core/common/action.c ****             add_key(code);
 596:./tmk_core/common/action.c ****             send_keyboard_report();
 597:./tmk_core/common/action.c **** 
 598:./tmk_core/common/action.c ****             set_mods(tmp_mods);
 599:./tmk_core/common/action.c ****             send_keyboard_report();
 600:./tmk_core/common/action.c ****             oneshot_cancel();
 601:./tmk_core/common/action.c ****         } else
 602:./tmk_core/common/action.c **** */
 603:./tmk_core/common/action.c **** #endif
 604:./tmk_core/common/action.c ****         {
 605:./tmk_core/common/action.c ****             add_key(code);
 195               		.loc 1 605 0
 196 0062 0E94 0000 		call add_key
 197               	.LVL20:
 198 0066 00C0      		rjmp .L39
 199               	.LVL21:
 200               	.L10:
 606:./tmk_core/common/action.c ****             send_keyboard_report();
 607:./tmk_core/common/action.c ****         }
 608:./tmk_core/common/action.c ****     }
 609:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 201               		.loc 1 609 0
 202 0068 90E2      		ldi r25,lo8(32)
 203 006a 980F      		add r25,r24
 204 006c 9830      		cpi r25,lo8(8)
 205 006e 00F4      		brsh .L11
 610:./tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 206               		.loc 1 610 0
 207 0070 8770      		andi r24,lo8(7)
 208               	.LVL22:
 209 0072 91E0      		ldi r25,lo8(1)
 210 0074 00C0      		rjmp 2f
 211               		1:
 212 0076 990F      		lsl r25
 213               		2:
 214 0078 8A95      		dec r24
 215 007a 02F4      		brpl 1b
 216 007c 892F      		mov r24,r25
 217 007e 0E94 0000 		call add_mods
 218               	.LVL23:
 219 0082 00C0      		rjmp .L39
 220               	.LVL24:
 221               	.L11:
 611:./tmk_core/common/action.c ****         send_keyboard_report();
 612:./tmk_core/common/action.c ****     }
 613:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 222               		.loc 1 613 0
 223 0084 9BE5      		ldi r25,lo8(91)
 224 0086 980F      		add r25,r24
 225 0088 9330      		cpi r25,lo8(3)
 226 008a 00F4      		brsh .L12
 614:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 227               		.loc 1 614 0
 228 008c 853A      		cpi r24,lo8(-91)
 229 008e 01F0      		breq .L15
 230               		.loc 1 614 0 is_stmt 0 discriminator 1
 231 0090 863A      		cpi r24,lo8(-90)
 232 0092 01F0      		breq .L16
 233               		.loc 1 614 0
 234 0094 83E8      		ldi r24,lo8(-125)
 235 0096 90E0      		ldi r25,0
 236               	.LVL25:
 237 0098 00C0      		rjmp .L13
 238               	.LVL26:
 239               	.L15:
 240 009a 81E8      		ldi r24,lo8(-127)
 241 009c 90E0      		ldi r25,0
 242               	.LVL27:
 243 009e 00C0      		rjmp .L13
 244               	.LVL28:
 245               	.L16:
 246 00a0 82E8      		ldi r24,lo8(-126)
 247 00a2 90E0      		ldi r25,0
 248               	.LVL29:
 249               	.L13:
 250               		.loc 1 614 0 discriminator 12
 251 00a4 0C94 0000 		jmp host_system_send
 252               	.LVL30:
 253               	.L12:
 615:./tmk_core/common/action.c ****     }
 616:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 254               		.loc 1 616 0 is_stmt 1
 255 00a8 98E5      		ldi r25,lo8(88)
 256 00aa 980F      		add r25,r24
 257 00ac 9531      		cpi r25,lo8(21)
 258 00ae 00F0      		brlo .+2
 259 00b0 00C0      		rjmp .L3
 617:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 260               		.loc 1 617 0
 261 00b2 883A      		cpi r24,lo8(-88)
 262 00b4 01F0      		breq .L17
 263               		.loc 1 617 0 is_stmt 0 discriminator 1
 264 00b6 893A      		cpi r24,lo8(-87)
 265 00b8 01F0      		breq .L18
 266               		.loc 1 617 0 discriminator 3
 267 00ba 8A3A      		cpi r24,lo8(-86)
 268 00bc 01F0      		breq .L19
 269               		.loc 1 617 0 discriminator 5
 270 00be 8B3A      		cpi r24,lo8(-85)
 271 00c0 01F0      		breq .L20
 272               		.loc 1 617 0 discriminator 7
 273 00c2 8C3A      		cpi r24,lo8(-84)
 274 00c4 01F0      		breq .L21
 275               		.loc 1 617 0 discriminator 9
 276 00c6 8B3B      		cpi r24,lo8(-69)
 277 00c8 01F0      		breq .L22
 278               		.loc 1 617 0 discriminator 11
 279 00ca 8C3B      		cpi r24,lo8(-68)
 280 00cc 01F0      		breq .L23
 281               		.loc 1 617 0 discriminator 13
 282 00ce 8D3A      		cpi r24,lo8(-83)
 283 00d0 01F0      		breq .L24
 284               		.loc 1 617 0 discriminator 15
 285 00d2 803B      		cpi r24,lo8(-80)
 286 00d4 01F0      		breq .L25
 287               		.loc 1 617 0 discriminator 17
 288 00d6 8E3A      		cpi r24,lo8(-82)
 289 00d8 01F0      		breq .L26
 290               		.loc 1 617 0 discriminator 19
 291 00da 8F3A      		cpi r24,lo8(-81)
 292 00dc 01F0      		breq .L27
 293               		.loc 1 617 0 discriminator 21
 294 00de 813B      		cpi r24,lo8(-79)
 295 00e0 01F0      		breq .L28
 296               		.loc 1 617 0 discriminator 23
 297 00e2 823B      		cpi r24,lo8(-78)
 298 00e4 01F0      		breq .L29
 299               		.loc 1 617 0 discriminator 25
 300 00e6 833B      		cpi r24,lo8(-77)
 301 00e8 01F0      		breq .L30
 302               		.loc 1 617 0 discriminator 27
 303 00ea 843B      		cpi r24,lo8(-76)
 304 00ec 01F0      		breq .L31
 305               		.loc 1 617 0 discriminator 29
 306 00ee 853B      		cpi r24,lo8(-75)
 307 00f0 01F0      		breq .L32
 308               		.loc 1 617 0 discriminator 31
 309 00f2 863B      		cpi r24,lo8(-74)
 310 00f4 01F0      		breq .L33
 311               		.loc 1 617 0 discriminator 33
 312 00f6 873B      		cpi r24,lo8(-73)
 313 00f8 01F0      		breq .L34
 314               		.loc 1 617 0 discriminator 35
 315 00fa 883B      		cpi r24,lo8(-72)
 316 00fc 01F0      		breq .L35
 317               		.loc 1 617 0 discriminator 37
 318 00fe 893B      		cpi r24,lo8(-71)
 319 0100 01F0      		breq .L36
 320               		.loc 1 617 0 discriminator 39
 321 0102 8A3B      		cpi r24,lo8(-70)
 322 0104 01F4      		brne .+2
 323 0106 00C0      		rjmp .L37
 324               		.loc 1 617 0
 325 0108 80E0      		ldi r24,0
 326 010a 90E0      		ldi r25,0
 327               	.LVL31:
 328 010c 00C0      		rjmp .L14
 329               	.LVL32:
 330               	.L17:
 331 010e 82EE      		ldi r24,lo8(-30)
 332 0110 90E0      		ldi r25,0
 333               	.LVL33:
 334 0112 00C0      		rjmp .L14
 335               	.LVL34:
 336               	.L18:
 337 0114 89EE      		ldi r24,lo8(-23)
 338 0116 90E0      		ldi r25,0
 339               	.LVL35:
 340 0118 00C0      		rjmp .L14
 341               	.LVL36:
 342               	.L19:
 343 011a 8AEE      		ldi r24,lo8(-22)
 344 011c 90E0      		ldi r25,0
 345               	.LVL37:
 346 011e 00C0      		rjmp .L14
 347               	.LVL38:
 348               	.L20:
 349 0120 85EB      		ldi r24,lo8(-75)
 350 0122 90E0      		ldi r25,0
 351               	.LVL39:
 352 0124 00C0      		rjmp .L14
 353               	.LVL40:
 354               	.L21:
 355 0126 86EB      		ldi r24,lo8(-74)
 356 0128 90E0      		ldi r25,0
 357               	.LVL41:
 358 012a 00C0      		rjmp .L14
 359               	.LVL42:
 360               	.L22:
 361 012c 83EB      		ldi r24,lo8(-77)
 362 012e 90E0      		ldi r25,0
 363               	.LVL43:
 364 0130 00C0      		rjmp .L14
 365               	.LVL44:
 366               	.L23:
 367 0132 84EB      		ldi r24,lo8(-76)
 368 0134 90E0      		ldi r25,0
 369               	.LVL45:
 370 0136 00C0      		rjmp .L14
 371               	.LVL46:
 372               	.L24:
 373 0138 87EB      		ldi r24,lo8(-73)
 374 013a 90E0      		ldi r25,0
 375               	.LVL47:
 376 013c 00C0      		rjmp .L14
 377               	.LVL48:
 378               	.L25:
 379 013e 8CEC      		ldi r24,lo8(-52)
 380 0140 90E0      		ldi r25,0
 381               	.LVL49:
 382 0142 00C0      		rjmp .L14
 383               	.LVL50:
 384               	.L26:
 385 0144 8DEC      		ldi r24,lo8(-51)
 386 0146 90E0      		ldi r25,0
 387               	.LVL51:
 388 0148 00C0      		rjmp .L14
 389               	.LVL52:
 390               	.L27:
 391 014a 83E8      		ldi r24,lo8(-125)
 392 014c 91E0      		ldi r25,lo8(1)
 393               	.LVL53:
 394 014e 00C0      		rjmp .L14
 395               	.LVL54:
 396               	.L28:
 397 0150 8AE8      		ldi r24,lo8(-118)
 398 0152 91E0      		ldi r25,lo8(1)
 399               	.LVL55:
 400 0154 00C0      		rjmp .L14
 401               	.LVL56:
 402               	.L29:
 403 0156 82E9      		ldi r24,lo8(-110)
 404 0158 91E0      		ldi r25,lo8(1)
 405               	.LVL57:
 406 015a 00C0      		rjmp .L14
 407               	.LVL58:
 408               	.L30:
 409 015c 84E9      		ldi r24,lo8(-108)
 410 015e 91E0      		ldi r25,lo8(1)
 411               	.LVL59:
 412 0160 00C0      		rjmp .L14
 413               	.LVL60:
 414               	.L31:
 415 0162 81E2      		ldi r24,lo8(33)
 416 0164 92E0      		ldi r25,lo8(2)
 417               	.LVL61:
 418 0166 00C0      		rjmp .L14
 419               	.LVL62:
 420               	.L32:
 421 0168 83E2      		ldi r24,lo8(35)
 422 016a 92E0      		ldi r25,lo8(2)
 423               	.LVL63:
 424 016c 00C0      		rjmp .L14
 425               	.LVL64:
 426               	.L33:
 427 016e 84E2      		ldi r24,lo8(36)
 428 0170 92E0      		ldi r25,lo8(2)
 429               	.LVL65:
 430 0172 00C0      		rjmp .L14
 431               	.LVL66:
 432               	.L34:
 433 0174 85E2      		ldi r24,lo8(37)
 434 0176 92E0      		ldi r25,lo8(2)
 435               	.LVL67:
 436 0178 00C0      		rjmp .L14
 437               	.LVL68:
 438               	.L35:
 439 017a 86E2      		ldi r24,lo8(38)
 440 017c 92E0      		ldi r25,lo8(2)
 441               	.LVL69:
 442 017e 00C0      		rjmp .L14
 443               	.LVL70:
 444               	.L36:
 445 0180 87E2      		ldi r24,lo8(39)
 446 0182 92E0      		ldi r25,lo8(2)
 447               	.LVL71:
 448 0184 00C0      		rjmp .L14
 449               	.LVL72:
 450               	.L37:
 451 0186 8AE2      		ldi r24,lo8(42)
 452 0188 92E0      		ldi r25,lo8(2)
 453               	.LVL73:
 454               	.L14:
 455               		.loc 1 617 0 discriminator 84
 456 018a 0C94 0000 		jmp host_consumer_send
 457               	.LVL74:
 458               	.L3:
 459 018e 0895      		ret
 460               		.cfi_endproc
 461               	.LFE108:
 463               		.section	.text.unregister_code,"ax",@progbits
 464               	.global	unregister_code
 466               	unregister_code:
 467               	.LFB109:
 618:./tmk_core/common/action.c ****     }
 619:./tmk_core/common/action.c **** }
 620:./tmk_core/common/action.c **** 
 621:./tmk_core/common/action.c **** void unregister_code(uint8_t code)
 622:./tmk_core/common/action.c **** {
 468               		.loc 1 622 0 is_stmt 1
 469               		.cfi_startproc
 470               	.LVL75:
 471               	/* prologue: function */
 472               	/* frame size = 0 */
 473               	/* stack size = 0 */
 474               	.L__stack_usage = 0
 623:./tmk_core/common/action.c ****     if (code == KC_NO) {
 475               		.loc 1 623 0
 476 0000 8823      		tst r24
 477 0002 01F4      		brne .+2
 478 0004 00C0      		rjmp .L41
 624:./tmk_core/common/action.c ****         return;
 625:./tmk_core/common/action.c ****     }
 626:./tmk_core/common/action.c **** 
 627:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 628:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 479               		.loc 1 628 0
 480 0006 8238      		cpi r24,lo8(-126)
 481 0008 01F4      		brne .L44
 629:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 630:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 631:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 482               		.loc 1 631 0
 483 000a 0E94 0000 		call host_keyboard_leds
 484               	.LVL76:
 485 000e 81FF      		sbrs r24,1
 486 0010 00C0      		rjmp .L41
 632:./tmk_core/common/action.c **** #endif
 633:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 487               		.loc 1 633 0
 488 0012 89E3      		ldi r24,lo8(57)
 489 0014 0E94 0000 		call add_key
 490               	.LVL77:
 634:./tmk_core/common/action.c ****         send_keyboard_report();
 491               		.loc 1 634 0
 492 0018 0E94 0000 		call send_keyboard_report
 493               	.LVL78:
 635:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 494               		.loc 1 635 0
 495 001c 89E3      		ldi r24,lo8(57)
 496 001e 00C0      		rjmp .L60
 497               	.LVL79:
 498               	.L44:
 636:./tmk_core/common/action.c ****         send_keyboard_report();
 637:./tmk_core/common/action.c ****     }
 638:./tmk_core/common/action.c **** 
 639:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 499               		.loc 1 639 0
 500 0020 8338      		cpi r24,lo8(-125)
 501 0022 01F4      		brne .L46
 640:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 641:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 502               		.loc 1 641 0
 503 0024 0E94 0000 		call host_keyboard_leds
 504               	.LVL80:
 505 0028 80FF      		sbrs r24,0
 506 002a 00C0      		rjmp .L41
 642:./tmk_core/common/action.c **** #endif
 643:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 507               		.loc 1 643 0
 508 002c 83E5      		ldi r24,lo8(83)
 509 002e 0E94 0000 		call add_key
 510               	.LVL81:
 644:./tmk_core/common/action.c ****         send_keyboard_report();
 511               		.loc 1 644 0
 512 0032 0E94 0000 		call send_keyboard_report
 513               	.LVL82:
 645:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 514               		.loc 1 645 0
 515 0036 83E5      		ldi r24,lo8(83)
 516               	.L60:
 517 0038 0E94 0000 		call del_key
 518               	.LVL83:
 519               	.L61:
 646:./tmk_core/common/action.c ****         send_keyboard_report();
 520               		.loc 1 646 0
 521 003c 0C94 0000 		jmp send_keyboard_report
 522               	.LVL84:
 523               	.L46:
 647:./tmk_core/common/action.c ****     }
 648:./tmk_core/common/action.c **** 
 649:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 524               		.loc 1 649 0
 525 0040 8438      		cpi r24,lo8(-124)
 526 0042 01F4      		brne .L47
 650:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 651:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 527               		.loc 1 651 0
 528 0044 0E94 0000 		call host_keyboard_leds
 529               	.LVL85:
 530 0048 82FF      		sbrs r24,2
 531 004a 00C0      		rjmp .L41
 652:./tmk_core/common/action.c **** #endif
 653:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 532               		.loc 1 653 0
 533 004c 87E4      		ldi r24,lo8(71)
 534 004e 0E94 0000 		call add_key
 535               	.LVL86:
 654:./tmk_core/common/action.c ****         send_keyboard_report();
 536               		.loc 1 654 0
 537 0052 0E94 0000 		call send_keyboard_report
 538               	.LVL87:
 655:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 539               		.loc 1 655 0
 540 0056 87E4      		ldi r24,lo8(71)
 541 0058 00C0      		rjmp .L60
 542               	.LVL88:
 543               	.L47:
 656:./tmk_core/common/action.c ****         send_keyboard_report();
 657:./tmk_core/common/action.c ****     }
 658:./tmk_core/common/action.c **** #endif
 659:./tmk_core/common/action.c **** 
 660:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 544               		.loc 1 660 0
 545 005a 9CEF      		ldi r25,lo8(-4)
 546 005c 980F      		add r25,r24
 547 005e 913A      		cpi r25,lo8(-95)
 548 0060 00F0      		brlo .L60
 661:./tmk_core/common/action.c ****         del_key(code);
 662:./tmk_core/common/action.c ****         send_keyboard_report();
 663:./tmk_core/common/action.c ****     }
 664:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 549               		.loc 1 664 0
 550 0062 90E2      		ldi r25,lo8(32)
 551 0064 980F      		add r25,r24
 552 0066 9830      		cpi r25,lo8(8)
 553 0068 00F4      		brsh .L49
 665:./tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 554               		.loc 1 665 0
 555 006a 8770      		andi r24,lo8(7)
 556               	.LVL89:
 557 006c 91E0      		ldi r25,lo8(1)
 558 006e 00C0      		rjmp 2f
 559               		1:
 560 0070 990F      		lsl r25
 561               		2:
 562 0072 8A95      		dec r24
 563 0074 02F4      		brpl 1b
 564 0076 892F      		mov r24,r25
 565 0078 0E94 0000 		call del_mods
 566               	.LVL90:
 567 007c 00C0      		rjmp .L61
 568               	.LVL91:
 569               	.L49:
 666:./tmk_core/common/action.c ****         send_keyboard_report();
 667:./tmk_core/common/action.c ****     }
 668:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 570               		.loc 1 668 0
 571 007e 9BE5      		ldi r25,lo8(91)
 572 0080 980F      		add r25,r24
 573 0082 9330      		cpi r25,lo8(3)
 574 0084 00F4      		brsh .L50
 669:./tmk_core/common/action.c ****         host_system_send(0);
 575               		.loc 1 669 0
 576 0086 80E0      		ldi r24,0
 577 0088 90E0      		ldi r25,0
 578               	.LVL92:
 579 008a 0C94 0000 		jmp host_system_send
 580               	.LVL93:
 581               	.L50:
 670:./tmk_core/common/action.c ****     }
 671:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 582               		.loc 1 671 0
 583 008e 885A      		subi r24,lo8(-(88))
 584               	.LVL94:
 585 0090 8531      		cpi r24,lo8(21)
 586 0092 00F4      		brsh .L41
 672:./tmk_core/common/action.c ****         host_consumer_send(0);
 587               		.loc 1 672 0
 588 0094 80E0      		ldi r24,0
 589 0096 90E0      		ldi r25,0
 590               	.LVL95:
 591 0098 0C94 0000 		jmp host_consumer_send
 592               	.LVL96:
 593               	.L41:
 594 009c 0895      		ret
 595               		.cfi_endproc
 596               	.LFE109:
 598               		.section	.text.register_mods,"ax",@progbits
 599               	.global	register_mods
 601               	register_mods:
 602               	.LFB110:
 673:./tmk_core/common/action.c ****     }
 674:./tmk_core/common/action.c **** }
 675:./tmk_core/common/action.c **** 
 676:./tmk_core/common/action.c **** void register_mods(uint8_t mods)
 677:./tmk_core/common/action.c **** {
 603               		.loc 1 677 0
 604               		.cfi_startproc
 605               	.LVL97:
 606               	/* prologue: function */
 607               	/* frame size = 0 */
 608               	/* stack size = 0 */
 609               	.L__stack_usage = 0
 678:./tmk_core/common/action.c ****     if (mods) {
 610               		.loc 1 678 0
 611 0000 8823      		tst r24
 612 0002 01F0      		breq .L62
 679:./tmk_core/common/action.c ****         add_mods(mods);
 613               		.loc 1 679 0
 614 0004 0E94 0000 		call add_mods
 615               	.LVL98:
 680:./tmk_core/common/action.c ****         send_keyboard_report();
 616               		.loc 1 680 0
 617 0008 0C94 0000 		jmp send_keyboard_report
 618               	.LVL99:
 619               	.L62:
 620 000c 0895      		ret
 621               		.cfi_endproc
 622               	.LFE110:
 624               		.section	.text.unregister_mods,"ax",@progbits
 625               	.global	unregister_mods
 627               	unregister_mods:
 628               	.LFB111:
 681:./tmk_core/common/action.c ****     }
 682:./tmk_core/common/action.c **** }
 683:./tmk_core/common/action.c **** 
 684:./tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 685:./tmk_core/common/action.c **** {
 629               		.loc 1 685 0
 630               		.cfi_startproc
 631               	.LVL100:
 632               	/* prologue: function */
 633               	/* frame size = 0 */
 634               	/* stack size = 0 */
 635               	.L__stack_usage = 0
 686:./tmk_core/common/action.c ****     if (mods) {
 636               		.loc 1 686 0
 637 0000 8823      		tst r24
 638 0002 01F0      		breq .L64
 687:./tmk_core/common/action.c ****         del_mods(mods);
 639               		.loc 1 687 0
 640 0004 0E94 0000 		call del_mods
 641               	.LVL101:
 688:./tmk_core/common/action.c ****         send_keyboard_report();
 642               		.loc 1 688 0
 643 0008 0C94 0000 		jmp send_keyboard_report
 644               	.LVL102:
 645               	.L64:
 646 000c 0895      		ret
 647               		.cfi_endproc
 648               	.LFE111:
 650               		.section	.text.process_action,"ax",@progbits
 651               	.global	process_action
 653               	process_action:
 654               	.LFB107:
 122:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 655               		.loc 1 122 0
 656               		.cfi_startproc
 657               	.LVL103:
 658 0000 8F92      		push r8
 659               	.LCFI4:
 660               		.cfi_def_cfa_offset 3
 661               		.cfi_offset 8, -2
 662 0002 9F92      		push r9
 663               	.LCFI5:
 664               		.cfi_def_cfa_offset 4
 665               		.cfi_offset 9, -3
 666 0004 AF92      		push r10
 667               	.LCFI6:
 668               		.cfi_def_cfa_offset 5
 669               		.cfi_offset 10, -4
 670 0006 BF92      		push r11
 671               	.LCFI7:
 672               		.cfi_def_cfa_offset 6
 673               		.cfi_offset 11, -5
 674 0008 DF92      		push r13
 675               	.LCFI8:
 676               		.cfi_def_cfa_offset 7
 677               		.cfi_offset 13, -6
 678 000a EF92      		push r14
 679               	.LCFI9:
 680               		.cfi_def_cfa_offset 8
 681               		.cfi_offset 14, -7
 682 000c FF92      		push r15
 683               	.LCFI10:
 684               		.cfi_def_cfa_offset 9
 685               		.cfi_offset 15, -8
 686 000e 0F93      		push r16
 687               	.LCFI11:
 688               		.cfi_def_cfa_offset 10
 689               		.cfi_offset 16, -9
 690 0010 1F93      		push r17
 691               	.LCFI12:
 692               		.cfi_def_cfa_offset 11
 693               		.cfi_offset 17, -10
 694 0012 CF93      		push r28
 695               	.LCFI13:
 696               		.cfi_def_cfa_offset 12
 697               		.cfi_offset 28, -11
 698 0014 DF93      		push r29
 699               	.LCFI14:
 700               		.cfi_def_cfa_offset 13
 701               		.cfi_offset 29, -12
 702               	/* prologue: function */
 703               	/* frame size = 0 */
 704               	/* stack size = 11 */
 705               	.L__stack_usage = 11
 706 0016 7C01      		movw r14,r24
 707 0018 D62F      		mov r29,r22
 708 001a C72F      		mov r28,r23
 709               	.LVL104:
 126:./tmk_core/common/action.c **** #endif
 710               		.loc 1 126 0
 711 001c FC01      		movw r30,r24
 712 001e 0581      		ldd r16,Z+5
 713 0020 0295      		swap r16
 714 0022 0F70      		andi r16,lo8(15)
 715               	.LVL105:
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 716               		.loc 1 136 0
 717 0024 1281      		ldd r17,Z+2
 718 0026 1111      		cpse r17,__zero_reg__
 138:./tmk_core/common/action.c ****     }
 719               		.loc 1 138 0
 720 0028 0E94 0000 		call clear_weak_mods
 721               	.LVL106:
 722               	.L67:
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 723               		.loc 1 143 0
 724 002c 0E94 0000 		call is_oneshot_layer_active
 725               	.LVL107:
 726 0030 8823      		tst r24
 727 0032 01F0      		breq .L144
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 728               		.loc 1 143 0 is_stmt 0 discriminator 1
 729 0034 1123      		tst r17
 730 0036 01F0      		breq .L144
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 731               		.loc 1 143 0 discriminator 2
 732 0038 80E2      		ldi r24,lo8(32)
 733 003a 8D0F      		add r24,r29
 734 003c 8830      		cpi r24,lo8(8)
 735 003e 00F0      		brlo .L144
 144:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 736               		.loc 1 144 0 is_stmt 1
 737 0040 82E0      		ldi r24,lo8(2)
 738 0042 0E94 0000 		call clear_oneshot_layer_state
 739               	.LVL108:
 145:./tmk_core/common/action.c ****     }
 740               		.loc 1 145 0
 741 0046 0E94 0000 		call is_oneshot_layer_active
 742               	.LVL109:
 743 004a 91E0      		ldi r25,lo8(1)
 744 004c D82E      		mov r13,r24
 745 004e D926      		eor r13,r25
 746               	.LVL110:
 747 0050 00C0      		rjmp .L68
 748               	.LVL111:
 749               	.L144:
 123:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 750               		.loc 1 123 0
 751 0052 D12C      		mov r13,__zero_reg__
 752               	.LVL112:
 753               	.L68:
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 754               		.loc 1 149 0
 755 0054 EC2F      		mov r30,r28
 756 0056 E295      		swap r30
 757 0058 EF70      		andi r30,lo8(15)
 758 005a 8E2F      		mov r24,r30
 759 005c 90E0      		ldi r25,0
 760 005e FC01      		movw r30,r24
 761 0060 E050      		subi r30,lo8(-(gs(.L71)))
 762 0062 F040      		sbci r31,hi8(-(gs(.L71)))
 763 0064 0C94 0000 		jmp __tablejump2__
 764               		.section	.progmem.gcc_sw_table.process_action,"a",@progbits
 765               		.p2align	1
 766               	.L71:
 767 0000 0000      		.word gs(.L70)
 768 0002 0000      		.word gs(.L70)
 769 0004 0000      		.word gs(.L72)
 770 0006 0000      		.word gs(.L72)
 771 0008 0000      		.word gs(.L73)
 772 000a 0000      		.word gs(.L74)
 773 000c 0000      		.word gs(.L69)
 774 000e 0000      		.word gs(.L69)
 775 0010 0000      		.word gs(.L75)
 776 0012 0000      		.word gs(.L69)
 777 0014 0000      		.word gs(.L76)
 778 0016 0000      		.word gs(.L76)
 779 0018 0000      		.word gs(.L77)
 780 001a 0000      		.word gs(.L69)
 781 001c 0000      		.word gs(.L69)
 782 001e 0000      		.word gs(.L78)
 783               		.section	.text.process_action
 784               	.L70:
 785               	.LBB2:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 786               		.loc 1 154 0
 787 0068 8C2F      		mov r24,r28
 788 006a 807F      		andi r24,lo8(-16)
 789 006c CF70      		andi r28,lo8(15)
 790               	.LVL113:
 791 006e 8823      		tst r24
 792 0070 01F0      		breq .L80
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 793               		.loc 1 154 0 is_stmt 0 discriminator 2
 794 0072 C295      		swap r28
 795 0074 C07F      		andi r28,lo8(-16)
 796               	.L80:
 797               	.LVL114:
 156:./tmk_core/common/action.c ****                     if (mods) {
 798               		.loc 1 156 0 is_stmt 1 discriminator 4
 799 0076 1123      		tst r17
 800 0078 01F0      		breq .L81
 157:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 801               		.loc 1 157 0
 802 007a CC23      		tst r28
 803 007c 01F4      		brne .+2
 804 007e 00C0      		rjmp .L174
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 805               		.loc 1 158 0
 806 0080 80E2      		ldi r24,lo8(32)
 807 0082 8D0F      		add r24,r29
 808 0084 8830      		cpi r24,lo8(8)
 809 0086 00F0      		brlo .L83
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 810               		.loc 1 158 0 is_stmt 0 discriminator 1
 811 0088 D111      		cpse r29,__zero_reg__
 812 008a 00C0      		rjmp .L84
 813               	.L83:
 162:./tmk_core/common/action.c ****                         } else {
 814               		.loc 1 162 0 is_stmt 1
 815 008c 8C2F      		mov r24,r28
 816 008e 0E94 0000 		call add_mods
 817               	.LVL115:
 818 0092 00C0      		rjmp .L85
 819               	.L84:
 164:./tmk_core/common/action.c ****                         }
 820               		.loc 1 164 0
 821 0094 8C2F      		mov r24,r28
 822 0096 0E94 0000 		call add_weak_mods
 823               	.LVL116:
 824               	.L85:
 166:./tmk_core/common/action.c ****                     }
 825               		.loc 1 166 0
 826 009a 0E94 0000 		call send_keyboard_report
 827               	.LVL117:
 828 009e 00C0      		rjmp .L174
 829               	.L81:
 170:./tmk_core/common/action.c ****                     if (mods) {
 830               		.loc 1 170 0
 831 00a0 8D2F      		mov r24,r29
 832 00a2 0E94 0000 		call unregister_code
 833               	.LVL118:
 171:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 834               		.loc 1 171 0
 835 00a6 CC23      		tst r28
 836 00a8 01F4      		brne .+2
 837 00aa 00C0      		rjmp .L69
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 838               		.loc 1 172 0
 839 00ac 80E2      		ldi r24,lo8(32)
 840 00ae 8D0F      		add r24,r29
 841 00b0 8830      		cpi r24,lo8(8)
 842 00b2 00F0      		brlo .L87
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 843               		.loc 1 172 0 is_stmt 0 discriminator 1
 844 00b4 D111      		cpse r29,__zero_reg__
 845 00b6 00C0      		rjmp .L88
 846               	.L87:
 173:./tmk_core/common/action.c ****                         } else {
 847               		.loc 1 173 0 is_stmt 1
 848 00b8 8C2F      		mov r24,r28
 849 00ba 0E94 0000 		call del_mods
 850               	.LVL119:
 851 00be 00C0      		rjmp .L89
 852               	.L88:
 175:./tmk_core/common/action.c ****                         }
 853               		.loc 1 175 0
 854 00c0 8C2F      		mov r24,r28
 855 00c2 0E94 0000 		call del_weak_mods
 856               	.LVL120:
 857               	.L89:
 177:./tmk_core/common/action.c ****                     }
 858               		.loc 1 177 0
 859 00c6 0E94 0000 		call send_keyboard_report
 860               	.LVL121:
 861 00ca 00C0      		rjmp .L69
 862               	.LVL122:
 863               	.L72:
 864               	.LBE2:
 865               	.LBB3:
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 866               		.loc 1 186 0
 867 00cc 8C2F      		mov r24,r28
 868 00ce 807F      		andi r24,lo8(-16)
 869 00d0 CF70      		andi r28,lo8(15)
 870               	.LVL123:
 871 00d2 8032      		cpi r24,lo8(32)
 872 00d4 01F0      		breq .L91
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 873               		.loc 1 186 0 is_stmt 0 discriminator 2
 874 00d6 C295      		swap r28
 875 00d8 C07F      		andi r28,lo8(-16)
 876               	.L91:
 877               	.LVL124:
 188:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 878               		.loc 1 188 0 is_stmt 1 discriminator 4
 879 00da DD23      		tst r29
 880 00dc 01F0      		breq .L93
 881 00de D130      		cpi r29,lo8(1)
 882 00e0 01F0      		breq .L94
 883 00e2 00C0      		rjmp .L180
 884               	.L93:
 192:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 885               		.loc 1 192 0
 886 00e4 1123      		tst r17
 887 00e6 01F0      		breq .L95
 193:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 888               		.loc 1 193 0
 889 00e8 0023      		tst r16
 890 00ea 01F0      		breq .L175
 198:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 891               		.loc 1 198 0
 892 00ec 8C2F      		mov r24,r28
 196:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 893               		.loc 1 196 0
 894 00ee 0130      		cpi r16,lo8(1)
 895 00f0 01F4      		brne .L171
 896               	.LVL125:
 198:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 897               		.loc 1 198 0
 898 00f2 0E94 0000 		call set_oneshot_mods
 899               	.LVL126:
 900 00f6 00C0      		rjmp .L69
 901               	.L95:
 210:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 902               		.loc 1 210 0
 903 00f8 0023      		tst r16
 904 00fa 01F0      		breq .L179
 213:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 905               		.loc 1 213 0
 906 00fc 0130      		cpi r16,lo8(1)
 907 00fe 01F4      		brne .+2
 908 0100 00C0      		rjmp .L69
 909               	.L179:
 225:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 910               		.loc 1 225 0
 911 0102 0E94 0000 		call clear_oneshot_mods
 912               	.LVL127:
 913 0106 00C0      		rjmp .L104
 914               	.L94:
 232:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 915               		.loc 1 232 0
 916 0108 1123      		tst r17
 917 010a 01F0      		breq .L100
 233:./tmk_core/common/action.c ****                                 register_mods(mods);
 918               		.loc 1 233 0
 919 010c 0630      		cpi r16,lo8(6)
 920 010e 00F0      		brlo .+2
 921 0110 00C0      		rjmp .L69
 922 0112 00C0      		rjmp .L175
 923               	.L100:
 237:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 924               		.loc 1 237 0
 925 0114 0530      		cpi r16,lo8(5)
 926 0116 00F0      		brlo .+2
 927 0118 00C0      		rjmp .L69
 928 011a 00C0      		rjmp .L104
 929               	.L180:
 243:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 930               		.loc 1 243 0
 931 011c 1123      		tst r17
 932 011e 01F0      		breq .L101
 244:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 933               		.loc 1 244 0
 934 0120 0023      		tst r16
 935 0122 01F0      		breq .L175
 246:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 936               		.loc 1 246 0
 937 0124 F701      		movw r30,r14
 938 0126 8581      		ldd r24,Z+5
 939 0128 80FF      		sbrs r24,0
 940 012a 00C0      		rjmp .L174
 249:./tmk_core/common/action.c ****                                     register_mods(mods);
 941               		.loc 1 249 0
 942 012c 8F70      		andi r24,lo8(15)
 943 012e 8583      		std Z+5,r24
 944               	.L175:
 250:./tmk_core/common/action.c ****                                 } else
 945               		.loc 1 250 0
 946 0130 8C2F      		mov r24,r28
 947               	.LVL128:
 948               	.L171:
 949 0132 0E94 0000 		call register_mods
 950               	.LVL129:
 951 0136 00C0      		rjmp .L69
 952               	.LVL130:
 953               	.L101:
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 954               		.loc 1 262 0
 955 0138 0111      		cpse r16,__zero_reg__
 956 013a 00C0      		rjmp .L172
 957               	.L104:
 267:./tmk_core/common/action.c ****                             }
 958               		.loc 1 267 0
 959 013c 8C2F      		mov r24,r28
 960 013e 00C0      		rjmp .L173
 961               	.LVL131:
 962               	.L73:
 963               	.LBE3:
 278:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 964               		.loc 1 278 0
 965 0140 8C2F      		mov r24,r28
 966 0142 8695      		lsr r24
 967 0144 8695      		lsr r24
 968 0146 8370      		andi r24,lo8(3)
 969 0148 01F0      		breq .L105
 970 014a 8130      		cpi r24,lo8(1)
 971 014c 01F0      		breq .L106
 972 014e 00C0      		rjmp .L69
 973               	.L105:
 280:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 974               		.loc 1 280 0
 975 0150 1123      		tst r17
 976 0152 01F0      		breq .L107
 281:./tmk_core/common/action.c ****                     } else {
 977               		.loc 1 281 0
 978 0154 8D2F      		mov r24,r29
 979 0156 9C2F      		mov r25,r28
 980 0158 9370      		andi r25,lo8(3)
 981 015a 00C0      		rjmp .L169
 982               	.L107:
 283:./tmk_core/common/action.c ****                     }
 983               		.loc 1 283 0
 984 015c 80E0      		ldi r24,0
 985 015e 90E0      		ldi r25,0
 986               	.L169:
 987 0160 0E94 0000 		call host_system_send
 988               	.LVL132:
 989 0164 00C0      		rjmp .L69
 990               	.L106:
 287:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 991               		.loc 1 287 0
 992 0166 1123      		tst r17
 993 0168 01F0      		breq .L108
 288:./tmk_core/common/action.c ****                     } else {
 994               		.loc 1 288 0
 995 016a 8D2F      		mov r24,r29
 996 016c 9C2F      		mov r25,r28
 997 016e 9370      		andi r25,lo8(3)
 998 0170 00C0      		rjmp .L176
 999               	.L108:
 290:./tmk_core/common/action.c ****                     }
 1000               		.loc 1 290 0
 1001 0172 80E0      		ldi r24,0
 1002 0174 90E0      		ldi r25,0
 1003               	.L176:
 1004 0176 0E94 0000 		call host_consumer_send
 1005               	.LVL133:
 1006 017a 00C0      		rjmp .L69
 1007               	.L74:
 300:./tmk_core/common/action.c ****                 mousekey_send();
 1008               		.loc 1 300 0
 1009 017c 8D2F      		mov r24,r29
 299:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1010               		.loc 1 299 0
 1011 017e 1123      		tst r17
 1012 0180 01F0      		breq .L109
 300:./tmk_core/common/action.c ****                 mousekey_send();
 1013               		.loc 1 300 0
 1014 0182 0E94 0000 		call mousekey_on
 1015               	.LVL134:
 1016 0186 00C0      		rjmp .L170
 1017               	.L109:
 303:./tmk_core/common/action.c ****                 mousekey_send();
 1018               		.loc 1 303 0
 1019 0188 0E94 0000 		call mousekey_off
 1020               	.LVL135:
 1021               	.L170:
 304:./tmk_core/common/action.c ****             }
 1022               		.loc 1 304 0
 1023 018c 0E94 0000 		call mousekey_send
 1024               	.LVL136:
 1025 0190 00C0      		rjmp .L69
 1026               	.L75:
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1027               		.loc 1 310 0
 1028 0192 8C2F      		mov r24,r28
 1029 0194 8370      		andi r24,lo8(3)
 1030 0196 01F0      		breq .+2
 1031 0198 00C0      		rjmp .L110
 312:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1032               		.loc 1 312 0
 1033 019a 1111      		cpse r17,__zero_reg__
 1034 019c 00C0      		rjmp .L69
 1035               	.LVL137:
 1036               	.LBB4:
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1037               		.loc 1 313 0
 1038 019e 2D2F      		mov r18,r29
 1039 01a0 2295      		swap r18
 1040 01a2 2695      		lsr r18
 1041 01a4 2770      		andi r18,lo8(7)
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1042               		.loc 1 314 0
 1043 01a6 220F      		lsl r18
 1044 01a8 220F      		lsl r18
 1045 01aa 6D2F      		mov r22,r29
 1046 01ac 6F70      		andi r22,lo8(15)
 1047 01ae 862F      		mov r24,r22
 1048 01b0 90E0      		ldi r25,0
 1049 01b2 A0E0      		ldi r26,0
 1050 01b4 B0E0      		ldi r27,0
 1051 01b6 4C01      		movw r8,r24
 1052 01b8 5D01      		movw r10,r26
 1053 01ba 022E      		mov r0,r18
 1054 01bc 00C0      		rjmp 2f
 1055               		1:
 1056 01be 880C      		lsl r8
 1057 01c0 991C      		rol r9
 1058 01c2 AA1C      		rol r10
 1059 01c4 BB1C      		rol r11
 1060               		2:
 1061 01c6 0A94      		dec r0
 1062 01c8 02F4      		brpl 1b
 1063               	.LVL138:
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1064               		.loc 1 315 0
 1065 01ca D4FF      		sbrs r29,4
 1066 01cc 00C0      		rjmp .L145
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1067               		.loc 1 315 0 is_stmt 0 discriminator 1
 1068 01ce 8FE0      		ldi r24,lo8(15)
 1069 01d0 90E0      		ldi r25,0
 1070 01d2 A0E0      		ldi r26,0
 1071 01d4 B0E0      		ldi r27,0
 1072 01d6 00C0      		rjmp 2f
 1073               		1:
 1074 01d8 880F      		lsl r24
 1075 01da 991F      		rol r25
 1076 01dc AA1F      		rol r26
 1077 01de BB1F      		rol r27
 1078               		2:
 1079 01e0 2A95      		dec r18
 1080 01e2 02F4      		brpl 1b
 1081 01e4 BC01      		movw r22,r24
 1082 01e6 CD01      		movw r24,r26
 1083 01e8 6095      		com r22
 1084 01ea 7095      		com r23
 1085 01ec 8095      		com r24
 1086 01ee 9095      		com r25
 1087 01f0 00C0      		rjmp .L111
 1088               	.L145:
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1089               		.loc 1 315 0
 1090 01f2 60E0      		ldi r22,0
 1091 01f4 70E0      		ldi r23,0
 1092 01f6 CB01      		movw r24,r22
 1093               	.L111:
 1094               	.LVL139:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1095               		.loc 1 316 0 is_stmt 1 discriminator 4
 1096 01f8 C695      		lsr r28
 1097 01fa C695      		lsr r28
 1098               	.LVL140:
 1099 01fc C370      		andi r28,lo8(3)
 1100 01fe C230      		cpi r28,lo8(2)
 1101 0200 01F0      		breq .L113
 1102 0202 00F4      		brsh .L114
 1103 0204 6829      		or r22,r8
 1104 0206 7929      		or r23,r9
 1105 0208 8A29      		or r24,r10
 1106 020a 9B29      		or r25,r11
 1107               	.LVL141:
 1108 020c C130      		cpi r28,lo8(1)
 1109 020e 01F0      		breq .L178
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1110               		.loc 1 317 0 discriminator 4
 1111 0210 0E94 0000 		call default_layer_and
 1112               	.LVL142:
 1113 0214 00C0      		rjmp .L69
 1114               	.LVL143:
 1115               	.L113:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1116               		.loc 1 319 0
 1117 0216 6829      		or r22,r8
 1118 0218 7929      		or r23,r9
 1119 021a 8A29      		or r24,r10
 1120 021c 9B29      		or r25,r11
 1121               	.LVL144:
 1122 021e 0E94 0000 		call default_layer_xor
 1123               	.LVL145:
 1124 0222 00C0      		rjmp .L69
 1125               	.LVL146:
 1126               	.L114:
 320:./tmk_core/common/action.c ****                     }
 1127               		.loc 1 320 0
 1128 0224 0E94 0000 		call default_layer_and
 1129               	.LVL147:
 1130 0228 C501      		movw r24,r10
 1131 022a B401      		movw r22,r8
 1132               	.L178:
 1133 022c 0E94 0000 		call default_layer_or
 1134               	.LVL148:
 1135 0230 00C0      		rjmp .L69
 1136               	.LVL149:
 1137               	.L110:
 1138               	.LBE4:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1139               		.loc 1 325 0
 1140 0232 1123      		tst r17
 1141 0234 01F0      		breq .L116
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1142               		.loc 1 325 0 is_stmt 0 discriminator 1
 1143 0236 8C2F      		mov r24,r28
 1144 0238 8170      		andi r24,lo8(1)
 1145 023a 00C0      		rjmp .L117
 1146               	.L116:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1147               		.loc 1 325 0 discriminator 2
 1148 023c 8695      		lsr r24
 1149               	.L117:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1150               		.loc 1 325 0 discriminator 4
 1151 023e 8823      		tst r24
 1152 0240 01F4      		brne .+2
 1153 0242 00C0      		rjmp .L69
 1154               	.LVL150:
 1155               	.LBB5:
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1156               		.loc 1 327 0 is_stmt 1
 1157 0244 2D2F      		mov r18,r29
 1158 0246 2295      		swap r18
 1159 0248 2695      		lsr r18
 1160 024a 2770      		andi r18,lo8(7)
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1161               		.loc 1 328 0
 1162 024c 220F      		lsl r18
 1163 024e 220F      		lsl r18
 1164 0250 6D2F      		mov r22,r29
 1165 0252 6F70      		andi r22,lo8(15)
 1166 0254 862F      		mov r24,r22
 1167 0256 90E0      		ldi r25,0
 1168 0258 A0E0      		ldi r26,0
 1169 025a B0E0      		ldi r27,0
 1170 025c 4C01      		movw r8,r24
 1171 025e 5D01      		movw r10,r26
 1172 0260 022E      		mov r0,r18
 1173 0262 00C0      		rjmp 2f
 1174               		1:
 1175 0264 880C      		lsl r8
 1176 0266 991C      		rol r9
 1177 0268 AA1C      		rol r10
 1178 026a BB1C      		rol r11
 1179               		2:
 1180 026c 0A94      		dec r0
 1181 026e 02F4      		brpl 1b
 1182               	.LVL151:
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1183               		.loc 1 329 0
 1184 0270 D4FF      		sbrs r29,4
 1185 0272 00C0      		rjmp .L146
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1186               		.loc 1 329 0 is_stmt 0 discriminator 1
 1187 0274 8FE0      		ldi r24,lo8(15)
 1188 0276 90E0      		ldi r25,0
 1189 0278 A0E0      		ldi r26,0
 1190 027a B0E0      		ldi r27,0
 1191 027c 00C0      		rjmp 2f
 1192               		1:
 1193 027e 880F      		lsl r24
 1194 0280 991F      		rol r25
 1195 0282 AA1F      		rol r26
 1196 0284 BB1F      		rol r27
 1197               		2:
 1198 0286 2A95      		dec r18
 1199 0288 02F4      		brpl 1b
 1200 028a BC01      		movw r22,r24
 1201 028c CD01      		movw r24,r26
 1202 028e 6095      		com r22
 1203 0290 7095      		com r23
 1204 0292 8095      		com r24
 1205 0294 9095      		com r25
 1206 0296 00C0      		rjmp .L118
 1207               	.L146:
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1208               		.loc 1 329 0
 1209 0298 60E0      		ldi r22,0
 1210 029a 70E0      		ldi r23,0
 1211 029c CB01      		movw r24,r22
 1212               	.L118:
 1213               	.LVL152:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1214               		.loc 1 330 0 is_stmt 1 discriminator 4
 1215 029e C695      		lsr r28
 1216 02a0 C695      		lsr r28
 1217               	.LVL153:
 1218 02a2 C370      		andi r28,lo8(3)
 1219 02a4 C230      		cpi r28,lo8(2)
 1220 02a6 01F0      		breq .L120
 1221 02a8 00F4      		brsh .L121
 1222 02aa 6829      		or r22,r8
 1223 02ac 7929      		or r23,r9
 1224 02ae 8A29      		or r24,r10
 1225 02b0 9B29      		or r25,r11
 1226               	.LVL154:
 1227 02b2 C130      		cpi r28,lo8(1)
 1228 02b4 01F0      		breq .L177
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1229               		.loc 1 331 0 discriminator 4
 1230 02b6 0E94 0000 		call layer_and
 1231               	.LVL155:
 1232 02ba 00C0      		rjmp .L69
 1233               	.LVL156:
 1234               	.L120:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1235               		.loc 1 333 0
 1236 02bc 6829      		or r22,r8
 1237 02be 7929      		or r23,r9
 1238 02c0 8A29      		or r24,r10
 1239 02c2 9B29      		or r25,r11
 1240               	.LVL157:
 1241 02c4 0E94 0000 		call layer_xor
 1242               	.LVL158:
 1243 02c8 00C0      		rjmp .L69
 1244               	.LVL159:
 1245               	.L121:
 334:./tmk_core/common/action.c ****                     }
 1246               		.loc 1 334 0
 1247 02ca 0E94 0000 		call layer_and
 1248               	.LVL160:
 1249 02ce C501      		movw r24,r10
 1250 02d0 B401      		movw r22,r8
 1251               	.L177:
 1252 02d2 0E94 0000 		call layer_or
 1253               	.LVL161:
 1254 02d6 00C0      		rjmp .L69
 1255               	.LVL162:
 1256               	.L76:
 1257               	.LBE5:
 342:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 1258               		.loc 1 342 0
 1259 02d8 8D2F      		mov r24,r29
 1260 02da 90E0      		ldi r25,0
 1261 02dc FC01      		movw r30,r24
 1262 02de E05E      		subi r30,-32
 1263 02e0 F109      		sbc r31,__zero_reg__
 1264 02e2 E531      		cpi r30,21
 1265 02e4 F105      		cpc r31,__zero_reg__
 1266 02e6 00F0      		brlo .+2
 1267 02e8 00C0      		rjmp .L123
 1268 02ea E050      		subi r30,lo8(-(gs(.L125)))
 1269 02ec F040      		sbci r31,hi8(-(gs(.L125)))
 1270 02ee 0C94 0000 		jmp __tablejump2__
 1271               		.section	.progmem.gcc_sw_table.process_action
 1272               		.p2align	1
 1273               	.L125:
 1274 0020 0000      		.word gs(.L124)
 1275 0022 0000      		.word gs(.L124)
 1276 0024 0000      		.word gs(.L124)
 1277 0026 0000      		.word gs(.L124)
 1278 0028 0000      		.word gs(.L124)
 1279 002a 0000      		.word gs(.L124)
 1280 002c 0000      		.word gs(.L124)
 1281 002e 0000      		.word gs(.L124)
 1282 0030 0000      		.word gs(.L124)
 1283 0032 0000      		.word gs(.L124)
 1284 0034 0000      		.word gs(.L124)
 1285 0036 0000      		.word gs(.L124)
 1286 0038 0000      		.word gs(.L124)
 1287 003a 0000      		.word gs(.L124)
 1288 003c 0000      		.word gs(.L124)
 1289 003e 0000      		.word gs(.L124)
 1290 0040 0000      		.word gs(.L126)
 1291 0042 0000      		.word gs(.L127)
 1292 0044 0000      		.word gs(.L128)
 1293 0046 0000      		.word gs(.L129)
 1294 0048 0000      		.word gs(.L130)
 1295               		.section	.text.process_action
 1296               	.L124:
 1297 02f2 DF70      		andi r29,lo8(15)
 1298               	.LVL163:
 1299 02f4 8C2F      		mov r24,r28
 1300 02f6 8F71      		andi r24,lo8(31)
 345:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1301               		.loc 1 345 0
 1302 02f8 1123      		tst r17
 1303 02fa 01F0      		breq .L131
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1304               		.loc 1 346 0
 1305 02fc 0E94 0000 		call layer_on
 1306               	.LVL164:
 347:./tmk_core/common/action.c ****                     } else {
 1307               		.loc 1 347 0
 1308 0300 8D2F      		mov r24,r29
 1309 0302 00C0      		rjmp .L171
 1310               	.L131:
 349:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1311               		.loc 1 349 0
 1312 0304 0E94 0000 		call layer_off
 1313               	.LVL165:
 350:./tmk_core/common/action.c ****                     }
 1314               		.loc 1 350 0
 1315 0308 8D2F      		mov r24,r29
 1316               	.LVL166:
 1317               	.L173:
 1318 030a 0E94 0000 		call unregister_mods
 1319               	.LVL167:
 1320 030e 00C0      		rjmp .L69
 1321               	.L126:
 355:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1322               		.loc 1 355 0
 1323 0310 1123      		tst r17
 1324 0312 01F0      		breq .L132
 356:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1325               		.loc 1 356 0
 1326 0314 0530      		cpi r16,lo8(5)
 1327 0316 00F0      		brlo .+2
 1328 0318 00C0      		rjmp .L69
 1329               	.L133:
 357:./tmk_core/common/action.c ****                         }
 1330               		.loc 1 357 0
 1331 031a 8C2F      		mov r24,r28
 1332 031c 8F71      		andi r24,lo8(31)
 1333 031e 0E94 0000 		call layer_invert
 1334               	.LVL168:
 1335 0322 00C0      		rjmp .L69
 1336               	.L132:
 360:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1337               		.loc 1 360 0
 1338 0324 0630      		cpi r16,lo8(6)
 1339 0326 00F0      		brlo .+2
 1340 0328 00C0      		rjmp .L69
 1341 032a 00C0      		rjmp .L133
 1342               	.L127:
 366:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1343               		.loc 1 366 0
 1344 032c 1123      		tst r17
 1345 032e 01F0      		breq .L134
 1346               	.L135:
 366:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1347               		.loc 1 366 0 is_stmt 0 discriminator 1
 1348 0330 8C2F      		mov r24,r28
 1349 0332 8F71      		andi r24,lo8(31)
 1350 0334 0E94 0000 		call layer_on
 1351               	.LVL169:
 1352 0338 00C0      		rjmp .L69
 1353               	.L128:
 370:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1354               		.loc 1 370 0 is_stmt 1
 1355 033a 1123      		tst r17
 1356 033c 01F0      		breq .L135
 1357               	.L134:
 367:./tmk_core/common/action.c ****                     break;
 1358               		.loc 1 367 0
 1359 033e 8C2F      		mov r24,r28
 1360 0340 8F71      		andi r24,lo8(31)
 1361 0342 0E94 0000 		call layer_off
 1362               	.LVL170:
 1363 0346 00C0      		rjmp .L69
 1364               	.L129:
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1365               		.loc 1 374 0
 1366 0348 1123      		tst r17
 1367 034a 01F0      		breq .L136
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1368               		.loc 1 374 0 is_stmt 0 discriminator 1
 1369 034c 8C2F      		mov r24,r28
 1370 034e 8F71      		andi r24,lo8(31)
 1371 0350 0E94 0000 		call layer_move
 1372               	.LVL171:
 1373 0354 00C0      		rjmp .L69
 1374               	.L136:
 375:./tmk_core/common/action.c ****                     break;
 1375               		.loc 1 375 0 is_stmt 1
 1376 0356 0E94 0000 		call layer_clear
 1377               	.LVL172:
 1378 035a 00C0      		rjmp .L69
 1379               	.L130:
 403:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1380               		.loc 1 403 0
 1381 035c 1123      		tst r17
 1382 035e 01F0      		breq .L137
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1383               		.loc 1 404 0
 1384 0360 CF71      		andi r28,lo8(31)
 1385               	.LVL173:
 1386 0362 8C2F      		mov r24,r28
 1387 0364 0E94 0000 		call layer_on
 1388               	.LVL174:
 405:./tmk_core/common/action.c ****                     } else {
 1389               		.loc 1 405 0
 1390 0368 63E0      		ldi r22,lo8(3)
 1391 036a 8C2F      		mov r24,r28
 1392 036c 0E94 0000 		call set_oneshot_layer
 1393               	.LVL175:
 1394 0370 00C0      		rjmp .L69
 1395               	.LVL176:
 1396               	.L137:
 407:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 1397               		.loc 1 407 0
 1398 0372 81E0      		ldi r24,lo8(1)
 1399 0374 0E94 0000 		call clear_oneshot_layer_state
 1400               	.LVL177:
 408:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1401               		.loc 1 408 0
 1402 0378 0230      		cpi r16,lo8(2)
 1403 037a 00F0      		brlo .L69
 409:./tmk_core/common/action.c ****                         }
 1404               		.loc 1 409 0
 1405 037c 82E0      		ldi r24,lo8(2)
 1406 037e 0E94 0000 		call clear_oneshot_layer_state
 1407               	.LVL178:
 1408 0382 00C0      		rjmp .L69
 1409               	.L123:
 417:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 1410               		.loc 1 417 0
 1411 0384 1123      		tst r17
 1412 0386 01F0      		breq .L138
 418:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1413               		.loc 1 418 0
 1414 0388 0023      		tst r16
 1415 038a 01F0      		breq .L135
 1416               	.L174:
 420:./tmk_core/common/action.c ****                         } else {
 1417               		.loc 1 420 0
 1418 038c 8D2F      		mov r24,r29
 1419 038e 0E94 0000 		call register_code
 1420               	.LVL179:
 1421 0392 00C0      		rjmp .L69
 1422               	.L138:
 426:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1423               		.loc 1 426 0
 1424 0394 0023      		tst r16
 1425 0396 01F0      		breq .L134
 1426               	.L172:
 428:./tmk_core/common/action.c ****                         } else {
 1427               		.loc 1 428 0
 1428 0398 8D2F      		mov r24,r29
 1429 039a 0E94 0000 		call unregister_code
 1430               	.LVL180:
 1431 039e 00C0      		rjmp .L69
 1432               	.L77:
 442:./tmk_core/common/action.c ****             break;
 1433               		.loc 1 442 0
 1434 03a0 4C2F      		mov r20,r28
 1435 03a2 4F70      		andi r20,lo8(15)
 1436 03a4 6D2F      		mov r22,r29
 1437 03a6 C701      		movw r24,r14
 1438 03a8 0E94 0000 		call action_get_macro
 1439               	.LVL181:
 1440 03ac 0E94 0000 		call action_macro_play
 1441               	.LVL182:
 443:./tmk_core/common/action.c **** #endif
 1442               		.loc 1 443 0
 1443 03b0 00C0      		rjmp .L69
 1444               	.L78:
 520:./tmk_core/common/action.c ****             break;
 1445               		.loc 1 520 0
 1446 03b2 4C2F      		mov r20,r28
 1447 03b4 4F70      		andi r20,lo8(15)
 1448 03b6 6D2F      		mov r22,r29
 1449 03b8 C701      		movw r24,r14
 1450 03ba 0E94 0000 		call action_function
 1451               	.LVL183:
 1452               	.L69:
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 1453               		.loc 1 531 0
 1454 03be DD20      		tst r13
 1455 03c0 01F0      		breq .L66
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 1456               		.loc 1 531 0 is_stmt 0 discriminator 1
 1457 03c2 0E94 0000 		call get_oneshot_layer_state
 1458               	.LVL184:
 1459 03c6 80FD      		sbrc r24,0
 1460 03c8 00C0      		rjmp .L66
 532:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1461               		.loc 1 532 0 is_stmt 1
 1462 03ca F701      		movw r30,r14
 1463 03cc 1282      		std Z+2,__zero_reg__
 533:./tmk_core/common/action.c ****         process_record(record);
 1464               		.loc 1 533 0
 1465 03ce 0E94 0000 		call get_oneshot_layer
 1466               	.LVL185:
 1467 03d2 0E94 0000 		call layer_on
 1468               	.LVL186:
 534:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 1469               		.loc 1 534 0
 1470 03d6 C701      		movw r24,r14
 1471 03d8 0E94 0000 		call process_record
 1472               	.LVL187:
 535:./tmk_core/common/action.c ****     }
 1473               		.loc 1 535 0
 1474 03dc 0E94 0000 		call get_oneshot_layer
 1475               	.LVL188:
 1476               	/* epilogue start */
 538:./tmk_core/common/action.c **** 
 1477               		.loc 1 538 0
 1478 03e0 DF91      		pop r29
 1479               	.LVL189:
 1480 03e2 CF91      		pop r28
 1481 03e4 1F91      		pop r17
 1482               	.LVL190:
 1483 03e6 0F91      		pop r16
 1484               	.LVL191:
 1485 03e8 FF90      		pop r15
 1486 03ea EF90      		pop r14
 1487               	.LVL192:
 1488 03ec DF90      		pop r13
 1489               	.LVL193:
 1490 03ee BF90      		pop r11
 1491 03f0 AF90      		pop r10
 1492 03f2 9F90      		pop r9
 1493 03f4 8F90      		pop r8
 535:./tmk_core/common/action.c ****     }
 1494               		.loc 1 535 0
 1495 03f6 0C94 0000 		jmp layer_off
 1496               	.LVL194:
 1497               	.L66:
 1498               	/* epilogue start */
 538:./tmk_core/common/action.c **** 
 1499               		.loc 1 538 0
 1500 03fa DF91      		pop r29
 1501               	.LVL195:
 1502 03fc CF91      		pop r28
 1503 03fe 1F91      		pop r17
 1504               	.LVL196:
 1505 0400 0F91      		pop r16
 1506               	.LVL197:
 1507 0402 FF90      		pop r15
 1508 0404 EF90      		pop r14
 1509               	.LVL198:
 1510 0406 DF90      		pop r13
 1511               	.LVL199:
 1512 0408 BF90      		pop r11
 1513 040a AF90      		pop r10
 1514 040c 9F90      		pop r9
 1515 040e 8F90      		pop r8
 1516 0410 0895      		ret
 1517               		.cfi_endproc
 1518               	.LFE107:
 1520               		.section	.text.process_record,"ax",@progbits
 1521               	.global	process_record
 1523               	process_record:
 1524               	.LFB106:
 104:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1525               		.loc 1 104 0
 1526               		.cfi_startproc
 1527               	.LVL200:
 1528 0000 0F93      		push r16
 1529               	.LCFI15:
 1530               		.cfi_def_cfa_offset 3
 1531               		.cfi_offset 16, -2
 1532 0002 1F93      		push r17
 1533               	.LCFI16:
 1534               		.cfi_def_cfa_offset 4
 1535               		.cfi_offset 17, -3
 1536 0004 CF93      		push r28
 1537               	.LCFI17:
 1538               		.cfi_def_cfa_offset 5
 1539               		.cfi_offset 28, -4
 1540 0006 DF93      		push r29
 1541               	.LCFI18:
 1542               		.cfi_def_cfa_offset 6
 1543               		.cfi_offset 29, -5
 1544               	/* prologue: function */
 1545               	/* frame size = 0 */
 1546               	/* stack size = 4 */
 1547               	.L__stack_usage = 4
 1548 0008 EC01      		movw r28,r24
 1549 000a 9881      		ld r25,Y
 1550 000c 8981      		ldd r24,Y+1
 1551               	.LVL201:
 1552               	.LBB8:
 1553               	.LBB9:
 1554               		.file 2 "./tmk_core/common/keyboard.h"
   1:./tmk_core/common/keyboard.h **** /*
   2:./tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.h **** 
   4:./tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.h **** (at your option) any later version.
   8:./tmk_core/common/keyboard.h **** 
   9:./tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.h **** 
  14:./tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.h **** */
  17:./tmk_core/common/keyboard.h **** 
  18:./tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:./tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:./tmk_core/common/keyboard.h **** 
  21:./tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:./tmk_core/common/keyboard.h **** #include <stdint.h>
  23:./tmk_core/common/keyboard.h **** 
  24:./tmk_core/common/keyboard.h **** 
  25:./tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:./tmk_core/common/keyboard.h **** extern "C" {
  27:./tmk_core/common/keyboard.h **** #endif
  28:./tmk_core/common/keyboard.h **** 
  29:./tmk_core/common/keyboard.h **** /* key matrix position */
  30:./tmk_core/common/keyboard.h **** typedef struct {
  31:./tmk_core/common/keyboard.h ****     uint8_t col;
  32:./tmk_core/common/keyboard.h ****     uint8_t row;
  33:./tmk_core/common/keyboard.h **** } keypos_t;
  34:./tmk_core/common/keyboard.h **** 
  35:./tmk_core/common/keyboard.h **** /* key event */
  36:./tmk_core/common/keyboard.h **** typedef struct {
  37:./tmk_core/common/keyboard.h ****     keypos_t key;
  38:./tmk_core/common/keyboard.h ****     bool     pressed;
  39:./tmk_core/common/keyboard.h ****     uint16_t time;
  40:./tmk_core/common/keyboard.h **** } keyevent_t;
  41:./tmk_core/common/keyboard.h **** 
  42:./tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:./tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:./tmk_core/common/keyboard.h **** 
  45:./tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:./tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:./tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:./tmk_core/common/keyboard.h ****  */
  49:./tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 1555               		.loc 2 49 0
 1556 000e 2B81      		ldd r18,Y+3
 1557 0010 3C81      		ldd r19,Y+4
 1558 0012 232B      		or r18,r19
 1559 0014 01F0      		breq .L186
 1560 0016 8F3F      		cpi r24,lo8(-1)
 1561 0018 01F4      		brne .L187
 1562 001a 81E0      		ldi r24,lo8(1)
 1563 001c 9F3F      		cpi r25,lo8(-1)
 1564 001e 01F4      		brne .L187
 1565 0020 00C0      		rjmp .L182
 1566               	.L186:
 1567 0022 81E0      		ldi r24,lo8(1)
 1568 0024 00C0      		rjmp .L182
 1569               	.L187:
 1570 0026 80E0      		ldi r24,0
 1571               	.L182:
 1572               	.LBE9:
 1573               	.LBE8:
 105:./tmk_core/common/action.c **** 
 1574               		.loc 1 105 0
 1575 0028 80FD      		sbrc r24,0
 1576 002a 00C0      		rjmp .L181
 107:./tmk_core/common/action.c ****         return;
 1577               		.loc 1 107 0
 1578 002c CE01      		movw r24,r28
 1579 002e 0E94 0000 		call process_record_quantum
 1580               	.LVL202:
 1581 0032 8823      		tst r24
 1582 0034 01F0      		breq .L181
 110:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 1583               		.loc 1 110 0
 1584 0036 6881      		ld r22,Y
 1585 0038 7981      		ldd r23,Y+1
 1586 003a 8A81      		ldd r24,Y+2
 1587 003c 0E94 0000 		call store_or_get_action
 1588               	.LVL203:
 1589 0040 8C01      		movw r16,r24
 1590               	.LVL204:
 113:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 1591               		.loc 1 113 0
 1592 0042 0E94 0000 		call layer_debug
 1593               	.LVL205:
 114:./tmk_core/common/action.c **** #endif
 1594               		.loc 1 114 0
 1595 0046 0E94 0000 		call default_layer_debug
 1596               	.LVL206:
 118:./tmk_core/common/action.c **** }
 1597               		.loc 1 118 0
 1598 004a B801      		movw r22,r16
 1599 004c CE01      		movw r24,r28
 1600 004e 0E94 0000 		call process_action
 1601               	.LVL207:
 1602               	.L181:
 1603               	/* epilogue start */
 119:./tmk_core/common/action.c **** 
 1604               		.loc 1 119 0
 1605 0052 DF91      		pop r29
 1606 0054 CF91      		pop r28
 1607               	.LVL208:
 1608 0056 1F91      		pop r17
 1609 0058 0F91      		pop r16
 1610               	.LVL209:
 1611 005a 0895      		ret
 1612               		.cfi_endproc
 1613               	.LFE106:
 1615               		.section	.text.process_record_nocache,"ax",@progbits
 1616               	.global	process_record_nocache
 1618               	process_record_nocache:
 1619               	.LFB104:
  86:./tmk_core/common/action.c ****     disable_action_cache = true;
 1620               		.loc 1 86 0
 1621               		.cfi_startproc
 1622               	.LVL210:
 1623               	/* prologue: function */
 1624               	/* frame size = 0 */
 1625               	/* stack size = 0 */
 1626               	.L__stack_usage = 0
  87:./tmk_core/common/action.c ****     process_record(record);
 1627               		.loc 1 87 0
 1628 0000 21E0      		ldi r18,lo8(1)
 1629 0002 2093 0000 		sts disable_action_cache,r18
  88:./tmk_core/common/action.c ****     disable_action_cache = false;
 1630               		.loc 1 88 0
 1631 0006 0E94 0000 		call process_record
 1632               	.LVL211:
  89:./tmk_core/common/action.c **** }
 1633               		.loc 1 89 0
 1634 000a 1092 0000 		sts disable_action_cache,__zero_reg__
 1635 000e 0895      		ret
 1636               		.cfi_endproc
 1637               	.LFE104:
 1639               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1640               	.global	clear_keyboard_but_mods
 1642               	clear_keyboard_but_mods:
 1643               	.LFB113:
 689:./tmk_core/common/action.c ****     }
 690:./tmk_core/common/action.c **** }
 691:./tmk_core/common/action.c **** 
 692:./tmk_core/common/action.c **** void clear_keyboard(void)
 693:./tmk_core/common/action.c **** {
 694:./tmk_core/common/action.c ****     clear_mods();
 695:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 696:./tmk_core/common/action.c **** }
 697:./tmk_core/common/action.c **** 
 698:./tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 699:./tmk_core/common/action.c **** {
 1644               		.loc 1 699 0
 1645               		.cfi_startproc
 1646               	/* prologue: function */
 1647               	/* frame size = 0 */
 1648               	/* stack size = 0 */
 1649               	.L__stack_usage = 0
 700:./tmk_core/common/action.c ****     clear_weak_mods();
 1650               		.loc 1 700 0
 1651 0000 0E94 0000 		call clear_weak_mods
 1652               	.LVL212:
 701:./tmk_core/common/action.c ****     clear_macro_mods();
 1653               		.loc 1 701 0
 1654 0004 0E94 0000 		call clear_macro_mods
 1655               	.LVL213:
 702:./tmk_core/common/action.c ****     clear_keys();
 1656               		.loc 1 702 0
 1657 0008 0E94 0000 		call clear_keys
 1658               	.LVL214:
 703:./tmk_core/common/action.c ****     send_keyboard_report();
 1659               		.loc 1 703 0
 1660 000c 0E94 0000 		call send_keyboard_report
 1661               	.LVL215:
 704:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 705:./tmk_core/common/action.c ****     mousekey_clear();
 1662               		.loc 1 705 0
 1663 0010 0E94 0000 		call mousekey_clear
 1664               	.LVL216:
 706:./tmk_core/common/action.c ****     mousekey_send();
 1665               		.loc 1 706 0
 1666 0014 0E94 0000 		call mousekey_send
 1667               	.LVL217:
 707:./tmk_core/common/action.c **** #endif
 708:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 709:./tmk_core/common/action.c ****     host_system_send(0);
 1668               		.loc 1 709 0
 1669 0018 80E0      		ldi r24,0
 1670 001a 90E0      		ldi r25,0
 1671 001c 0E94 0000 		call host_system_send
 1672               	.LVL218:
 710:./tmk_core/common/action.c ****     host_consumer_send(0);
 1673               		.loc 1 710 0
 1674 0020 80E0      		ldi r24,0
 1675 0022 90E0      		ldi r25,0
 1676 0024 0C94 0000 		jmp host_consumer_send
 1677               	.LVL219:
 1678               		.cfi_endproc
 1679               	.LFE113:
 1681               		.section	.text.clear_keyboard,"ax",@progbits
 1682               	.global	clear_keyboard
 1684               	clear_keyboard:
 1685               	.LFB112:
 693:./tmk_core/common/action.c ****     clear_mods();
 1686               		.loc 1 693 0
 1687               		.cfi_startproc
 1688               	/* prologue: function */
 1689               	/* frame size = 0 */
 1690               	/* stack size = 0 */
 1691               	.L__stack_usage = 0
 694:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1692               		.loc 1 694 0
 1693 0000 0E94 0000 		call clear_mods
 1694               	.LVL220:
 695:./tmk_core/common/action.c **** }
 1695               		.loc 1 695 0
 1696 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1697               	.LVL221:
 1698               		.cfi_endproc
 1699               	.LFE112:
 1701               		.section	.text.is_tap_key,"ax",@progbits
 1702               	.global	is_tap_key
 1704               	is_tap_key:
 1705               	.LFB114:
 711:./tmk_core/common/action.c **** #endif
 712:./tmk_core/common/action.c **** }
 713:./tmk_core/common/action.c **** 
 714:./tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 715:./tmk_core/common/action.c **** {
 1706               		.loc 1 715 0
 1707               		.cfi_startproc
 1708               	.LVL222:
 1709               	/* prologue: function */
 1710               	/* frame size = 0 */
 1711               	/* stack size = 0 */
 1712               	.L__stack_usage = 0
 716:./tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1713               		.loc 1 716 0
 1714 0000 0E94 0000 		call layer_switch_get_action
 1715               	.LVL223:
 717:./tmk_core/common/action.c **** 
 718:./tmk_core/common/action.c ****     switch (action.kind.id) {
 1716               		.loc 1 718 0
 1717 0004 E92F      		mov r30,r25
 1718 0006 E295      		swap r30
 1719 0008 EF70      		andi r30,lo8(15)
 1720 000a 4E2F      		mov r20,r30
 1721 000c 50E0      		ldi r21,0
 1722 000e FA01      		movw r30,r20
 1723 0010 3297      		sbiw r30,2
 1724 0012 EE30      		cpi r30,14
 1725 0014 F105      		cpc r31,__zero_reg__
 1726 0016 00F4      		brsh .L206
 1727 0018 E050      		subi r30,lo8(-(gs(.L200)))
 1728 001a F040      		sbci r31,hi8(-(gs(.L200)))
 1729 001c 0C94 0000 		jmp __tablejump2__
 1730               		.section	.progmem.gcc_sw_table.is_tap_key,"a",@progbits
 1731               		.p2align	1
 1732               	.L200:
 1733 0000 0000      		.word gs(.L199)
 1734 0002 0000      		.word gs(.L199)
 1735 0004 0000      		.word gs(.L206)
 1736 0006 0000      		.word gs(.L206)
 1737 0008 0000      		.word gs(.L201)
 1738 000a 0000      		.word gs(.L206)
 1739 000c 0000      		.word gs(.L206)
 1740 000e 0000      		.word gs(.L206)
 1741 0010 0000      		.word gs(.L199)
 1742 0012 0000      		.word gs(.L199)
 1743 0014 0000      		.word gs(.L202)
 1744 0016 0000      		.word gs(.L206)
 1745 0018 0000      		.word gs(.L206)
 1746 001a 0000      		.word gs(.L202)
 1747               		.section	.text.is_tap_key
 1748               	.L199:
 719:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 720:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 721:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 722:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 723:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1749               		.loc 1 723 0
 1750 0020 803F      		cpi r24,lo8(-16)
 1751 0022 01F0      		breq .L208
 1752 0024 00F4      		brsh .L204
 1753 0026 803E      		cpi r24,lo8(-32)
 1754 0028 00F4      		brsh .L206
 1755 002a 00C0      		rjmp .L208
 1756               	.L204:
 1757 002c 843F      		cpi r24,lo8(-12)
 1758 002e 01F4      		brne .L206
 1759 0030 00C0      		rjmp .L208
 1760               	.L201:
 724:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 725:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 726:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 727:./tmk_core/common/action.c ****                     return true;
 728:./tmk_core/common/action.c ****             }
 729:./tmk_core/common/action.c ****             return false;
 730:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 731:./tmk_core/common/action.c ****             switch (action.swap.code) {
 1761               		.loc 1 731 0
 1762 0032 803E      		cpi r24,lo8(-32)
 1763 0034 00F0      		brlo .L208
 1764 0036 813F      		cpi r24,lo8(-15)
 1765 0038 01F4      		brne .L206
 1766 003a 00C0      		rjmp .L208
 1767               	.L202:
 732:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 733:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 734:./tmk_core/common/action.c ****                     return true;
 735:./tmk_core/common/action.c ****             }
 736:./tmk_core/common/action.c ****             return false;
 737:./tmk_core/common/action.c ****         case ACT_MACRO:
 738:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 739:./tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1768               		.loc 1 739 0
 1769 003c 93FB      		bst r25,3
 1770 003e 8827      		clr r24
 1771 0040 80F9      		bld r24,0
 1772               	.LVL224:
 1773 0042 0895      		ret
 1774               	.LVL225:
 1775               	.L206:
 740:./tmk_core/common/action.c ****             return false;
 741:./tmk_core/common/action.c ****     }
 742:./tmk_core/common/action.c ****     return false;
 1776               		.loc 1 742 0
 1777 0044 80E0      		ldi r24,0
 1778               	.LVL226:
 1779 0046 0895      		ret
 1780               	.LVL227:
 1781               	.L208:
 734:./tmk_core/common/action.c ****             }
 1782               		.loc 1 734 0
 1783 0048 81E0      		ldi r24,lo8(1)
 1784               	.LVL228:
 743:./tmk_core/common/action.c **** }
 1785               		.loc 1 743 0
 1786 004a 0895      		ret
 1787               		.cfi_endproc
 1788               	.LFE114:
 1790               		.section	.text.debug_event,"ax",@progbits
 1791               	.global	debug_event
 1793               	debug_event:
 1794               	.LFB115:
 744:./tmk_core/common/action.c **** 
 745:./tmk_core/common/action.c **** 
 746:./tmk_core/common/action.c **** /*
 747:./tmk_core/common/action.c ****  * debug print
 748:./tmk_core/common/action.c ****  */
 749:./tmk_core/common/action.c **** void debug_event(keyevent_t event)
 750:./tmk_core/common/action.c **** {
 1795               		.loc 1 750 0
 1796               		.cfi_startproc
 1797 0000 CF93      		push r28
 1798               	.LCFI19:
 1799               		.cfi_def_cfa_offset 3
 1800               		.cfi_offset 28, -2
 1801 0002 DF93      		push r29
 1802               	.LCFI20:
 1803               		.cfi_def_cfa_offset 4
 1804               		.cfi_offset 29, -3
 1805 0004 00D0      		rcall .
 1806 0006 00D0      		rcall .
 1807 0008 1F92      		push __zero_reg__
 1808               	.LCFI21:
 1809               		.cfi_def_cfa_offset 9
 1810 000a CDB7      		in r28,__SP_L__
 1811 000c DEB7      		in r29,__SP_H__
 1812               	.LCFI22:
 1813               		.cfi_def_cfa_register 28
 1814               	/* prologue: function */
 1815               	/* frame size = 5 */
 1816               	/* stack size = 7 */
 1817               	.L__stack_usage = 7
 1818               	/* epilogue start */
 751:./tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 752:./tmk_core/common/action.c **** }
 1819               		.loc 1 752 0
 1820 000e 0F90      		pop __tmp_reg__
 1821 0010 0F90      		pop __tmp_reg__
 1822 0012 0F90      		pop __tmp_reg__
 1823 0014 0F90      		pop __tmp_reg__
 1824 0016 0F90      		pop __tmp_reg__
 1825 0018 DF91      		pop r29
 1826 001a CF91      		pop r28
 1827 001c 0895      		ret
 1828               		.cfi_endproc
 1829               	.LFE115:
 1831               		.section	.text.debug_record,"ax",@progbits
 1832               	.global	debug_record
 1834               	debug_record:
 1835               	.LFB116:
 753:./tmk_core/common/action.c **** 
 754:./tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 755:./tmk_core/common/action.c **** {
 1836               		.loc 1 755 0
 1837               		.cfi_startproc
 1838 0000 CF93      		push r28
 1839               	.LCFI23:
 1840               		.cfi_def_cfa_offset 3
 1841               		.cfi_offset 28, -2
 1842 0002 DF93      		push r29
 1843               	.LCFI24:
 1844               		.cfi_def_cfa_offset 4
 1845               		.cfi_offset 29, -3
 1846 0004 00D0      		rcall .
 1847 0006 00D0      		rcall .
 1848 0008 00D0      		rcall .
 1849               	.LCFI25:
 1850               		.cfi_def_cfa_offset 10
 1851 000a CDB7      		in r28,__SP_L__
 1852 000c DEB7      		in r29,__SP_H__
 1853               	.LCFI26:
 1854               		.cfi_def_cfa_register 28
 1855               	/* prologue: function */
 1856               	/* frame size = 6 */
 1857               	/* stack size = 8 */
 1858               	.L__stack_usage = 8
 1859               	/* epilogue start */
 756:./tmk_core/common/action.c ****     debug_event(record.event);
 757:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 758:./tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 759:./tmk_core/common/action.c **** #endif
 760:./tmk_core/common/action.c **** }
 1860               		.loc 1 760 0
 1861 000e 2696      		adiw r28,6
 1862 0010 0FB6      		in __tmp_reg__,__SREG__
 1863 0012 F894      		cli
 1864 0014 DEBF      		out __SP_H__,r29
 1865 0016 0FBE      		out __SREG__,__tmp_reg__
 1866 0018 CDBF      		out __SP_L__,r28
 1867 001a DF91      		pop r29
 1868 001c CF91      		pop r28
 1869 001e 0895      		ret
 1870               		.cfi_endproc
 1871               	.LFE116:
 1873               		.section	.text.debug_action,"ax",@progbits
 1874               	.global	debug_action
 1876               	debug_action:
 1877               	.LFB117:
 761:./tmk_core/common/action.c **** 
 762:./tmk_core/common/action.c **** void debug_action(action_t action)
 763:./tmk_core/common/action.c **** {
 1878               		.loc 1 763 0
 1879               		.cfi_startproc
 1880               	.LVL229:
 1881               	/* prologue: function */
 1882               	/* frame size = 0 */
 1883               	/* stack size = 0 */
 1884               	.L__stack_usage = 0
 1885 0000 0895      		ret
 1886               		.cfi_endproc
 1887               	.LFE117:
 1889               	.global	disable_action_cache
 1890               		.section	.bss.disable_action_cache,"aw",@nobits
 1893               	disable_action_cache:
 1894 0000 00        		.zero	1
 1895               		.text
 1896               	.Letext0:
 1897               		.file 3 "/usr/lib/avr/include/stdint.h"
 1898               		.file 4 "./tmk_core/common/keycode.h"
 1899               		.file 5 "./tmk_core/common/action_code.h"
 1900               		.file 6 "./tmk_core/common/action.h"
 1901               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1902               		.file 8 "./tmk_core/common/action_tapping.h"
 1903               		.file 9 "./tmk_core/common/host.h"
 1904               		.file 10 "./tmk_core/common/action_util.h"
 1905               		.file 11 "./tmk_core/common/action_layer.h"
 1906               		.file 12 "./tmk_core/common/mousekey.h"
 1907               		.file 13 "./tmk_core/common/action_macro.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
     /tmp/ccdLcPrR.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccdLcPrR.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccdLcPrR.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccdLcPrR.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccdLcPrR.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccdLcPrR.s:13     .text.action_exec:0000000000000000 action_exec
     /tmp/ccdLcPrR.s:93     .text.process_record_quantum:0000000000000000 process_record_quantum
     /tmp/ccdLcPrR.s:112    .text.register_code:0000000000000000 register_code
     /tmp/ccdLcPrR.s:466    .text.unregister_code:0000000000000000 unregister_code
     /tmp/ccdLcPrR.s:601    .text.register_mods:0000000000000000 register_mods
     /tmp/ccdLcPrR.s:627    .text.unregister_mods:0000000000000000 unregister_mods
     /tmp/ccdLcPrR.s:653    .text.process_action:0000000000000000 process_action
     /tmp/ccdLcPrR.s:1523   .text.process_record:0000000000000000 process_record
     /tmp/ccdLcPrR.s:1618   .text.process_record_nocache:0000000000000000 process_record_nocache
     /tmp/ccdLcPrR.s:1893   .bss.disable_action_cache:0000000000000000 disable_action_cache
     /tmp/ccdLcPrR.s:1642   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
     /tmp/ccdLcPrR.s:1684   .text.clear_keyboard:0000000000000000 clear_keyboard
     /tmp/ccdLcPrR.s:1704   .text.is_tap_key:0000000000000000 is_tap_key
     /tmp/ccdLcPrR.s:1793   .text.debug_event:0000000000000000 debug_event
     /tmp/ccdLcPrR.s:1834   .text.debug_record:0000000000000000 debug_record
     /tmp/ccdLcPrR.s:1876   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
action_tapping_process
host_keyboard_leds
add_key
send_keyboard_report
del_key
add_mods
host_system_send
host_consumer_send
del_mods
clear_weak_mods
is_oneshot_layer_active
clear_oneshot_layer_state
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
mousekey_on
mousekey_off
mousekey_send
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_on
layer_off
layer_invert
layer_move
layer_clear
set_oneshot_layer
action_get_macro
action_macro_play
action_function
get_oneshot_layer_state
get_oneshot_layer
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
clear_keys
mousekey_clear
clear_mods
layer_switch_get_action
__do_clear_bss
