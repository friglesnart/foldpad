   1               		.file	"rgblight.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.sethsv,"ax",@progbits
  11               	.global	sethsv
  13               	sethsv:
  14               	.LFB7:
  15               		.file 1 "quantum/rgblight.c"
   1:quantum/rgblight.c **** #include <avr/eeprom.h>
   2:quantum/rgblight.c **** #include <avr/interrupt.h>
   3:quantum/rgblight.c **** #include <util/delay.h>
   4:quantum/rgblight.c **** #include "progmem.h"
   5:quantum/rgblight.c **** #include "timer.h"
   6:quantum/rgblight.c **** #include "rgblight.h"
   7:quantum/rgblight.c **** #include "debug.h"
   8:quantum/rgblight.c **** 
   9:quantum/rgblight.c **** // Lightness curve using the CIE 1931 lightness formula
  10:quantum/rgblight.c **** //Generated by the python script provided in http://jared.geek.nz/2013/feb/linear-led-pwm
  11:quantum/rgblight.c **** const uint8_t DIM_CURVE[] PROGMEM = {
  12:quantum/rgblight.c ****     0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
  13:quantum/rgblight.c ****     1, 1, 1, 1, 2, 2, 2, 2, 2, 2,
  14:quantum/rgblight.c ****     2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
  15:quantum/rgblight.c ****     3, 4, 4, 4, 4, 4, 4, 5, 5, 5,
  16:quantum/rgblight.c ****     5, 5, 6, 6, 6, 6, 6, 7, 7, 7,
  17:quantum/rgblight.c ****     7, 8, 8, 8, 8, 9, 9, 9, 10, 10,
  18:quantum/rgblight.c ****     10, 10, 11, 11, 11, 12, 12, 12, 13, 13,
  19:quantum/rgblight.c ****     13, 14, 14, 15, 15, 15, 16, 16, 17, 17,
  20:quantum/rgblight.c ****     17, 18, 18, 19, 19, 20, 20, 21, 21, 22,
  21:quantum/rgblight.c ****     22, 23, 23, 24, 24, 25, 25, 26, 26, 27,
  22:quantum/rgblight.c ****     28, 28, 29, 29, 30, 31, 31, 32, 32, 33,
  23:quantum/rgblight.c ****     34, 34, 35, 36, 37, 37, 38, 39, 39, 40,
  24:quantum/rgblight.c ****     41, 42, 43, 43, 44, 45, 46, 47, 47, 48,
  25:quantum/rgblight.c ****     49, 50, 51, 52, 53, 54, 54, 55, 56, 57,
  26:quantum/rgblight.c ****     58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
  27:quantum/rgblight.c ****     68, 70, 71, 72, 73, 74, 75, 76, 77, 79,
  28:quantum/rgblight.c ****     80, 81, 82, 83, 85, 86, 87, 88, 90, 91,
  29:quantum/rgblight.c ****     92, 94, 95, 96, 98, 99, 100, 102, 103, 105,
  30:quantum/rgblight.c ****     106, 108, 109, 110, 112, 113, 115, 116, 118, 120,
  31:quantum/rgblight.c ****     121, 123, 124, 126, 128, 129, 131, 132, 134, 136,
  32:quantum/rgblight.c ****     138, 139, 141, 143, 145, 146, 148, 150, 152, 154,
  33:quantum/rgblight.c ****     155, 157, 159, 161, 163, 165, 167, 169, 171, 173,
  34:quantum/rgblight.c ****     175, 177, 179, 181, 183, 185, 187, 189, 191, 193,
  35:quantum/rgblight.c ****     196, 198, 200, 202, 204, 207, 209, 211, 214, 216,
  36:quantum/rgblight.c ****     218, 220, 223, 225, 228, 230, 232, 235, 237, 240,
  37:quantum/rgblight.c ****     242, 245, 247, 250, 252, 255,
  38:quantum/rgblight.c ****     };
  39:quantum/rgblight.c **** 
  40:quantum/rgblight.c **** const uint8_t RGBLED_BREATHING_TABLE[] PROGMEM = {
  41:quantum/rgblight.c ****   0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 4, 5, 5, 6, 7, 9,
  42:quantum/rgblight.c ****   10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 25, 27, 29, 31, 33, 35,
  43:quantum/rgblight.c ****   37, 40, 42, 44, 47, 49, 52, 54, 57, 59, 62, 65, 67, 70, 73, 76,
  44:quantum/rgblight.c ****   79, 82, 85, 88, 90, 93, 97, 100, 103, 106, 109, 112, 115, 118, 121, 124,
  45:quantum/rgblight.c ****   127, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 162, 165, 167, 170, 173,
  46:quantum/rgblight.c ****   176, 179, 182, 185, 188, 190, 193, 196, 198, 201, 203, 206, 208, 211, 213, 215,
  47:quantum/rgblight.c ****   218, 220, 222, 224, 226, 228, 230, 232, 234, 235, 237, 238, 240, 241, 243, 244,
  48:quantum/rgblight.c ****   245, 246, 248, 249, 250, 250, 251, 252, 253, 253, 254, 254, 254, 255, 255, 255,
  49:quantum/rgblight.c ****   255, 255, 255, 255, 254, 254, 254, 253, 253, 252, 251, 250, 250, 249, 248, 246,
  50:quantum/rgblight.c ****   245, 244, 243, 241, 240, 238, 237, 235, 234, 232, 230, 228, 226, 224, 222, 220,
  51:quantum/rgblight.c ****   218, 215, 213, 211, 208, 206, 203, 201, 198, 196, 193, 190, 188, 185, 182, 179,
  52:quantum/rgblight.c ****   176, 173, 170, 167, 165, 162, 158, 155, 152, 149, 146, 143, 140, 137, 134, 131,
  53:quantum/rgblight.c ****   128, 124, 121, 118, 115, 112, 109, 106, 103, 100, 97, 93, 90, 88, 85, 82,
  54:quantum/rgblight.c ****   79, 76, 73, 70, 67, 65, 62, 59, 57, 54, 52, 49, 47, 44, 42, 40,
  55:quantum/rgblight.c ****   37, 35, 33, 31, 29, 27, 25, 23, 21, 20, 18, 17, 15, 14, 12, 11,
  56:quantum/rgblight.c ****   10, 9, 7, 6, 5, 5, 4, 3, 2, 2, 1, 1, 1, 0, 0, 0
  57:quantum/rgblight.c **** };
  58:quantum/rgblight.c **** 
  59:quantum/rgblight.c **** __attribute__ ((weak))
  60:quantum/rgblight.c **** const uint8_t RGBLED_BREATHING_INTERVALS[] PROGMEM = {30, 20, 10, 5};
  61:quantum/rgblight.c **** __attribute__ ((weak))
  62:quantum/rgblight.c **** const uint8_t RGBLED_RAINBOW_MOOD_INTERVALS[] PROGMEM = {120, 60, 30};
  63:quantum/rgblight.c **** __attribute__ ((weak))
  64:quantum/rgblight.c **** const uint8_t RGBLED_RAINBOW_SWIRL_INTERVALS[] PROGMEM = {100, 50, 20};
  65:quantum/rgblight.c **** __attribute__ ((weak))
  66:quantum/rgblight.c **** const uint8_t RGBLED_SNAKE_INTERVALS[] PROGMEM = {100, 50, 20};
  67:quantum/rgblight.c **** __attribute__ ((weak))
  68:quantum/rgblight.c **** const uint8_t RGBLED_KNIGHT_INTERVALS[] PROGMEM = {100, 50, 20};
  69:quantum/rgblight.c **** 
  70:quantum/rgblight.c **** rgblight_config_t rgblight_config;
  71:quantum/rgblight.c **** rgblight_config_t inmem_config;
  72:quantum/rgblight.c **** 
  73:quantum/rgblight.c **** LED_TYPE led[RGBLED_NUM];
  74:quantum/rgblight.c **** uint8_t rgblight_inited = 0;
  75:quantum/rgblight.c **** bool rgblight_timer_enabled = false;
  76:quantum/rgblight.c **** 
  77:quantum/rgblight.c **** void sethsv(uint16_t hue, uint8_t sat, uint8_t val, LED_TYPE *led1) {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 EF92      		push r14
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 14, -2
  23 0002 FF92      		push r15
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 15, -3
  27 0004 0F93      		push r16
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 16, -4
  31 0006 1F93      		push r17
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 17, -5
  35 0008 CF93      		push r28
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 28, -6
  39 000a DF93      		push r29
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 29, -7
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 6 */
  46               	.L__stack_usage = 6
  47 000c E901      		movw r28,r18
  48               	.LVL1:
  78:quantum/rgblight.c ****   uint8_t r = 0, g = 0, b = 0, base, color;
  79:quantum/rgblight.c **** 
  80:quantum/rgblight.c ****   if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
  49               		.loc 1 80 0
  50 000e 6623      		tst r22
  51 0010 01F4      		brne .+2
  52 0012 00C0      		rjmp .L10
  81:quantum/rgblight.c ****     r = val;
  82:quantum/rgblight.c ****     g = val;
  83:quantum/rgblight.c ****     b = val;
  84:quantum/rgblight.c ****   } else {
  85:quantum/rgblight.c ****     base = ((255 - sat) * val) >> 8;
  53               		.loc 1 85 0
  54 0014 242F      		mov r18,r20
  55               	.LVL2:
  56 0016 30E0      		ldi r19,0
  57 0018 EFEF      		ldi r30,lo8(-1)
  58 001a F0E0      		ldi r31,0
  59 001c E61B      		sub r30,r22
  60 001e F109      		sbc r31,__zero_reg__
  61 0020 B901      		movw r22,r18
  62               	.LVL3:
  63 0022 E69F      		mul r30,r22
  64 0024 9001      		movw r18,r0
  65 0026 E79F      		mul r30,r23
  66 0028 300D      		add r19,r0
  67 002a F69F      		mul r31,r22
  68 002c 300D      		add r19,r0
  69 002e 1124      		clr r1
  70 0030 232F      		mov r18,r19
  71               	.LVL4:
  86:quantum/rgblight.c ****     color = (val - base) * (hue % 60) / 60;
  72               		.loc 1 86 0
  73 0032 8B01      		movw r16,r22
  74 0034 031B      		sub r16,r19
  75 0036 1109      		sbc r17,__zero_reg__
  76 0038 5CE3      		ldi r21,lo8(60)
  77 003a E52E      		mov r14,r21
  78 003c F12C      		mov r15,__zero_reg__
  79 003e B701      		movw r22,r14
  80 0040 0E94 0000 		call __udivmodhi4
  81               	.LVL5:
  82 0044 FB01      		movw r30,r22
  83 0046 BC01      		movw r22,r24
  84 0048 069F      		mul r16,r22
  85 004a C001      		movw r24,r0
  86 004c 079F      		mul r16,r23
  87 004e 900D      		add r25,r0
  88 0050 169F      		mul r17,r22
  89 0052 900D      		add r25,r0
  90 0054 1124      		clr r1
  91 0056 B701      		movw r22,r14
  92 0058 0E94 0000 		call __udivmodhi4
  93               	.LVL6:
  87:quantum/rgblight.c **** 
  88:quantum/rgblight.c ****     switch (hue / 60) {
  94               		.loc 1 88 0
  95 005c E230      		cpi r30,2
  96 005e F105      		cpc r31,__zero_reg__
  97 0060 01F0      		breq .L3
  98 0062 00F4      		brsh .L4
  99 0064 3097      		sbiw r30,0
 100 0066 01F0      		breq .L5
 101 0068 3197      		sbiw r30,1
 102 006a 01F4      		brne .L11
 103               	.LVL7:
  89:quantum/rgblight.c ****       case 0:
  90:quantum/rgblight.c ****         r = val;
  91:quantum/rgblight.c ****         g = base + color;
  92:quantum/rgblight.c ****         b = base;
  93:quantum/rgblight.c ****         break;
  94:quantum/rgblight.c ****       case 1:
  95:quantum/rgblight.c ****         r = val - color;
  96:quantum/rgblight.c ****         g = val;
  97:quantum/rgblight.c ****         b = base;
 104               		.loc 1 97 0
 105 006c 832F      		mov r24,r19
  96:quantum/rgblight.c ****         b = base;
 106               		.loc 1 96 0
 107 006e 242F      		mov r18,r20
  95:quantum/rgblight.c ****         g = val;
 108               		.loc 1 95 0
 109 0070 461B      		sub r20,r22
 110               	.LVL8:
  98:quantum/rgblight.c ****         break;
 111               		.loc 1 98 0
 112 0072 00C0      		rjmp .L2
 113               	.LVL9:
 114               	.L4:
  88:quantum/rgblight.c ****       case 0:
 115               		.loc 1 88 0
 116 0074 E430      		cpi r30,4
 117 0076 F105      		cpc r31,__zero_reg__
 118 0078 01F0      		breq .L7
 119 007a 00F0      		brlo .L8
 120 007c 3597      		sbiw r30,5
 121 007e 01F4      		brne .L11
 122               	.LVL10:
  99:quantum/rgblight.c ****       case 2:
 100:quantum/rgblight.c ****         r = base;
 101:quantum/rgblight.c ****         g = val;
 102:quantum/rgblight.c ****         b = base + color;
 103:quantum/rgblight.c ****         break;
 104:quantum/rgblight.c ****       case 3:
 105:quantum/rgblight.c ****         r = base;
 106:quantum/rgblight.c ****         g = val - color;
 107:quantum/rgblight.c ****         b = val;
 108:quantum/rgblight.c ****         break;
 109:quantum/rgblight.c ****       case 4:
 110:quantum/rgblight.c ****         r = base + color;
 111:quantum/rgblight.c ****         g = base;
 112:quantum/rgblight.c ****         b = val;
 113:quantum/rgblight.c ****         break;
 114:quantum/rgblight.c ****       case 5:
 115:quantum/rgblight.c ****         r = val;
 116:quantum/rgblight.c ****         g = base;
 117:quantum/rgblight.c ****         b = val - color;
 123               		.loc 1 117 0
 124 0080 842F      		mov r24,r20
 125 0082 861B      		sub r24,r22
 126               	.LVL11:
 118:quantum/rgblight.c ****         break;
 127               		.loc 1 118 0
 128 0084 00C0      		rjmp .L2
 129               	.LVL12:
 130               	.L5:
  92:quantum/rgblight.c ****         break;
 131               		.loc 1 92 0
 132 0086 832F      		mov r24,r19
  91:quantum/rgblight.c ****         b = base;
 133               		.loc 1 91 0
 134 0088 262F      		mov r18,r22
 135               	.LVL13:
 136 008a 230F      		add r18,r19
 137               	.LVL14:
  93:quantum/rgblight.c ****       case 1:
 138               		.loc 1 93 0
 139 008c 00C0      		rjmp .L2
 140               	.LVL15:
 141               	.L3:
 102:quantum/rgblight.c ****         break;
 142               		.loc 1 102 0
 143 008e 862F      		mov r24,r22
 144 0090 830F      		add r24,r19
 145               	.LVL16:
 103:quantum/rgblight.c ****       case 3:
 146               		.loc 1 103 0
 147 0092 E42F      		mov r30,r20
 148 0094 00C0      		rjmp .L12
 149               	.LVL17:
 150               	.L8:
 106:quantum/rgblight.c ****         b = val;
 151               		.loc 1 106 0
 152 0096 E42F      		mov r30,r20
 153 0098 E61B      		sub r30,r22
 154               	.LVL18:
 107:quantum/rgblight.c ****         break;
 155               		.loc 1 107 0
 156 009a 842F      		mov r24,r20
 157               	.LVL19:
 158               	.L12:
 105:quantum/rgblight.c ****         g = val - color;
 159               		.loc 1 105 0
 160 009c 432F      		mov r20,r19
 161               	.LVL20:
 106:quantum/rgblight.c ****         b = val;
 162               		.loc 1 106 0
 163 009e 2E2F      		mov r18,r30
 108:quantum/rgblight.c ****       case 4:
 164               		.loc 1 108 0
 165 00a0 00C0      		rjmp .L2
 166               	.LVL21:
 167               	.L7:
 112:quantum/rgblight.c ****         break;
 168               		.loc 1 112 0
 169 00a2 842F      		mov r24,r20
 110:quantum/rgblight.c ****         g = base;
 170               		.loc 1 110 0
 171 00a4 462F      		mov r20,r22
 172               	.LVL22:
 173 00a6 430F      		add r20,r19
 174               	.LVL23:
 113:quantum/rgblight.c ****       case 5:
 175               		.loc 1 113 0
 176 00a8 00C0      		rjmp .L2
 177               	.LVL24:
 178               	.L10:
  83:quantum/rgblight.c ****   } else {
 179               		.loc 1 83 0
 180 00aa 842F      		mov r24,r20
 181               	.LVL25:
  82:quantum/rgblight.c ****     b = val;
 182               		.loc 1 82 0
 183 00ac 242F      		mov r18,r20
 184               	.LVL26:
 185 00ae 00C0      		rjmp .L2
 186               	.LVL27:
 187               	.L11:
  78:quantum/rgblight.c **** 
 188               		.loc 1 78 0
 189 00b0 80E0      		ldi r24,0
 190 00b2 20E0      		ldi r18,0
 191 00b4 40E0      		ldi r20,0
 192               	.LVL28:
 193               	.L2:
 194               	.LBB9:
 119:quantum/rgblight.c ****     }
 120:quantum/rgblight.c ****   }
 121:quantum/rgblight.c ****   r = pgm_read_byte(&DIM_CURVE[r]);
 195               		.loc 1 121 0
 196 00b6 E42F      		mov r30,r20
 197 00b8 F0E0      		ldi r31,0
 198 00ba E050      		subi r30,lo8(-(DIM_CURVE))
 199 00bc F040      		sbci r31,hi8(-(DIM_CURVE))
 200               	/* #APP */
 201               	 ;  121 "quantum/rgblight.c" 1
 202 00be 4491      		lpm r20, Z
 203               		
 204               	 ;  0 "" 2
 205               	.LVL29:
 206               	/* #NOAPP */
 207               	.LBE9:
 208               	.LBB10:
 122:quantum/rgblight.c ****   g = pgm_read_byte(&DIM_CURVE[g]);
 209               		.loc 1 122 0
 210 00c0 E22F      		mov r30,r18
 211 00c2 F0E0      		ldi r31,0
 212 00c4 E050      		subi r30,lo8(-(DIM_CURVE))
 213 00c6 F040      		sbci r31,hi8(-(DIM_CURVE))
 214               	/* #APP */
 215               	 ;  122 "quantum/rgblight.c" 1
 216 00c8 9491      		lpm r25, Z
 217               		
 218               	 ;  0 "" 2
 219               	.LVL30:
 220               	/* #NOAPP */
 221               	.LBE10:
 222               	.LBB11:
 123:quantum/rgblight.c ****   b = pgm_read_byte(&DIM_CURVE[b]);
 223               		.loc 1 123 0
 224 00ca E82F      		mov r30,r24
 225 00cc F0E0      		ldi r31,0
 226 00ce E050      		subi r30,lo8(-(DIM_CURVE))
 227 00d0 F040      		sbci r31,hi8(-(DIM_CURVE))
 228               	/* #APP */
 229               	 ;  123 "quantum/rgblight.c" 1
 230 00d2 E491      		lpm r30, Z
 231               		
 232               	 ;  0 "" 2
 233               	.LVL31:
 234               	/* #NOAPP */
 235               	.LBE11:
 236               	.LBB12:
 237               	.LBB13:
 124:quantum/rgblight.c **** 
 125:quantum/rgblight.c ****   setrgb(r, g, b, led1);
 126:quantum/rgblight.c **** }
 127:quantum/rgblight.c **** 
 128:quantum/rgblight.c **** void setrgb(uint8_t r, uint8_t g, uint8_t b, LED_TYPE *led1) {
 129:quantum/rgblight.c ****   (*led1).r = r;
 238               		.loc 1 129 0
 239 00d4 4983      		std Y+1,r20
 130:quantum/rgblight.c ****   (*led1).g = g;
 240               		.loc 1 130 0
 241 00d6 9883      		st Y,r25
 131:quantum/rgblight.c ****   (*led1).b = b;
 242               		.loc 1 131 0
 243 00d8 EA83      		std Y+2,r30
 244               	.LVL32:
 245               	/* epilogue start */
 246               	.LBE13:
 247               	.LBE12:
 126:quantum/rgblight.c **** 
 248               		.loc 1 126 0
 249 00da DF91      		pop r29
 250 00dc CF91      		pop r28
 251               	.LVL33:
 252 00de 1F91      		pop r17
 253 00e0 0F91      		pop r16
 254 00e2 FF90      		pop r15
 255 00e4 EF90      		pop r14
 256 00e6 0895      		ret
 257               		.cfi_endproc
 258               	.LFE7:
 260               		.section	.text.setrgb,"ax",@progbits
 261               	.global	setrgb
 263               	setrgb:
 264               	.LFB8:
 128:quantum/rgblight.c ****   (*led1).r = r;
 265               		.loc 1 128 0
 266               		.cfi_startproc
 267               	.LVL34:
 268               	/* prologue: function */
 269               	/* frame size = 0 */
 270               	/* stack size = 0 */
 271               	.L__stack_usage = 0
 272 0000 F901      		movw r30,r18
 129:quantum/rgblight.c ****   (*led1).g = g;
 273               		.loc 1 129 0
 274 0002 8183      		std Z+1,r24
 130:quantum/rgblight.c ****   (*led1).b = b;
 275               		.loc 1 130 0
 276 0004 6083      		st Z,r22
 277               		.loc 1 131 0
 278 0006 4283      		std Z+2,r20
 279 0008 0895      		ret
 280               		.cfi_endproc
 281               	.LFE8:
 283               		.section	.text.eeconfig_read_rgblight,"ax",@progbits
 284               	.global	eeconfig_read_rgblight
 286               	eeconfig_read_rgblight:
 287               	.LFB9:
 132:quantum/rgblight.c **** }
 133:quantum/rgblight.c **** 
 134:quantum/rgblight.c **** 
 135:quantum/rgblight.c **** uint32_t eeconfig_read_rgblight(void) {
 288               		.loc 1 135 0
 289               		.cfi_startproc
 290               	/* prologue: function */
 291               	/* frame size = 0 */
 292               	/* stack size = 0 */
 293               	.L__stack_usage = 0
 136:quantum/rgblight.c ****   return eeprom_read_dword(EECONFIG_RGBLIGHT);
 294               		.loc 1 136 0
 295 0000 88E0      		ldi r24,lo8(8)
 296 0002 90E0      		ldi r25,0
 297 0004 0C94 0000 		jmp eeprom_read_dword
 298               	.LVL35:
 299               		.cfi_endproc
 300               	.LFE9:
 302               		.section	.text.eeconfig_update_rgblight,"ax",@progbits
 303               	.global	eeconfig_update_rgblight
 305               	eeconfig_update_rgblight:
 306               	.LFB10:
 137:quantum/rgblight.c **** }
 138:quantum/rgblight.c **** void eeconfig_update_rgblight(uint32_t val) {
 307               		.loc 1 138 0
 308               		.cfi_startproc
 309               	.LVL36:
 310               	/* prologue: function */
 311               	/* frame size = 0 */
 312               	/* stack size = 0 */
 313               	.L__stack_usage = 0
 314 0000 AB01      		movw r20,r22
 315 0002 BC01      		movw r22,r24
 139:quantum/rgblight.c ****   eeprom_update_dword(EECONFIG_RGBLIGHT, val);
 316               		.loc 1 139 0
 317 0004 88E0      		ldi r24,lo8(8)
 318 0006 90E0      		ldi r25,0
 319 0008 0C94 0000 		jmp eeprom_update_dword
 320               	.LVL37:
 321               		.cfi_endproc
 322               	.LFE10:
 324               		.section	.text.eeconfig_update_rgblight_default,"ax",@progbits
 325               	.global	eeconfig_update_rgblight_default
 327               	eeconfig_update_rgblight_default:
 328               	.LFB11:
 140:quantum/rgblight.c **** }
 141:quantum/rgblight.c **** void eeconfig_update_rgblight_default(void) {
 329               		.loc 1 141 0
 330               		.cfi_startproc
 331               	/* prologue: function */
 332               	/* frame size = 0 */
 333               	/* stack size = 0 */
 334               	.L__stack_usage = 0
 142:quantum/rgblight.c ****   dprintf("eeconfig_update_rgblight_default\n");
 143:quantum/rgblight.c ****   rgblight_config.enable = 1;
 335               		.loc 1 143 0
 336 0000 E0E0      		ldi r30,lo8(rgblight_config)
 337 0002 F0E0      		ldi r31,hi8(rgblight_config)
 144:quantum/rgblight.c ****   rgblight_config.mode = 1;
 145:quantum/rgblight.c ****   rgblight_config.hue = 0;
 338               		.loc 1 145 0
 339 0004 83E0      		ldi r24,lo8(3)
 340 0006 8083      		st Z,r24
 341 0008 1092 0000 		sts rgblight_config+1,__zero_reg__
 146:quantum/rgblight.c ****   rgblight_config.sat = 255;
 342               		.loc 1 146 0
 343 000c 8FEF      		ldi r24,lo8(-1)
 344 000e 8283      		std Z+2,r24
 147:quantum/rgblight.c ****   rgblight_config.val = 255;
 345               		.loc 1 147 0
 346 0010 8383      		std Z+3,r24
 148:quantum/rgblight.c ****   eeconfig_update_rgblight(rgblight_config.raw);
 347               		.loc 1 148 0
 348 0012 6091 0000 		lds r22,rgblight_config
 349 0016 7091 0000 		lds r23,rgblight_config+1
 350 001a 8091 0000 		lds r24,rgblight_config+2
 351 001e 9091 0000 		lds r25,rgblight_config+3
 352 0022 0C94 0000 		jmp eeconfig_update_rgblight
 353               	.LVL38:
 354               		.cfi_endproc
 355               	.LFE11:
 357               		.section	.text.eeconfig_debug_rgblight,"ax",@progbits
 358               	.global	eeconfig_debug_rgblight
 360               	eeconfig_debug_rgblight:
 361               	.LFB12:
 149:quantum/rgblight.c **** }
 150:quantum/rgblight.c **** void eeconfig_debug_rgblight(void) {
 362               		.loc 1 150 0
 363               		.cfi_startproc
 364               	/* prologue: function */
 365               	/* frame size = 0 */
 366               	/* stack size = 0 */
 367               	.L__stack_usage = 0
 368 0000 0895      		ret
 369               		.cfi_endproc
 370               	.LFE12:
 372               		.section	.text.rgblight_set,"ax",@progbits
 373               		.weak	rgblight_set
 375               	rgblight_set:
 376               	.LFB30:
 151:quantum/rgblight.c ****   dprintf("rgblight_config eprom\n");
 152:quantum/rgblight.c ****   dprintf("rgblight_config.enable = %d\n", rgblight_config.enable);
 153:quantum/rgblight.c ****   dprintf("rghlight_config.mode = %d\n", rgblight_config.mode);
 154:quantum/rgblight.c ****   dprintf("rgblight_config.hue = %d\n", rgblight_config.hue);
 155:quantum/rgblight.c ****   dprintf("rgblight_config.sat = %d\n", rgblight_config.sat);
 156:quantum/rgblight.c ****   dprintf("rgblight_config.val = %d\n", rgblight_config.val);
 157:quantum/rgblight.c **** }
 158:quantum/rgblight.c **** 
 159:quantum/rgblight.c **** void rgblight_init(void) {
 160:quantum/rgblight.c ****   debug_enable = 1; // Debug ON!
 161:quantum/rgblight.c ****   dprintf("rgblight_init called.\n");
 162:quantum/rgblight.c ****   rgblight_inited = 1;
 163:quantum/rgblight.c ****   dprintf("rgblight_init start!\n");
 164:quantum/rgblight.c ****   if (!eeconfig_is_enabled()) {
 165:quantum/rgblight.c ****     dprintf("rgblight_init eeconfig is not enabled.\n");
 166:quantum/rgblight.c ****     eeconfig_init();
 167:quantum/rgblight.c ****     eeconfig_update_rgblight_default();
 168:quantum/rgblight.c ****   }
 169:quantum/rgblight.c ****   rgblight_config.raw = eeconfig_read_rgblight();
 170:quantum/rgblight.c ****   if (!rgblight_config.mode) {
 171:quantum/rgblight.c ****     dprintf("rgblight_init rgblight_config.mode = 0. Write default values to EEPROM.\n");
 172:quantum/rgblight.c ****     eeconfig_update_rgblight_default();
 173:quantum/rgblight.c ****     rgblight_config.raw = eeconfig_read_rgblight();
 174:quantum/rgblight.c ****   }
 175:quantum/rgblight.c ****   eeconfig_debug_rgblight(); // display current eeprom values
 176:quantum/rgblight.c **** 
 177:quantum/rgblight.c ****   #ifdef RGBLIGHT_ANIMATIONS
 178:quantum/rgblight.c ****     rgblight_timer_init(); // setup the timer
 179:quantum/rgblight.c ****   #endif
 180:quantum/rgblight.c **** 
 181:quantum/rgblight.c ****   if (rgblight_config.enable) {
 182:quantum/rgblight.c ****     rgblight_mode(rgblight_config.mode);
 183:quantum/rgblight.c ****   }
 184:quantum/rgblight.c **** }
 185:quantum/rgblight.c **** 
 186:quantum/rgblight.c **** void rgblight_update_dword(uint32_t dword) {
 187:quantum/rgblight.c ****   rgblight_config.raw = dword;
 188:quantum/rgblight.c ****   eeconfig_update_rgblight(rgblight_config.raw);
 189:quantum/rgblight.c ****   if (rgblight_config.enable)
 190:quantum/rgblight.c ****     rgblight_mode(rgblight_config.mode);
 191:quantum/rgblight.c ****   else {
 192:quantum/rgblight.c ****     #ifdef RGBLIGHT_ANIMATIONS
 193:quantum/rgblight.c ****       rgblight_timer_disable();
 194:quantum/rgblight.c ****     #endif
 195:quantum/rgblight.c ****       rgblight_set();
 196:quantum/rgblight.c ****   }
 197:quantum/rgblight.c **** }
 198:quantum/rgblight.c **** 
 199:quantum/rgblight.c **** void rgblight_increase(void) {
 200:quantum/rgblight.c ****   uint8_t mode = 0;
 201:quantum/rgblight.c ****   if (rgblight_config.mode < RGBLIGHT_MODES) {
 202:quantum/rgblight.c ****     mode = rgblight_config.mode + 1;
 203:quantum/rgblight.c ****   }
 204:quantum/rgblight.c ****   rgblight_mode(mode);
 205:quantum/rgblight.c **** }
 206:quantum/rgblight.c **** void rgblight_decrease(void) {
 207:quantum/rgblight.c ****   uint8_t mode = 0;
 208:quantum/rgblight.c ****   // Mode will never be < 1. If it ever is, eeprom needs to be initialized.
 209:quantum/rgblight.c ****   if (rgblight_config.mode > 1) {
 210:quantum/rgblight.c ****     mode = rgblight_config.mode - 1;
 211:quantum/rgblight.c ****   }
 212:quantum/rgblight.c ****   rgblight_mode(mode);
 213:quantum/rgblight.c **** }
 214:quantum/rgblight.c **** void rgblight_step(void) {
 215:quantum/rgblight.c ****   uint8_t mode = 0;
 216:quantum/rgblight.c ****   mode = rgblight_config.mode + 1;
 217:quantum/rgblight.c ****   if (mode > RGBLIGHT_MODES) {
 218:quantum/rgblight.c ****     mode = 1;
 219:quantum/rgblight.c ****   }
 220:quantum/rgblight.c ****   rgblight_mode(mode);
 221:quantum/rgblight.c **** }
 222:quantum/rgblight.c **** 
 223:quantum/rgblight.c **** void rgblight_mode(uint8_t mode) {
 224:quantum/rgblight.c ****   if (!rgblight_config.enable) {
 225:quantum/rgblight.c ****     return;
 226:quantum/rgblight.c ****   }
 227:quantum/rgblight.c ****   if (mode < 1) {
 228:quantum/rgblight.c ****     rgblight_config.mode = 1;
 229:quantum/rgblight.c ****   } else if (mode > RGBLIGHT_MODES) {
 230:quantum/rgblight.c ****     rgblight_config.mode = RGBLIGHT_MODES;
 231:quantum/rgblight.c ****   } else {
 232:quantum/rgblight.c ****     rgblight_config.mode = mode;
 233:quantum/rgblight.c ****   }
 234:quantum/rgblight.c ****   eeconfig_update_rgblight(rgblight_config.raw);
 235:quantum/rgblight.c ****   xprintf("rgblight mode: %u\n", rgblight_config.mode);
 236:quantum/rgblight.c ****   if (rgblight_config.mode == 1) {
 237:quantum/rgblight.c ****     #ifdef RGBLIGHT_ANIMATIONS
 238:quantum/rgblight.c ****       rgblight_timer_disable();
 239:quantum/rgblight.c ****     #endif
 240:quantum/rgblight.c ****   } else if (rgblight_config.mode >= 2 && rgblight_config.mode <= 23) {
 241:quantum/rgblight.c ****     // MODE 2-5, breathing
 242:quantum/rgblight.c ****     // MODE 6-8, rainbow mood
 243:quantum/rgblight.c ****     // MODE 9-14, rainbow swirl
 244:quantum/rgblight.c ****     // MODE 15-20, snake
 245:quantum/rgblight.c ****     // MODE 21-23, knight
 246:quantum/rgblight.c **** 
 247:quantum/rgblight.c ****     #ifdef RGBLIGHT_ANIMATIONS
 248:quantum/rgblight.c ****       rgblight_timer_enable();
 249:quantum/rgblight.c ****     #endif
 250:quantum/rgblight.c ****   }
 251:quantum/rgblight.c ****   rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
 252:quantum/rgblight.c **** }
 253:quantum/rgblight.c **** 
 254:quantum/rgblight.c **** void rgblight_toggle(void) {
 255:quantum/rgblight.c ****   rgblight_config.enable ^= 1;
 256:quantum/rgblight.c ****   eeconfig_update_rgblight(rgblight_config.raw);
 257:quantum/rgblight.c ****   xprintf("rgblight toggle: rgblight_config.enable = %u\n", rgblight_config.enable);
 258:quantum/rgblight.c ****   if (rgblight_config.enable) {
 259:quantum/rgblight.c ****     rgblight_mode(rgblight_config.mode);
 260:quantum/rgblight.c ****   } else {
 261:quantum/rgblight.c ****     #ifdef RGBLIGHT_ANIMATIONS
 262:quantum/rgblight.c ****       rgblight_timer_disable();
 263:quantum/rgblight.c ****     #endif
 264:quantum/rgblight.c ****     _delay_ms(50);
 265:quantum/rgblight.c ****     rgblight_set();
 266:quantum/rgblight.c ****   }
 267:quantum/rgblight.c **** }
 268:quantum/rgblight.c **** 
 269:quantum/rgblight.c **** void rgblight_enable(void) {
 270:quantum/rgblight.c ****   rgblight_config.enable = 1;
 271:quantum/rgblight.c ****   eeconfig_update_rgblight(rgblight_config.raw);
 272:quantum/rgblight.c ****   xprintf("rgblight enable: rgblight_config.enable = %u\n", rgblight_config.enable);
 273:quantum/rgblight.c ****   rgblight_mode(rgblight_config.mode);
 274:quantum/rgblight.c **** }
 275:quantum/rgblight.c **** 
 276:quantum/rgblight.c **** 
 277:quantum/rgblight.c **** void rgblight_increase_hue(void) {
 278:quantum/rgblight.c ****   uint16_t hue;
 279:quantum/rgblight.c ****   hue = (rgblight_config.hue+RGBLIGHT_HUE_STEP) % 360;
 280:quantum/rgblight.c ****   rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
 281:quantum/rgblight.c **** }
 282:quantum/rgblight.c **** void rgblight_decrease_hue(void) {
 283:quantum/rgblight.c ****   uint16_t hue;
 284:quantum/rgblight.c ****   if (rgblight_config.hue-RGBLIGHT_HUE_STEP < 0) {
 285:quantum/rgblight.c ****     hue = (rgblight_config.hue + 360 - RGBLIGHT_HUE_STEP) % 360;
 286:quantum/rgblight.c ****   } else {
 287:quantum/rgblight.c ****     hue = (rgblight_config.hue - RGBLIGHT_HUE_STEP) % 360;
 288:quantum/rgblight.c ****   }
 289:quantum/rgblight.c ****   rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
 290:quantum/rgblight.c **** }
 291:quantum/rgblight.c **** void rgblight_increase_sat(void) {
 292:quantum/rgblight.c ****   uint8_t sat;
 293:quantum/rgblight.c ****   if (rgblight_config.sat + RGBLIGHT_SAT_STEP > 255) {
 294:quantum/rgblight.c ****     sat = 255;
 295:quantum/rgblight.c ****   } else {
 296:quantum/rgblight.c ****     sat = rgblight_config.sat + RGBLIGHT_SAT_STEP;
 297:quantum/rgblight.c ****   }
 298:quantum/rgblight.c ****   rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
 299:quantum/rgblight.c **** }
 300:quantum/rgblight.c **** void rgblight_decrease_sat(void) {
 301:quantum/rgblight.c ****   uint8_t sat;
 302:quantum/rgblight.c ****   if (rgblight_config.sat - RGBLIGHT_SAT_STEP < 0) {
 303:quantum/rgblight.c ****     sat = 0;
 304:quantum/rgblight.c ****   } else {
 305:quantum/rgblight.c ****     sat = rgblight_config.sat - RGBLIGHT_SAT_STEP;
 306:quantum/rgblight.c ****   }
 307:quantum/rgblight.c ****   rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
 308:quantum/rgblight.c **** }
 309:quantum/rgblight.c **** void rgblight_increase_val(void) {
 310:quantum/rgblight.c ****   uint8_t val;
 311:quantum/rgblight.c ****   if (rgblight_config.val + RGBLIGHT_VAL_STEP > 255) {
 312:quantum/rgblight.c ****     val = 255;
 313:quantum/rgblight.c ****   } else {
 314:quantum/rgblight.c ****     val = rgblight_config.val + RGBLIGHT_VAL_STEP;
 315:quantum/rgblight.c ****   }
 316:quantum/rgblight.c ****   rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
 317:quantum/rgblight.c **** }
 318:quantum/rgblight.c **** void rgblight_decrease_val(void) {
 319:quantum/rgblight.c ****   uint8_t val;
 320:quantum/rgblight.c ****   if (rgblight_config.val - RGBLIGHT_VAL_STEP < 0) {
 321:quantum/rgblight.c ****     val = 0;
 322:quantum/rgblight.c ****   } else {
 323:quantum/rgblight.c ****     val = rgblight_config.val - RGBLIGHT_VAL_STEP;
 324:quantum/rgblight.c ****   }
 325:quantum/rgblight.c ****   rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
 326:quantum/rgblight.c **** }
 327:quantum/rgblight.c **** 
 328:quantum/rgblight.c **** void rgblight_sethsv_noeeprom(uint16_t hue, uint8_t sat, uint8_t val) {
 329:quantum/rgblight.c ****   inmem_config.raw = rgblight_config.raw;
 330:quantum/rgblight.c ****   if (rgblight_config.enable) {
 331:quantum/rgblight.c ****     LED_TYPE tmp_led;
 332:quantum/rgblight.c ****     sethsv(hue, sat, val, &tmp_led);
 333:quantum/rgblight.c ****     inmem_config.hue = hue;
 334:quantum/rgblight.c ****     inmem_config.sat = sat;
 335:quantum/rgblight.c ****     inmem_config.val = val;
 336:quantum/rgblight.c ****     // dprintf("rgblight set hue [MEMORY]: %u,%u,%u\n", inmem_config.hue, inmem_config.sat, inmem_c
 337:quantum/rgblight.c ****     rgblight_setrgb(tmp_led.r, tmp_led.g, tmp_led.b);
 338:quantum/rgblight.c ****   }
 339:quantum/rgblight.c **** }
 340:quantum/rgblight.c **** void rgblight_sethsv(uint16_t hue, uint8_t sat, uint8_t val) {
 341:quantum/rgblight.c ****   if (rgblight_config.enable) {
 342:quantum/rgblight.c ****     if (rgblight_config.mode == 1) {
 343:quantum/rgblight.c ****       // same static color
 344:quantum/rgblight.c ****       rgblight_sethsv_noeeprom(hue, sat, val);
 345:quantum/rgblight.c ****     } else {
 346:quantum/rgblight.c ****       // all LEDs in same color
 347:quantum/rgblight.c ****       if (rgblight_config.mode >= 2 && rgblight_config.mode <= 5) {
 348:quantum/rgblight.c ****         // breathing mode, ignore the change of val, use in memory value instead
 349:quantum/rgblight.c ****         val = rgblight_config.val;
 350:quantum/rgblight.c ****       } else if (rgblight_config.mode >= 6 && rgblight_config.mode <= 14) {
 351:quantum/rgblight.c ****         // rainbow mood and rainbow swirl, ignore the change of hue
 352:quantum/rgblight.c ****         hue = rgblight_config.hue;
 353:quantum/rgblight.c ****       }
 354:quantum/rgblight.c ****     }
 355:quantum/rgblight.c ****     rgblight_config.hue = hue;
 356:quantum/rgblight.c ****     rgblight_config.sat = sat;
 357:quantum/rgblight.c ****     rgblight_config.val = val;
 358:quantum/rgblight.c ****     eeconfig_update_rgblight(rgblight_config.raw);
 359:quantum/rgblight.c ****     xprintf("rgblight set hsv [EEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.sat, rgbl
 360:quantum/rgblight.c ****   }
 361:quantum/rgblight.c **** }
 362:quantum/rgblight.c **** 
 363:quantum/rgblight.c **** void rgblight_setrgb(uint8_t r, uint8_t g, uint8_t b) {
 364:quantum/rgblight.c ****   // dprintf("rgblight set rgb: %u,%u,%u\n", r,g,b);
 365:quantum/rgblight.c ****   for (uint8_t i = 0; i < RGBLED_NUM; i++) {
 366:quantum/rgblight.c ****     led[i].r = r;
 367:quantum/rgblight.c ****     led[i].g = g;
 368:quantum/rgblight.c ****     led[i].b = b;
 369:quantum/rgblight.c ****   }
 370:quantum/rgblight.c ****   rgblight_set();
 371:quantum/rgblight.c **** }
 372:quantum/rgblight.c **** 
 373:quantum/rgblight.c **** __attribute__ ((weak))
 374:quantum/rgblight.c **** void rgblight_set(void) {
 377               		.loc 1 374 0
 378               		.cfi_startproc
 379               	/* prologue: function */
 380               	/* frame size = 0 */
 381               	/* stack size = 0 */
 382               	.L__stack_usage = 0
 375:quantum/rgblight.c ****   if (rgblight_config.enable) {
 383               		.loc 1 375 0
 384 0000 8091 0000 		lds r24,rgblight_config
 385 0004 80FD      		sbrc r24,0
 386 0006 00C0      		rjmp .L20
 387               	.LVL39:
 388               	.LBB14:
 376:quantum/rgblight.c ****     #ifdef RGBW
 377:quantum/rgblight.c ****       ws2812_setleds_rgbw(led, RGBLED_NUM);
 378:quantum/rgblight.c ****     #else
 379:quantum/rgblight.c ****       ws2812_setleds(led, RGBLED_NUM);
 380:quantum/rgblight.c ****     #endif
 381:quantum/rgblight.c ****   } else {
 382:quantum/rgblight.c ****     for (uint8_t i = 0; i < RGBLED_NUM; i++) {
 383:quantum/rgblight.c ****       led[i].r = 0;
 389               		.loc 1 383 0 discriminator 1
 390 0008 1092 0000 		sts led+1,__zero_reg__
 384:quantum/rgblight.c ****       led[i].g = 0;
 391               		.loc 1 384 0 discriminator 1
 392 000c 1092 0000 		sts led,__zero_reg__
 385:quantum/rgblight.c ****       led[i].b = 0;
 393               		.loc 1 385 0 discriminator 1
 394 0010 1092 0000 		sts led+2,__zero_reg__
 395               	.LVL40:
 383:quantum/rgblight.c ****       led[i].g = 0;
 396               		.loc 1 383 0 discriminator 1
 397 0014 1092 0000 		sts led+4,__zero_reg__
 384:quantum/rgblight.c ****       led[i].g = 0;
 398               		.loc 1 384 0 discriminator 1
 399 0018 1092 0000 		sts led+3,__zero_reg__
 400               		.loc 1 385 0 discriminator 1
 401 001c 1092 0000 		sts led+5,__zero_reg__
 402               	.LVL41:
 403               	.L20:
 404               	.LBE14:
 379:quantum/rgblight.c ****     #endif
 405               		.loc 1 379 0
 406 0020 62E0      		ldi r22,lo8(2)
 407 0022 70E0      		ldi r23,0
 408 0024 80E0      		ldi r24,lo8(led)
 409 0026 90E0      		ldi r25,hi8(led)
 410 0028 0C94 0000 		jmp ws2812_setleds
 411               	.LVL42:
 412               		.cfi_endproc
 413               	.LFE30:
 415               		.section	.text.rgblight_setrgb,"ax",@progbits
 416               	.global	rgblight_setrgb
 418               	rgblight_setrgb:
 419               	.LFB29:
 363:quantum/rgblight.c ****   // dprintf("rgblight set rgb: %u,%u,%u\n", r,g,b);
 420               		.loc 1 363 0
 421               		.cfi_startproc
 422               	.LVL43:
 423               	/* prologue: function */
 424               	/* frame size = 0 */
 425               	/* stack size = 0 */
 426               	.L__stack_usage = 0
 427               	.LBB15:
 366:quantum/rgblight.c ****     led[i].g = g;
 428               		.loc 1 366 0
 429 0000 E0E0      		ldi r30,lo8(led)
 430 0002 F0E0      		ldi r31,hi8(led)
 431 0004 8183      		std Z+1,r24
 367:quantum/rgblight.c ****     led[i].b = b;
 432               		.loc 1 367 0
 433 0006 6083      		st Z,r22
 368:quantum/rgblight.c ****   }
 434               		.loc 1 368 0
 435 0008 4283      		std Z+2,r20
 436               	.LVL44:
 366:quantum/rgblight.c ****     led[i].g = g;
 437               		.loc 1 366 0
 438 000a 8483      		std Z+4,r24
 367:quantum/rgblight.c ****     led[i].b = b;
 439               		.loc 1 367 0
 440 000c 6383      		std Z+3,r22
 368:quantum/rgblight.c ****   }
 441               		.loc 1 368 0
 442 000e 4583      		std Z+5,r20
 443               	.LVL45:
 444               	.LBE15:
 370:quantum/rgblight.c **** }
 445               		.loc 1 370 0
 446 0010 0C94 0000 		jmp rgblight_set
 447               	.LVL46:
 448               		.cfi_endproc
 449               	.LFE29:
 451               		.section	.text.rgblight_sethsv_noeeprom,"ax",@progbits
 452               	.global	rgblight_sethsv_noeeprom
 454               	rgblight_sethsv_noeeprom:
 455               	.LFB27:
 328:quantum/rgblight.c ****   inmem_config.raw = rgblight_config.raw;
 456               		.loc 1 328 0
 457               		.cfi_startproc
 458               	.LVL47:
 459 0000 EF92      		push r14
 460               	.LCFI6:
 461               		.cfi_def_cfa_offset 3
 462               		.cfi_offset 14, -2
 463 0002 FF92      		push r15
 464               	.LCFI7:
 465               		.cfi_def_cfa_offset 4
 466               		.cfi_offset 15, -3
 467 0004 0F93      		push r16
 468               	.LCFI8:
 469               		.cfi_def_cfa_offset 5
 470               		.cfi_offset 16, -4
 471 0006 1F93      		push r17
 472               	.LCFI9:
 473               		.cfi_def_cfa_offset 6
 474               		.cfi_offset 17, -5
 475 0008 CF93      		push r28
 476               	.LCFI10:
 477               		.cfi_def_cfa_offset 7
 478               		.cfi_offset 28, -6
 479 000a DF93      		push r29
 480               	.LCFI11:
 481               		.cfi_def_cfa_offset 8
 482               		.cfi_offset 29, -7
 483 000c 00D0      		rcall .
 484 000e 1F92      		push __zero_reg__
 485               	.LCFI12:
 486               		.cfi_def_cfa_offset 11
 487 0010 CDB7      		in r28,__SP_L__
 488 0012 DEB7      		in r29,__SP_H__
 489               	.LCFI13:
 490               		.cfi_def_cfa_register 28
 491               	/* prologue: function */
 492               	/* frame size = 3 */
 493               	/* stack size = 9 */
 494               	.L__stack_usage = 9
 329:quantum/rgblight.c ****   if (rgblight_config.enable) {
 495               		.loc 1 329 0
 496 0014 0091 0000 		lds r16,rgblight_config
 497 0018 1091 0000 		lds r17,rgblight_config+1
 498 001c 2091 0000 		lds r18,rgblight_config+2
 499 0020 3091 0000 		lds r19,rgblight_config+3
 500 0024 0093 0000 		sts inmem_config,r16
 501 0028 1093 0000 		sts inmem_config+1,r17
 502 002c 2093 0000 		sts inmem_config+2,r18
 503 0030 3093 0000 		sts inmem_config+3,r19
 330:quantum/rgblight.c ****     LED_TYPE tmp_led;
 504               		.loc 1 330 0
 505 0034 2091 0000 		lds r18,rgblight_config
 506 0038 20FF      		sbrs r18,0
 507 003a 00C0      		rjmp .L22
 508 003c 042F      		mov r16,r20
 509 003e F62E      		mov r15,r22
 510 0040 E92E      		mov r14,r25
 511 0042 182F      		mov r17,r24
 512               	.LBB16:
 332:quantum/rgblight.c ****     inmem_config.hue = hue;
 513               		.loc 1 332 0
 514 0044 9E01      		movw r18,r28
 515 0046 2F5F      		subi r18,-1
 516 0048 3F4F      		sbci r19,-1
 517 004a 0E94 0000 		call sethsv
 518               	.LVL48:
 333:quantum/rgblight.c ****     inmem_config.sat = sat;
 519               		.loc 1 333 0
 520 004e 8091 0000 		lds r24,inmem_config
 521 0052 10FB      		bst r17,0
 522 0054 87F9      		bld r24,7
 523 0056 8093 0000 		sts inmem_config,r24
 524 005a 1695      		lsr r17
 525 005c 8091 0000 		lds r24,inmem_config+1
 526 0060 8078      		andi r24,lo8(-128)
 527 0062 182B      		or r17,r24
 528 0064 E0FA      		bst r14,0
 529 0066 17F9      		bld r17,7
 530 0068 1093 0000 		sts inmem_config+1,r17
 334:quantum/rgblight.c ****     inmem_config.val = val;
 531               		.loc 1 334 0
 532 006c F092 0000 		sts inmem_config+2,r15
 335:quantum/rgblight.c ****     // dprintf("rgblight set hue [MEMORY]: %u,%u,%u\n", inmem_config.hue, inmem_config.sat, inmem_c
 533               		.loc 1 335 0
 534 0070 0093 0000 		sts inmem_config+3,r16
 337:quantum/rgblight.c ****   }
 535               		.loc 1 337 0
 536 0074 4B81      		ldd r20,Y+3
 537 0076 6981      		ldd r22,Y+1
 538 0078 8A81      		ldd r24,Y+2
 539 007a 0E94 0000 		call rgblight_setrgb
 540               	.LVL49:
 541               	.L22:
 542               	/* epilogue start */
 543               	.LBE16:
 339:quantum/rgblight.c **** void rgblight_sethsv(uint16_t hue, uint8_t sat, uint8_t val) {
 544               		.loc 1 339 0
 545 007e 0F90      		pop __tmp_reg__
 546 0080 0F90      		pop __tmp_reg__
 547 0082 0F90      		pop __tmp_reg__
 548 0084 DF91      		pop r29
 549 0086 CF91      		pop r28
 550 0088 1F91      		pop r17
 551 008a 0F91      		pop r16
 552 008c FF90      		pop r15
 553 008e EF90      		pop r14
 554 0090 0895      		ret
 555               		.cfi_endproc
 556               	.LFE27:
 558               		.section	.text.rgblight_sethsv,"ax",@progbits
 559               	.global	rgblight_sethsv
 561               	rgblight_sethsv:
 562               	.LFB28:
 340:quantum/rgblight.c ****   if (rgblight_config.enable) {
 563               		.loc 1 340 0
 564               		.cfi_startproc
 565               	.LVL50:
 566 0000 0F93      		push r16
 567               	.LCFI14:
 568               		.cfi_def_cfa_offset 3
 569               		.cfi_offset 16, -2
 570 0002 1F93      		push r17
 571               	.LCFI15:
 572               		.cfi_def_cfa_offset 4
 573               		.cfi_offset 17, -3
 574 0004 CF93      		push r28
 575               	.LCFI16:
 576               		.cfi_def_cfa_offset 5
 577               		.cfi_offset 28, -4
 578 0006 DF93      		push r29
 579               	.LCFI17:
 580               		.cfi_def_cfa_offset 6
 581               		.cfi_offset 29, -5
 582               	/* prologue: function */
 583               	/* frame size = 0 */
 584               	/* stack size = 4 */
 585               	.L__stack_usage = 4
 586 0008 EC01      		movw r28,r24
 587 000a 062F      		mov r16,r22
 588 000c 142F      		mov r17,r20
 341:quantum/rgblight.c ****     if (rgblight_config.mode == 1) {
 589               		.loc 1 341 0
 590 000e 9091 0000 		lds r25,rgblight_config
 591 0012 90FF      		sbrs r25,0
 592 0014 00C0      		rjmp .L27
 342:quantum/rgblight.c ****       // same static color
 593               		.loc 1 342 0
 594 0016 892F      		mov r24,r25
 595               	.LVL51:
 596 0018 8E77      		andi r24,lo8(126)
 597 001a 8230      		cpi r24,lo8(2)
 598 001c 01F4      		brne .L29
 344:quantum/rgblight.c ****     } else {
 599               		.loc 1 344 0
 600 001e CE01      		movw r24,r28
 601 0020 0E94 0000 		call rgblight_sethsv_noeeprom
 602               	.LVL52:
 603 0024 00C0      		rjmp .L30
 604               	.L29:
 347:quantum/rgblight.c ****         // breathing mode, ignore the change of val, use in memory value instead
 605               		.loc 1 347 0
 606 0026 892F      		mov r24,r25
 607 0028 8695      		lsr r24
 608 002a 8F73      		andi r24,lo8(63)
 609 002c 2EE3      		ldi r18,lo8(62)
 610 002e 280F      		add r18,r24
 611 0030 2F73      		andi r18,lo8(63)
 612 0032 2430      		cpi r18,lo8(4)
 613 0034 00F4      		brsh .L31
 349:quantum/rgblight.c ****       } else if (rgblight_config.mode >= 6 && rgblight_config.mode <= 14) {
 614               		.loc 1 349 0
 615 0036 1091 0000 		lds r17,rgblight_config+3
 616               	.LVL53:
 617 003a 00C0      		rjmp .L30
 618               	.L31:
 350:quantum/rgblight.c ****         // rainbow mood and rainbow swirl, ignore the change of hue
 619               		.loc 1 350 0
 620 003c 865C      		subi r24,lo8(-(58))
 621 003e 8F73      		andi r24,lo8(63)
 622 0040 8930      		cpi r24,lo8(9)
 623 0042 00F4      		brsh .L30
 352:quantum/rgblight.c ****       }
 624               		.loc 1 352 0
 625 0044 C92F      		mov r28,r25
 626               	.LVL54:
 627 0046 CC1F      		rol r28
 628 0048 CC27      		clr r28
 629 004a CC1F      		rol r28
 630 004c D091 0000 		lds r29,rgblight_config+1
 631 0050 8D2F      		mov r24,r29
 632 0052 880F      		lsl r24
 633 0054 C82B      		or r28,r24
 634 0056 D7FB      		bst r29,7
 635 0058 DD27      		clr r29
 636 005a D0F9      		bld r29,0
 637               	.LVL55:
 638               	.L30:
 355:quantum/rgblight.c ****     rgblight_config.sat = sat;
 639               		.loc 1 355 0
 640 005c 8091 0000 		lds r24,rgblight_config
 641 0060 C0FB      		bst r28,0
 642 0062 87F9      		bld r24,7
 643 0064 8093 0000 		sts rgblight_config,r24
 644 0068 C695      		lsr r28
 645               	.LVL56:
 646 006a 8091 0000 		lds r24,rgblight_config+1
 647 006e 8078      		andi r24,lo8(-128)
 648 0070 C82B      		or r28,r24
 649 0072 D0FB      		bst r29,0
 650 0074 C7F9      		bld r28,7
 651 0076 C093 0000 		sts rgblight_config+1,r28
 356:quantum/rgblight.c ****     rgblight_config.val = val;
 652               		.loc 1 356 0
 653 007a 0093 0000 		sts rgblight_config+2,r16
 357:quantum/rgblight.c ****     eeconfig_update_rgblight(rgblight_config.raw);
 654               		.loc 1 357 0
 655 007e 1093 0000 		sts rgblight_config+3,r17
 358:quantum/rgblight.c ****     xprintf("rgblight set hsv [EEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.sat, rgbl
 656               		.loc 1 358 0
 657 0082 6091 0000 		lds r22,rgblight_config
 658 0086 7091 0000 		lds r23,rgblight_config+1
 659 008a 8091 0000 		lds r24,rgblight_config+2
 660 008e 9091 0000 		lds r25,rgblight_config+3
 661               	/* epilogue start */
 361:quantum/rgblight.c **** 
 662               		.loc 1 361 0
 663 0092 DF91      		pop r29
 664 0094 CF91      		pop r28
 665 0096 1F91      		pop r17
 666               	.LVL57:
 667 0098 0F91      		pop r16
 668               	.LVL58:
 358:quantum/rgblight.c ****     xprintf("rgblight set hsv [EEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.sat, rgbl
 669               		.loc 1 358 0
 670 009a 0C94 0000 		jmp eeconfig_update_rgblight
 671               	.LVL59:
 672               	.L27:
 673               	/* epilogue start */
 361:quantum/rgblight.c **** 
 674               		.loc 1 361 0
 675 009e DF91      		pop r29
 676 00a0 CF91      		pop r28
 677 00a2 1F91      		pop r17
 678               	.LVL60:
 679 00a4 0F91      		pop r16
 680               	.LVL61:
 681 00a6 0895      		ret
 682               		.cfi_endproc
 683               	.LFE28:
 685               		.section	.text.rgblight_increase_hue,"ax",@progbits
 686               	.global	rgblight_increase_hue
 688               	rgblight_increase_hue:
 689               	.LFB21:
 277:quantum/rgblight.c ****   uint16_t hue;
 690               		.loc 1 277 0
 691               		.cfi_startproc
 692               	/* prologue: function */
 693               	/* frame size = 0 */
 694               	/* stack size = 0 */
 695               	.L__stack_usage = 0
 696               	.LVL62:
 280:quantum/rgblight.c **** }
 697               		.loc 1 280 0
 698 0000 E0E0      		ldi r30,lo8(rgblight_config)
 699 0002 F0E0      		ldi r31,hi8(rgblight_config)
 700               	.LVL63:
 279:quantum/rgblight.c ****   rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
 701               		.loc 1 279 0
 702 0004 2081      		ld r18,Z
 703 0006 221F      		rol r18
 704 0008 2227      		clr r18
 705 000a 221F      		rol r18
 706 000c 3091 0000 		lds r19,rgblight_config+1
 707 0010 432F      		mov r20,r19
 708 0012 440F      		lsl r20
 709 0014 842F      		mov r24,r20
 710 0016 822B      		or r24,r18
 711 0018 37FB      		bst r19,7
 712 001a 9927      		clr r25
 713 001c 90F9      		bld r25,0
 280:quantum/rgblight.c **** }
 714               		.loc 1 280 0
 715 001e 0896      		adiw r24,8
 716 0020 68E6      		ldi r22,lo8(104)
 717 0022 71E0      		ldi r23,lo8(1)
 718 0024 0E94 0000 		call __divmodhi4
 719 0028 4381      		ldd r20,Z+3
 720 002a 6281      		ldd r22,Z+2
 721 002c 0C94 0000 		jmp rgblight_sethsv
 722               	.LVL64:
 723               		.cfi_endproc
 724               	.LFE21:
 726               		.section	.text.rgblight_decrease_hue,"ax",@progbits
 727               	.global	rgblight_decrease_hue
 729               	rgblight_decrease_hue:
 730               	.LFB22:
 282:quantum/rgblight.c ****   uint16_t hue;
 731               		.loc 1 282 0
 732               		.cfi_startproc
 733               	/* prologue: function */
 734               	/* frame size = 0 */
 735               	/* stack size = 0 */
 736               	.L__stack_usage = 0
 284:quantum/rgblight.c ****     hue = (rgblight_config.hue + 360 - RGBLIGHT_HUE_STEP) % 360;
 737               		.loc 1 284 0
 738 0000 2091 0000 		lds r18,rgblight_config
 739 0004 221F      		rol r18
 740 0006 2227      		clr r18
 741 0008 221F      		rol r18
 742 000a 3091 0000 		lds r19,rgblight_config+1
 743 000e 432F      		mov r20,r19
 744 0010 440F      		lsl r20
 745 0012 842F      		mov r24,r20
 746 0014 822B      		or r24,r18
 747 0016 37FB      		bst r19,7
 748 0018 9927      		clr r25
 749 001a 90F9      		bld r25,0
 750 001c 8830      		cpi r24,8
 751 001e 9105      		cpc r25,__zero_reg__
 752 0020 04F4      		brge .L34
 285:quantum/rgblight.c ****   } else {
 753               		.loc 1 285 0
 754 0022 805A      		subi r24,-96
 755 0024 9E4F      		sbci r25,-2
 756               	.LVL65:
 757 0026 00C0      		rjmp .L35
 758               	.LVL66:
 759               	.L34:
 287:quantum/rgblight.c ****   }
 760               		.loc 1 287 0
 761 0028 0897      		sbiw r24,8
 762 002a 68E6      		ldi r22,lo8(104)
 763 002c 71E0      		ldi r23,lo8(1)
 764 002e 0E94 0000 		call __divmodhi4
 765               	.LVL67:
 766               	.L35:
 289:quantum/rgblight.c **** }
 767               		.loc 1 289 0
 768 0032 4091 0000 		lds r20,rgblight_config+3
 769 0036 6091 0000 		lds r22,rgblight_config+2
 770 003a 0C94 0000 		jmp rgblight_sethsv
 771               	.LVL68:
 772               		.cfi_endproc
 773               	.LFE22:
 775               		.section	.text.rgblight_increase_sat,"ax",@progbits
 776               	.global	rgblight_increase_sat
 778               	rgblight_increase_sat:
 779               	.LFB23:
 291:quantum/rgblight.c ****   uint8_t sat;
 780               		.loc 1 291 0
 781               		.cfi_startproc
 782               	/* prologue: function */
 783               	/* frame size = 0 */
 784               	/* stack size = 0 */
 785               	.L__stack_usage = 0
 293:quantum/rgblight.c ****     sat = 255;
 786               		.loc 1 293 0
 787 0000 6091 0000 		lds r22,rgblight_config+2
 788 0004 862F      		mov r24,r22
 789 0006 90E0      		ldi r25,0
 790 0008 883F      		cpi r24,-8
 791 000a 9105      		cpc r25,__zero_reg__
 792 000c 04F4      		brge .L38
 296:quantum/rgblight.c ****   }
 793               		.loc 1 296 0
 794 000e 685F      		subi r22,lo8(-(8))
 795               	.LVL69:
 796 0010 00C0      		rjmp .L37
 797               	.LVL70:
 798               	.L38:
 294:quantum/rgblight.c ****   } else {
 799               		.loc 1 294 0
 800 0012 6FEF      		ldi r22,lo8(-1)
 801               	.L37:
 802               	.LVL71:
 298:quantum/rgblight.c **** }
 803               		.loc 1 298 0
 804 0014 8091 0000 		lds r24,rgblight_config
 805 0018 881F      		rol r24
 806 001a 8827      		clr r24
 807 001c 881F      		rol r24
 808 001e 9091 0000 		lds r25,rgblight_config+1
 809 0022 292F      		mov r18,r25
 810 0024 220F      		lsl r18
 811 0026 97FB      		bst r25,7
 812 0028 9927      		clr r25
 813 002a 90F9      		bld r25,0
 814 002c 4091 0000 		lds r20,rgblight_config+3
 815 0030 822B      		or r24,r18
 816 0032 0C94 0000 		jmp rgblight_sethsv
 817               	.LVL72:
 818               		.cfi_endproc
 819               	.LFE23:
 821               		.section	.text.rgblight_decrease_sat,"ax",@progbits
 822               	.global	rgblight_decrease_sat
 824               	rgblight_decrease_sat:
 825               	.LFB24:
 300:quantum/rgblight.c ****   uint8_t sat;
 826               		.loc 1 300 0
 827               		.cfi_startproc
 828               	/* prologue: function */
 829               	/* frame size = 0 */
 830               	/* stack size = 0 */
 831               	.L__stack_usage = 0
 302:quantum/rgblight.c ****     sat = 0;
 832               		.loc 1 302 0
 833 0000 6091 0000 		lds r22,rgblight_config+2
 834 0004 862F      		mov r24,r22
 835 0006 90E0      		ldi r25,0
 836 0008 0897      		sbiw r24,8
 837 000a 04F0      		brlt .L41
 305:quantum/rgblight.c ****   }
 838               		.loc 1 305 0
 839 000c 6850      		subi r22,lo8(-(-8))
 840               	.LVL73:
 841 000e 00C0      		rjmp .L40
 842               	.LVL74:
 843               	.L41:
 303:quantum/rgblight.c ****   } else {
 844               		.loc 1 303 0
 845 0010 60E0      		ldi r22,0
 846               	.L40:
 847               	.LVL75:
 307:quantum/rgblight.c **** }
 848               		.loc 1 307 0
 849 0012 8091 0000 		lds r24,rgblight_config
 850 0016 881F      		rol r24
 851 0018 8827      		clr r24
 852 001a 881F      		rol r24
 853 001c 9091 0000 		lds r25,rgblight_config+1
 854 0020 292F      		mov r18,r25
 855 0022 220F      		lsl r18
 856 0024 97FB      		bst r25,7
 857 0026 9927      		clr r25
 858 0028 90F9      		bld r25,0
 859 002a 4091 0000 		lds r20,rgblight_config+3
 860 002e 822B      		or r24,r18
 861 0030 0C94 0000 		jmp rgblight_sethsv
 862               	.LVL76:
 863               		.cfi_endproc
 864               	.LFE24:
 866               		.section	.text.rgblight_increase_val,"ax",@progbits
 867               	.global	rgblight_increase_val
 869               	rgblight_increase_val:
 870               	.LFB25:
 309:quantum/rgblight.c ****   uint8_t val;
 871               		.loc 1 309 0
 872               		.cfi_startproc
 873               	/* prologue: function */
 874               	/* frame size = 0 */
 875               	/* stack size = 0 */
 876               	.L__stack_usage = 0
 311:quantum/rgblight.c ****     val = 255;
 877               		.loc 1 311 0
 878 0000 4091 0000 		lds r20,rgblight_config+3
 879 0004 842F      		mov r24,r20
 880 0006 90E0      		ldi r25,0
 881 0008 883F      		cpi r24,-8
 882 000a 9105      		cpc r25,__zero_reg__
 883 000c 04F4      		brge .L44
 314:quantum/rgblight.c ****   }
 884               		.loc 1 314 0
 885 000e 485F      		subi r20,lo8(-(8))
 886               	.LVL77:
 887 0010 00C0      		rjmp .L43
 888               	.LVL78:
 889               	.L44:
 312:quantum/rgblight.c ****   } else {
 890               		.loc 1 312 0
 891 0012 4FEF      		ldi r20,lo8(-1)
 892               	.L43:
 893               	.LVL79:
 316:quantum/rgblight.c **** }
 894               		.loc 1 316 0
 895 0014 8091 0000 		lds r24,rgblight_config
 896 0018 881F      		rol r24
 897 001a 8827      		clr r24
 898 001c 881F      		rol r24
 899 001e 9091 0000 		lds r25,rgblight_config+1
 900 0022 292F      		mov r18,r25
 901 0024 220F      		lsl r18
 902 0026 97FB      		bst r25,7
 903 0028 9927      		clr r25
 904 002a 90F9      		bld r25,0
 905 002c 6091 0000 		lds r22,rgblight_config+2
 906 0030 822B      		or r24,r18
 907 0032 0C94 0000 		jmp rgblight_sethsv
 908               	.LVL80:
 909               		.cfi_endproc
 910               	.LFE25:
 912               		.section	.text.rgblight_decrease_val,"ax",@progbits
 913               	.global	rgblight_decrease_val
 915               	rgblight_decrease_val:
 916               	.LFB26:
 318:quantum/rgblight.c ****   uint8_t val;
 917               		.loc 1 318 0
 918               		.cfi_startproc
 919               	/* prologue: function */
 920               	/* frame size = 0 */
 921               	/* stack size = 0 */
 922               	.L__stack_usage = 0
 320:quantum/rgblight.c ****     val = 0;
 923               		.loc 1 320 0
 924 0000 4091 0000 		lds r20,rgblight_config+3
 925 0004 842F      		mov r24,r20
 926 0006 90E0      		ldi r25,0
 927 0008 0897      		sbiw r24,8
 928 000a 04F0      		brlt .L47
 323:quantum/rgblight.c ****   }
 929               		.loc 1 323 0
 930 000c 4850      		subi r20,lo8(-(-8))
 931               	.LVL81:
 932 000e 00C0      		rjmp .L46
 933               	.LVL82:
 934               	.L47:
 321:quantum/rgblight.c ****   } else {
 935               		.loc 1 321 0
 936 0010 40E0      		ldi r20,0
 937               	.L46:
 938               	.LVL83:
 325:quantum/rgblight.c **** }
 939               		.loc 1 325 0
 940 0012 8091 0000 		lds r24,rgblight_config
 941 0016 881F      		rol r24
 942 0018 8827      		clr r24
 943 001a 881F      		rol r24
 944 001c 9091 0000 		lds r25,rgblight_config+1
 945 0020 292F      		mov r18,r25
 946 0022 220F      		lsl r18
 947 0024 97FB      		bst r25,7
 948 0026 9927      		clr r25
 949 0028 90F9      		bld r25,0
 950 002a 6091 0000 		lds r22,rgblight_config+2
 951 002e 822B      		or r24,r18
 952 0030 0C94 0000 		jmp rgblight_sethsv
 953               	.LVL84:
 954               		.cfi_endproc
 955               	.LFE26:
 957               		.section	.text.rgblight_mode,"ax",@progbits
 958               	.global	rgblight_mode
 960               	rgblight_mode:
 961               	.LFB18:
 223:quantum/rgblight.c ****   if (!rgblight_config.enable) {
 962               		.loc 1 223 0
 963               		.cfi_startproc
 964               	.LVL85:
 965               	/* prologue: function */
 966               	/* frame size = 0 */
 967               	/* stack size = 0 */
 968               	.L__stack_usage = 0
 224:quantum/rgblight.c ****     return;
 969               		.loc 1 224 0
 970 0000 9091 0000 		lds r25,rgblight_config
 971 0004 90FF      		sbrs r25,0
 972 0006 00C0      		rjmp .L48
 973 0008 9178      		andi r25,lo8(-127)
 227:quantum/rgblight.c ****     rgblight_config.mode = 1;
 974               		.loc 1 227 0
 975 000a 8111      		cpse r24,__zero_reg__
 976 000c 00C0      		rjmp .L50
 228:quantum/rgblight.c ****   } else if (mode > RGBLIGHT_MODES) {
 977               		.loc 1 228 0
 978 000e 9260      		ori r25,lo8(2)
 979 0010 00C0      		rjmp .L55
 980               	.L50:
 229:quantum/rgblight.c ****     rgblight_config.mode = RGBLIGHT_MODES;
 981               		.loc 1 229 0
 982 0012 8931      		cpi r24,lo8(25)
 983 0014 00F0      		brlo .L52
 230:quantum/rgblight.c ****   } else {
 984               		.loc 1 230 0
 985 0016 9063      		ori r25,lo8(48)
 986 0018 00C0      		rjmp .L55
 987               	.L52:
 232:quantum/rgblight.c ****   }
 988               		.loc 1 232 0
 989 001a 8F73      		andi r24,lo8(63)
 990               	.LVL86:
 991 001c 880F      		lsl r24
 992 001e 982B      		or r25,r24
 993               	.L55:
 994 0020 9093 0000 		sts rgblight_config,r25
 234:quantum/rgblight.c ****   xprintf("rgblight mode: %u\n", rgblight_config.mode);
 995               		.loc 1 234 0
 996 0024 6091 0000 		lds r22,rgblight_config
 997 0028 7091 0000 		lds r23,rgblight_config+1
 998 002c 8091 0000 		lds r24,rgblight_config+2
 999 0030 9091 0000 		lds r25,rgblight_config+3
 1000 0034 0E94 0000 		call eeconfig_update_rgblight
 1001               	.LVL87:
 236:quantum/rgblight.c ****     #ifdef RGBLIGHT_ANIMATIONS
 1002               		.loc 1 236 0
 1003 0038 8091 0000 		lds r24,rgblight_config
 1004 003c 982F      		mov r25,r24
 1005 003e 9E77      		andi r25,lo8(126)
 1006 0040 9230      		cpi r25,lo8(2)
 1007 0042 01F4      		brne .L53
 1008               	.LBB21:
 1009               	.LBB22:
 386:quantum/rgblight.c ****     }
 387:quantum/rgblight.c ****     #ifdef RGBW
 388:quantum/rgblight.c ****       ws2812_setleds_rgbw(led, RGBLED_NUM);
 389:quantum/rgblight.c ****     #else
 390:quantum/rgblight.c ****       ws2812_setleds(led, RGBLED_NUM);
 391:quantum/rgblight.c ****     #endif
 392:quantum/rgblight.c ****   }
 393:quantum/rgblight.c **** }
 394:quantum/rgblight.c **** 
 395:quantum/rgblight.c **** #ifdef RGBLIGHT_ANIMATIONS
 396:quantum/rgblight.c **** 
 397:quantum/rgblight.c **** // Animation timer -- AVR Timer3
 398:quantum/rgblight.c **** void rgblight_timer_init(void) {
 399:quantum/rgblight.c ****   // static uint8_t rgblight_timer_is_init = 0;
 400:quantum/rgblight.c ****   // if (rgblight_timer_is_init) {
 401:quantum/rgblight.c ****   //   return;
 402:quantum/rgblight.c ****   // }
 403:quantum/rgblight.c ****   // rgblight_timer_is_init = 1;
 404:quantum/rgblight.c ****   // /* Timer 3 setup */
 405:quantum/rgblight.c ****   // TCCR3B = _BV(WGM32) // CTC mode OCR3A as TOP
 406:quantum/rgblight.c ****   //       | _BV(CS30); // Clock selelct: clk/1
 407:quantum/rgblight.c ****   // /* Set TOP value */
 408:quantum/rgblight.c ****   // uint8_t sreg = SREG;
 409:quantum/rgblight.c ****   // cli();
 410:quantum/rgblight.c ****   // OCR3AH = (RGBLED_TIMER_TOP >> 8) & 0xff;
 411:quantum/rgblight.c ****   // OCR3AL = RGBLED_TIMER_TOP & 0xff;
 412:quantum/rgblight.c ****   // SREG = sreg;
 413:quantum/rgblight.c **** 
 414:quantum/rgblight.c ****   rgblight_timer_enabled = true;
 415:quantum/rgblight.c **** }
 416:quantum/rgblight.c **** void rgblight_timer_enable(void) {
 417:quantum/rgblight.c ****   rgblight_timer_enabled = true;
 418:quantum/rgblight.c ****   dprintf("TIMER3 enabled.\n");
 419:quantum/rgblight.c **** }
 420:quantum/rgblight.c **** void rgblight_timer_disable(void) {
 421:quantum/rgblight.c ****   rgblight_timer_enabled = false;
 422:quantum/rgblight.c ****   dprintf("TIMER3 disabled.\n");
 423:quantum/rgblight.c **** }
 424:quantum/rgblight.c **** void rgblight_timer_toggle(void) {
 425:quantum/rgblight.c ****   rgblight_timer_enabled ^= rgblight_timer_enabled;
 1010               		.loc 1 425 0
 1011 0044 1092 0000 		sts rgblight_timer_enabled,__zero_reg__
 1012 0048 00C0      		rjmp .L54
 1013               	.L53:
 1014               	.LBE22:
 1015               	.LBE21:
 240:quantum/rgblight.c ****     // MODE 2-5, breathing
 1016               		.loc 1 240 0
 1017 004a 982F      		mov r25,r24
 1018 004c 9695      		lsr r25
 1019 004e 925C      		subi r25,lo8(-(62))
 1020 0050 9F73      		andi r25,lo8(63)
 1021 0052 9631      		cpi r25,lo8(22)
 1022 0054 00F4      		brsh .L54
 1023               	.LBB23:
 1024               	.LBB24:
 417:quantum/rgblight.c ****   dprintf("TIMER3 enabled.\n");
 1025               		.loc 1 417 0
 1026 0056 91E0      		ldi r25,lo8(1)
 1027 0058 9093 0000 		sts rgblight_timer_enabled,r25
 1028               	.L54:
 1029               	.LBE24:
 1030               	.LBE23:
 251:quantum/rgblight.c **** }
 1031               		.loc 1 251 0
 1032 005c 881F      		rol r24
 1033 005e 8827      		clr r24
 1034 0060 881F      		rol r24
 1035 0062 9091 0000 		lds r25,rgblight_config+1
 1036 0066 292F      		mov r18,r25
 1037 0068 220F      		lsl r18
 1038 006a 97FB      		bst r25,7
 1039 006c 9927      		clr r25
 1040 006e 90F9      		bld r25,0
 1041 0070 4091 0000 		lds r20,rgblight_config+3
 1042 0074 6091 0000 		lds r22,rgblight_config+2
 1043 0078 822B      		or r24,r18
 1044 007a 0C94 0000 		jmp rgblight_sethsv
 1045               	.LVL88:
 1046               	.L48:
 1047 007e 0895      		ret
 1048               		.cfi_endproc
 1049               	.LFE18:
 1051               		.section	.text.rgblight_init,"ax",@progbits
 1052               	.global	rgblight_init
 1054               	rgblight_init:
 1055               	.LFB13:
 159:quantum/rgblight.c ****   debug_enable = 1; // Debug ON!
 1056               		.loc 1 159 0
 1057               		.cfi_startproc
 1058               	/* prologue: function */
 1059               	/* frame size = 0 */
 1060               	/* stack size = 0 */
 1061               	.L__stack_usage = 0
 160:quantum/rgblight.c ****   dprintf("rgblight_init called.\n");
 1062               		.loc 1 160 0
 1063 0000 8091 0000 		lds r24,debug_config
 1064 0004 8160      		ori r24,lo8(1<<0)
 1065 0006 8093 0000 		sts debug_config,r24
 162:quantum/rgblight.c ****   dprintf("rgblight_init start!\n");
 1066               		.loc 1 162 0
 1067 000a 81E0      		ldi r24,lo8(1)
 1068 000c 8093 0000 		sts rgblight_inited,r24
 164:quantum/rgblight.c ****     dprintf("rgblight_init eeconfig is not enabled.\n");
 1069               		.loc 1 164 0
 1070 0010 0E94 0000 		call eeconfig_is_enabled
 1071               	.LVL89:
 1072 0014 8111      		cpse r24,__zero_reg__
 1073 0016 00C0      		rjmp .L57
 166:quantum/rgblight.c ****     eeconfig_update_rgblight_default();
 1074               		.loc 1 166 0
 1075 0018 0E94 0000 		call eeconfig_init
 1076               	.LVL90:
 167:quantum/rgblight.c ****   }
 1077               		.loc 1 167 0
 1078 001c 0E94 0000 		call eeconfig_update_rgblight_default
 1079               	.LVL91:
 1080               	.L57:
 169:quantum/rgblight.c ****   if (!rgblight_config.mode) {
 1081               		.loc 1 169 0
 1082 0020 0E94 0000 		call eeconfig_read_rgblight
 1083               	.LVL92:
 1084 0024 6093 0000 		sts rgblight_config,r22
 1085 0028 7093 0000 		sts rgblight_config+1,r23
 1086 002c 8093 0000 		sts rgblight_config+2,r24
 1087 0030 9093 0000 		sts rgblight_config+3,r25
 170:quantum/rgblight.c ****     dprintf("rgblight_init rgblight_config.mode = 0. Write default values to EEPROM.\n");
 1088               		.loc 1 170 0
 1089 0034 6E77      		andi r22,lo8(126)
 1090 0036 01F4      		brne .L58
 172:quantum/rgblight.c ****     rgblight_config.raw = eeconfig_read_rgblight();
 1091               		.loc 1 172 0
 1092 0038 0E94 0000 		call eeconfig_update_rgblight_default
 1093               	.LVL93:
 173:quantum/rgblight.c ****   }
 1094               		.loc 1 173 0
 1095 003c 0E94 0000 		call eeconfig_read_rgblight
 1096               	.LVL94:
 1097 0040 6093 0000 		sts rgblight_config,r22
 1098 0044 7093 0000 		sts rgblight_config+1,r23
 1099 0048 8093 0000 		sts rgblight_config+2,r24
 1100 004c 9093 0000 		sts rgblight_config+3,r25
 1101               	.L58:
 1102               	.LBB27:
 1103               	.LBB28:
 417:quantum/rgblight.c ****   dprintf("TIMER3 enabled.\n");
 1104               		.loc 1 417 0
 1105 0050 81E0      		ldi r24,lo8(1)
 1106 0052 8093 0000 		sts rgblight_timer_enabled,r24
 1107               	.LBE28:
 1108               	.LBE27:
 181:quantum/rgblight.c ****     rgblight_mode(rgblight_config.mode);
 1109               		.loc 1 181 0
 1110 0056 8091 0000 		lds r24,rgblight_config
 1111 005a 80FF      		sbrs r24,0
 1112 005c 00C0      		rjmp .L56
 182:quantum/rgblight.c ****   }
 1113               		.loc 1 182 0
 1114 005e 8695      		lsr r24
 1115 0060 8F73      		andi r24,lo8(63)
 1116 0062 0C94 0000 		jmp rgblight_mode
 1117               	.LVL95:
 1118               	.L56:
 1119 0066 0895      		ret
 1120               		.cfi_endproc
 1121               	.LFE13:
 1123               		.section	.text.rgblight_increase,"ax",@progbits
 1124               	.global	rgblight_increase
 1126               	rgblight_increase:
 1127               	.LFB15:
 199:quantum/rgblight.c ****   uint8_t mode = 0;
 1128               		.loc 1 199 0
 1129               		.cfi_startproc
 1130               	/* prologue: function */
 1131               	/* frame size = 0 */
 1132               	/* stack size = 0 */
 1133               	.L__stack_usage = 0
 1134               	.LVL96:
 201:quantum/rgblight.c ****     mode = rgblight_config.mode + 1;
 1135               		.loc 1 201 0
 1136 0000 8091 0000 		lds r24,rgblight_config
 1137 0004 8695      		lsr r24
 1138 0006 8F73      		andi r24,lo8(63)
 1139 0008 282F      		mov r18,r24
 1140 000a 30E0      		ldi r19,0
 1141 000c 2831      		cpi r18,24
 1142 000e 3105      		cpc r19,__zero_reg__
 1143 0010 04F4      		brge .L62
 202:quantum/rgblight.c ****   }
 1144               		.loc 1 202 0
 1145 0012 8F5F      		subi r24,lo8(-(1))
 1146               	.LVL97:
 1147 0014 00C0      		rjmp .L61
 1148               	.LVL98:
 1149               	.L62:
 200:quantum/rgblight.c ****   if (rgblight_config.mode < RGBLIGHT_MODES) {
 1150               		.loc 1 200 0
 1151 0016 80E0      		ldi r24,0
 1152               	.LVL99:
 1153               	.L61:
 204:quantum/rgblight.c **** }
 1154               		.loc 1 204 0
 1155 0018 0C94 0000 		jmp rgblight_mode
 1156               	.LVL100:
 1157               		.cfi_endproc
 1158               	.LFE15:
 1160               		.section	.text.rgblight_decrease,"ax",@progbits
 1161               	.global	rgblight_decrease
 1163               	rgblight_decrease:
 1164               	.LFB16:
 206:quantum/rgblight.c ****   uint8_t mode = 0;
 1165               		.loc 1 206 0
 1166               		.cfi_startproc
 1167               	/* prologue: function */
 1168               	/* frame size = 0 */
 1169               	/* stack size = 0 */
 1170               	.L__stack_usage = 0
 1171               	.LVL101:
 209:quantum/rgblight.c ****     mode = rgblight_config.mode - 1;
 1172               		.loc 1 209 0
 1173 0000 8091 0000 		lds r24,rgblight_config
 1174 0004 8695      		lsr r24
 1175 0006 8F73      		andi r24,lo8(63)
 1176 0008 282F      		mov r18,r24
 1177 000a 30E0      		ldi r19,0
 1178 000c 2230      		cpi r18,2
 1179 000e 3105      		cpc r19,__zero_reg__
 1180 0010 04F0      		brlt .L65
 210:quantum/rgblight.c ****   }
 1181               		.loc 1 210 0
 1182 0012 8150      		subi r24,lo8(-(-1))
 1183               	.LVL102:
 1184 0014 00C0      		rjmp .L64
 1185               	.LVL103:
 1186               	.L65:
 207:quantum/rgblight.c ****   // Mode will never be < 1. If it ever is, eeprom needs to be initialized.
 1187               		.loc 1 207 0
 1188 0016 80E0      		ldi r24,0
 1189               	.LVL104:
 1190               	.L64:
 212:quantum/rgblight.c **** }
 1191               		.loc 1 212 0
 1192 0018 0C94 0000 		jmp rgblight_mode
 1193               	.LVL105:
 1194               		.cfi_endproc
 1195               	.LFE16:
 1197               		.section	.text.rgblight_step,"ax",@progbits
 1198               	.global	rgblight_step
 1200               	rgblight_step:
 1201               	.LFB17:
 214:quantum/rgblight.c ****   uint8_t mode = 0;
 1202               		.loc 1 214 0
 1203               		.cfi_startproc
 1204               	/* prologue: function */
 1205               	/* frame size = 0 */
 1206               	/* stack size = 0 */
 1207               	.L__stack_usage = 0
 1208               	.LVL106:
 216:quantum/rgblight.c ****   if (mode > RGBLIGHT_MODES) {
 1209               		.loc 1 216 0
 1210 0000 8091 0000 		lds r24,rgblight_config
 1211 0004 8695      		lsr r24
 1212 0006 8F73      		andi r24,lo8(63)
 1213 0008 8F5F      		subi r24,lo8(-(1))
 1214               	.LVL107:
 217:quantum/rgblight.c ****     mode = 1;
 1215               		.loc 1 217 0
 1216 000a 8931      		cpi r24,lo8(25)
 1217 000c 00F0      		brlo .L67
 218:quantum/rgblight.c ****   }
 1218               		.loc 1 218 0
 1219 000e 81E0      		ldi r24,lo8(1)
 1220               	.LVL108:
 1221               	.L67:
 220:quantum/rgblight.c **** }
 1222               		.loc 1 220 0
 1223 0010 0C94 0000 		jmp rgblight_mode
 1224               	.LVL109:
 1225               		.cfi_endproc
 1226               	.LFE17:
 1228               		.section	.text.rgblight_enable,"ax",@progbits
 1229               	.global	rgblight_enable
 1231               	rgblight_enable:
 1232               	.LFB20:
 269:quantum/rgblight.c ****   rgblight_config.enable = 1;
 1233               		.loc 1 269 0
 1234               		.cfi_startproc
 1235 0000 CF93      		push r28
 1236               	.LCFI18:
 1237               		.cfi_def_cfa_offset 3
 1238               		.cfi_offset 28, -2
 1239 0002 DF93      		push r29
 1240               	.LCFI19:
 1241               		.cfi_def_cfa_offset 4
 1242               		.cfi_offset 29, -3
 1243               	/* prologue: function */
 1244               	/* frame size = 0 */
 1245               	/* stack size = 2 */
 1246               	.L__stack_usage = 2
 270:quantum/rgblight.c ****   eeconfig_update_rgblight(rgblight_config.raw);
 1247               		.loc 1 270 0
 1248 0004 C0E0      		ldi r28,lo8(rgblight_config)
 1249 0006 D0E0      		ldi r29,hi8(rgblight_config)
 1250 0008 8881      		ld r24,Y
 1251 000a 8160      		ori r24,lo8(1<<0)
 1252 000c 8883      		st Y,r24
 271:quantum/rgblight.c ****   xprintf("rgblight enable: rgblight_config.enable = %u\n", rgblight_config.enable);
 1253               		.loc 1 271 0
 1254 000e 6091 0000 		lds r22,rgblight_config
 1255 0012 7091 0000 		lds r23,rgblight_config+1
 1256 0016 8091 0000 		lds r24,rgblight_config+2
 1257 001a 9091 0000 		lds r25,rgblight_config+3
 1258 001e 0E94 0000 		call eeconfig_update_rgblight
 1259               	.LVL110:
 273:quantum/rgblight.c **** }
 1260               		.loc 1 273 0
 1261 0022 8881      		ld r24,Y
 1262 0024 8695      		lsr r24
 1263 0026 8F73      		andi r24,lo8(63)
 1264               	/* epilogue start */
 274:quantum/rgblight.c **** 
 1265               		.loc 1 274 0
 1266 0028 DF91      		pop r29
 1267 002a CF91      		pop r28
 273:quantum/rgblight.c **** }
 1268               		.loc 1 273 0
 1269 002c 0C94 0000 		jmp rgblight_mode
 1270               	.LVL111:
 1271               		.cfi_endproc
 1272               	.LFE20:
 1274               		.section	.text.rgblight_update_dword,"ax",@progbits
 1275               	.global	rgblight_update_dword
 1277               	rgblight_update_dword:
 1278               	.LFB14:
 186:quantum/rgblight.c ****   rgblight_config.raw = dword;
 1279               		.loc 1 186 0
 1280               		.cfi_startproc
 1281               	.LVL112:
 1282               	/* prologue: function */
 1283               	/* frame size = 0 */
 1284               	/* stack size = 0 */
 1285               	.L__stack_usage = 0
 187:quantum/rgblight.c ****   eeconfig_update_rgblight(rgblight_config.raw);
 1286               		.loc 1 187 0
 1287 0000 6093 0000 		sts rgblight_config,r22
 1288 0004 7093 0000 		sts rgblight_config+1,r23
 1289 0008 8093 0000 		sts rgblight_config+2,r24
 1290 000c 9093 0000 		sts rgblight_config+3,r25
 188:quantum/rgblight.c ****   if (rgblight_config.enable)
 1291               		.loc 1 188 0
 1292 0010 0E94 0000 		call eeconfig_update_rgblight
 1293               	.LVL113:
 189:quantum/rgblight.c ****     rgblight_mode(rgblight_config.mode);
 1294               		.loc 1 189 0
 1295 0014 8091 0000 		lds r24,rgblight_config
 1296 0018 80FF      		sbrs r24,0
 1297 001a 00C0      		rjmp .L70
 190:quantum/rgblight.c ****   else {
 1298               		.loc 1 190 0
 1299 001c 8695      		lsr r24
 1300 001e 8F73      		andi r24,lo8(63)
 1301 0020 0C94 0000 		jmp rgblight_mode
 1302               	.LVL114:
 1303               	.L70:
 1304               	.LBB31:
 1305               	.LBB32:
 1306               		.loc 1 425 0
 1307 0024 1092 0000 		sts rgblight_timer_enabled,__zero_reg__
 1308               	.LBE32:
 1309               	.LBE31:
 195:quantum/rgblight.c ****   }
 1310               		.loc 1 195 0
 1311 0028 0C94 0000 		jmp rgblight_set
 1312               	.LVL115:
 1313               		.cfi_endproc
 1314               	.LFE14:
 1316               		.section	.text.rgblight_toggle,"ax",@progbits
 1317               	.global	rgblight_toggle
 1319               	rgblight_toggle:
 1320               	.LFB19:
 254:quantum/rgblight.c ****   rgblight_config.enable ^= 1;
 1321               		.loc 1 254 0
 1322               		.cfi_startproc
 1323               	/* prologue: function */
 1324               	/* frame size = 0 */
 1325               	/* stack size = 0 */
 1326               	.L__stack_usage = 0
 255:quantum/rgblight.c ****   eeconfig_update_rgblight(rgblight_config.raw);
 1327               		.loc 1 255 0
 1328 0000 8091 0000 		lds r24,rgblight_config
 1329 0004 982F      		mov r25,r24
 1330 0006 9095      		com r25
 1331 0008 90FB      		bst r25,0
 1332 000a 80F9      		bld r24,0
 1333 000c 8093 0000 		sts rgblight_config,r24
 256:quantum/rgblight.c ****   xprintf("rgblight toggle: rgblight_config.enable = %u\n", rgblight_config.enable);
 1334               		.loc 1 256 0
 1335 0010 6091 0000 		lds r22,rgblight_config
 1336 0014 7091 0000 		lds r23,rgblight_config+1
 1337 0018 8091 0000 		lds r24,rgblight_config+2
 1338 001c 9091 0000 		lds r25,rgblight_config+3
 1339 0020 0E94 0000 		call eeconfig_update_rgblight
 1340               	.LVL116:
 258:quantum/rgblight.c ****     rgblight_mode(rgblight_config.mode);
 1341               		.loc 1 258 0
 1342 0024 8091 0000 		lds r24,rgblight_config
 1343 0028 80FF      		sbrs r24,0
 1344 002a 00C0      		rjmp .L72
 259:quantum/rgblight.c ****   } else {
 1345               		.loc 1 259 0
 1346 002c 8695      		lsr r24
 1347 002e 8F73      		andi r24,lo8(63)
 1348 0030 0C94 0000 		jmp rgblight_mode
 1349               	.LVL117:
 1350               	.L72:
 1351               	.LBB37:
 1352               	.LBB38:
 1353               		.loc 1 425 0
 1354 0034 1092 0000 		sts rgblight_timer_enabled,__zero_reg__
 1355               	.LVL118:
 1356               	.LBE38:
 1357               	.LBE37:
 1358               	.LBB39:
 1359               	.LBB40:
 1360               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1361               		.loc 2 187 0
 1362 0038 2FEF      		ldi r18,lo8(159999)
 1363 003a 80E7      		ldi r24,hi8(159999)
 1364 003c 92E0      		ldi r25,hlo8(159999)
 1365 003e 2150      	1:	subi r18,1
 1366 0040 8040      		sbci r24,0
 1367 0042 9040      		sbci r25,0
 1368 0044 01F4      		brne 1b
 1369 0046 00C0      		rjmp .
 1370 0048 0000      		nop
 1371               	.LVL119:
 1372               	.LBE40:
 1373               	.LBE39:
 265:quantum/rgblight.c ****   }
 1374               		.loc 1 265 0
 1375 004a 0C94 0000 		jmp rgblight_set
 1376               	.LVL120:
 1377               		.cfi_endproc
 1378               	.LFE19:
 1380               		.section	.text.rgblight_timer_init,"ax",@progbits
 1381               	.global	rgblight_timer_init
 1383               	rgblight_timer_init:
 1384               	.LFB46:
 1385               		.cfi_startproc
 1386               	/* prologue: function */
 1387               	/* frame size = 0 */
 1388               	/* stack size = 0 */
 1389               	.L__stack_usage = 0
 1390 0000 81E0      		ldi r24,lo8(1)
 1391 0002 8093 0000 		sts rgblight_timer_enabled,r24
 1392 0006 0895      		ret
 1393               		.cfi_endproc
 1394               	.LFE46:
 1396               		.section	.text.rgblight_timer_enable,"ax",@progbits
 1397               	.global	rgblight_timer_enable
 1399               	rgblight_timer_enable:
 1400               	.LFB32:
 416:quantum/rgblight.c ****   rgblight_timer_enabled = true;
 1401               		.loc 1 416 0
 1402               		.cfi_startproc
 1403               	/* prologue: function */
 1404               	/* frame size = 0 */
 1405               	/* stack size = 0 */
 1406               	.L__stack_usage = 0
 417:quantum/rgblight.c ****   dprintf("TIMER3 enabled.\n");
 1407               		.loc 1 417 0
 1408 0000 81E0      		ldi r24,lo8(1)
 1409 0002 8093 0000 		sts rgblight_timer_enabled,r24
 1410 0006 0895      		ret
 1411               		.cfi_endproc
 1412               	.LFE32:
 1414               		.section	.text.rgblight_timer_disable,"ax",@progbits
 1415               	.global	rgblight_timer_disable
 1417               	rgblight_timer_disable:
 1418               	.LFB44:
 1419               		.cfi_startproc
 1420               	/* prologue: function */
 1421               	/* frame size = 0 */
 1422               	/* stack size = 0 */
 1423               	.L__stack_usage = 0
 1424 0000 1092 0000 		sts rgblight_timer_enabled,__zero_reg__
 1425 0004 0895      		ret
 1426               		.cfi_endproc
 1427               	.LFE44:
 1429               		.section	.text.rgblight_timer_toggle,"ax",@progbits
 1430               	.global	rgblight_timer_toggle
 1432               	rgblight_timer_toggle:
 1433               	.LFB34:
 424:quantum/rgblight.c ****   rgblight_timer_enabled ^= rgblight_timer_enabled;
 1434               		.loc 1 424 0
 1435               		.cfi_startproc
 1436               	/* prologue: function */
 1437               	/* frame size = 0 */
 1438               	/* stack size = 0 */
 1439               	.L__stack_usage = 0
 1440               		.loc 1 425 0
 1441 0000 1092 0000 		sts rgblight_timer_enabled,__zero_reg__
 1442 0004 0895      		ret
 1443               		.cfi_endproc
 1444               	.LFE34:
 1446               		.section	.text.rgblight_show_solid_color,"ax",@progbits
 1447               	.global	rgblight_show_solid_color
 1449               	rgblight_show_solid_color:
 1450               	.LFB35:
 426:quantum/rgblight.c ****   dprintf("TIMER3 toggled.\n");
 427:quantum/rgblight.c **** }
 428:quantum/rgblight.c **** 
 429:quantum/rgblight.c **** void rgblight_show_solid_color(uint8_t r, uint8_t g, uint8_t b) {
 1451               		.loc 1 429 0
 1452               		.cfi_startproc
 1453               	.LVL121:
 1454 0000 1F93      		push r17
 1455               	.LCFI20:
 1456               		.cfi_def_cfa_offset 3
 1457               		.cfi_offset 17, -2
 1458 0002 CF93      		push r28
 1459               	.LCFI21:
 1460               		.cfi_def_cfa_offset 4
 1461               		.cfi_offset 28, -3
 1462 0004 DF93      		push r29
 1463               	.LCFI22:
 1464               		.cfi_def_cfa_offset 5
 1465               		.cfi_offset 29, -4
 1466               	/* prologue: function */
 1467               	/* frame size = 0 */
 1468               	/* stack size = 3 */
 1469               	.L__stack_usage = 3
 1470 0006 C82F      		mov r28,r24
 1471 0008 D62F      		mov r29,r22
 1472 000a 142F      		mov r17,r20
 430:quantum/rgblight.c ****   rgblight_enable();
 1473               		.loc 1 430 0
 1474 000c 0E94 0000 		call rgblight_enable
 1475               	.LVL122:
 431:quantum/rgblight.c ****   rgblight_mode(1);
 1476               		.loc 1 431 0
 1477 0010 81E0      		ldi r24,lo8(1)
 1478 0012 0E94 0000 		call rgblight_mode
 1479               	.LVL123:
 432:quantum/rgblight.c ****   rgblight_setrgb(r, g, b);
 1480               		.loc 1 432 0
 1481 0016 412F      		mov r20,r17
 1482 0018 6D2F      		mov r22,r29
 1483 001a 8C2F      		mov r24,r28
 1484               	/* epilogue start */
 433:quantum/rgblight.c **** }
 1485               		.loc 1 433 0
 1486 001c DF91      		pop r29
 1487               	.LVL124:
 1488 001e CF91      		pop r28
 1489               	.LVL125:
 1490 0020 1F91      		pop r17
 1491               	.LVL126:
 432:quantum/rgblight.c ****   rgblight_setrgb(r, g, b);
 1492               		.loc 1 432 0
 1493 0022 0C94 0000 		jmp rgblight_setrgb
 1494               	.LVL127:
 1495               		.cfi_endproc
 1496               	.LFE35:
 1498               		.section	.text.rgblight_effect_breathing,"ax",@progbits
 1499               	.global	rgblight_effect_breathing
 1501               	rgblight_effect_breathing:
 1502               	.LFB37:
 434:quantum/rgblight.c **** 
 435:quantum/rgblight.c **** void rgblight_task(void) {
 436:quantum/rgblight.c ****   if (rgblight_timer_enabled) {
 437:quantum/rgblight.c ****     // mode = 1, static light, do nothing here
 438:quantum/rgblight.c ****     if (rgblight_config.mode >= 2 && rgblight_config.mode <= 5) {
 439:quantum/rgblight.c ****       // mode = 2 to 5, breathing mode
 440:quantum/rgblight.c ****       rgblight_effect_breathing(rgblight_config.mode - 2);
 441:quantum/rgblight.c ****     } else if (rgblight_config.mode >= 6 && rgblight_config.mode <= 8) {
 442:quantum/rgblight.c ****       // mode = 6 to 8, rainbow mood mod
 443:quantum/rgblight.c ****       rgblight_effect_rainbow_mood(rgblight_config.mode - 6);
 444:quantum/rgblight.c ****     } else if (rgblight_config.mode >= 9 && rgblight_config.mode <= 14) {
 445:quantum/rgblight.c ****       // mode = 9 to 14, rainbow swirl mode
 446:quantum/rgblight.c ****       rgblight_effect_rainbow_swirl(rgblight_config.mode - 9);
 447:quantum/rgblight.c ****     } else if (rgblight_config.mode >= 15 && rgblight_config.mode <= 20) {
 448:quantum/rgblight.c ****       // mode = 15 to 20, snake mode
 449:quantum/rgblight.c ****       rgblight_effect_snake(rgblight_config.mode - 15);
 450:quantum/rgblight.c ****     } else if (rgblight_config.mode >= 21 && rgblight_config.mode <= 23) {
 451:quantum/rgblight.c ****       // mode = 21 to 23, knight mode
 452:quantum/rgblight.c ****       rgblight_effect_knight(rgblight_config.mode - 21);
 453:quantum/rgblight.c ****     } else {
 454:quantum/rgblight.c ****       // mode = 24, christmas mode
 455:quantum/rgblight.c ****       rgblight_effect_christmas();
 456:quantum/rgblight.c ****     }
 457:quantum/rgblight.c ****   }
 458:quantum/rgblight.c **** }
 459:quantum/rgblight.c **** 
 460:quantum/rgblight.c **** // Effects
 461:quantum/rgblight.c **** void rgblight_effect_breathing(uint8_t interval) {
 1503               		.loc 1 461 0
 1504               		.cfi_startproc
 1505               	.LVL128:
 1506 0000 CF93      		push r28
 1507               	.LCFI23:
 1508               		.cfi_def_cfa_offset 3
 1509               		.cfi_offset 28, -2
 1510               	/* prologue: function */
 1511               	/* frame size = 0 */
 1512               	/* stack size = 1 */
 1513               	.L__stack_usage = 1
 1514 0002 C82F      		mov r28,r24
 462:quantum/rgblight.c ****   static uint8_t pos = 0;
 463:quantum/rgblight.c ****   static uint16_t last_timer = 0;
 464:quantum/rgblight.c **** 
 465:quantum/rgblight.c ****   if (timer_elapsed(last_timer) < pgm_read_byte(&RGBLED_BREATHING_INTERVALS[interval])) {
 1515               		.loc 1 465 0
 1516 0004 8091 0000 		lds r24,last_timer.2284
 1517 0008 9091 0000 		lds r25,last_timer.2284+1
 1518               	.LVL129:
 1519 000c 0E94 0000 		call timer_elapsed
 1520               	.LVL130:
 1521               	.LBB41:
 1522 0010 EC2F      		mov r30,r28
 1523 0012 F0E0      		ldi r31,0
 1524 0014 E050      		subi r30,lo8(-(RGBLED_BREATHING_INTERVALS))
 1525 0016 F040      		sbci r31,hi8(-(RGBLED_BREATHING_INTERVALS))
 1526               	/* #APP */
 1527               	 ;  465 "quantum/rgblight.c" 1
 1528 0018 E491      		lpm r30, Z
 1529               		
 1530               	 ;  0 "" 2
 1531               	.LVL131:
 1532               	/* #NOAPP */
 1533               	.LBE41:
 1534 001a F0E0      		ldi r31,0
 1535 001c 8E17      		cp r24,r30
 1536 001e 9F07      		cpc r25,r31
 1537 0020 00F0      		brlo .L78
 466:quantum/rgblight.c ****     return;
 467:quantum/rgblight.c ****   }
 468:quantum/rgblight.c ****   last_timer = timer_read();
 1538               		.loc 1 468 0
 1539 0022 0E94 0000 		call timer_read
 1540               	.LVL132:
 1541 0026 9093 0000 		sts last_timer.2284+1,r25
 1542 002a 8093 0000 		sts last_timer.2284,r24
 1543               	.LVL133:
 1544               	.LBB42:
 469:quantum/rgblight.c **** 
 470:quantum/rgblight.c ****   rgblight_sethsv_noeeprom(rgblight_config.hue, rgblight_config.sat, pgm_read_byte(&RGBLED_BREATHIN
 1545               		.loc 1 470 0
 1546 002e E091 0000 		lds r30,pos.2283
 1547 0032 F0E0      		ldi r31,0
 1548 0034 E050      		subi r30,lo8(-(RGBLED_BREATHING_TABLE))
 1549 0036 F040      		sbci r31,hi8(-(RGBLED_BREATHING_TABLE))
 1550               	/* #APP */
 1551               	 ;  470 "quantum/rgblight.c" 1
 1552 0038 4491      		lpm r20, Z
 1553               		
 1554               	 ;  0 "" 2
 1555               	.LVL134:
 1556               	/* #NOAPP */
 1557               	.LBE42:
 1558 003a 8091 0000 		lds r24,rgblight_config
 1559 003e 881F      		rol r24
 1560 0040 8827      		clr r24
 1561 0042 881F      		rol r24
 1562 0044 9091 0000 		lds r25,rgblight_config+1
 1563 0048 292F      		mov r18,r25
 1564 004a 220F      		lsl r18
 1565 004c 97FB      		bst r25,7
 1566 004e 9927      		clr r25
 1567 0050 90F9      		bld r25,0
 1568 0052 6091 0000 		lds r22,rgblight_config+2
 1569 0056 822B      		or r24,r18
 1570 0058 0E94 0000 		call rgblight_sethsv_noeeprom
 1571               	.LVL135:
 471:quantum/rgblight.c ****   pos = (pos + 1) % 256;
 1572               		.loc 1 471 0
 1573 005c 8091 0000 		lds r24,pos.2283
 1574 0060 90E0      		ldi r25,0
 1575 0062 0196      		adiw r24,1
 1576 0064 8093 0000 		sts pos.2283,r24
 1577               	.L78:
 1578               	/* epilogue start */
 472:quantum/rgblight.c **** }
 1579               		.loc 1 472 0
 1580 0068 CF91      		pop r28
 1581               	.LVL136:
 1582 006a 0895      		ret
 1583               		.cfi_endproc
 1584               	.LFE37:
 1586               		.section	.text.rgblight_effect_rainbow_mood,"ax",@progbits
 1587               	.global	rgblight_effect_rainbow_mood
 1589               	rgblight_effect_rainbow_mood:
 1590               	.LFB38:
 473:quantum/rgblight.c **** void rgblight_effect_rainbow_mood(uint8_t interval) {
 1591               		.loc 1 473 0
 1592               		.cfi_startproc
 1593               	.LVL137:
 1594 0000 CF93      		push r28
 1595               	.LCFI24:
 1596               		.cfi_def_cfa_offset 3
 1597               		.cfi_offset 28, -2
 1598               	/* prologue: function */
 1599               	/* frame size = 0 */
 1600               	/* stack size = 1 */
 1601               	.L__stack_usage = 1
 1602 0002 C82F      		mov r28,r24
 474:quantum/rgblight.c ****   static uint16_t current_hue = 0;
 475:quantum/rgblight.c ****   static uint16_t last_timer = 0;
 476:quantum/rgblight.c **** 
 477:quantum/rgblight.c ****   if (timer_elapsed(last_timer) < pgm_read_byte(&RGBLED_RAINBOW_MOOD_INTERVALS[interval])) {
 1603               		.loc 1 477 0
 1604 0004 8091 0000 		lds r24,last_timer.2295
 1605 0008 9091 0000 		lds r25,last_timer.2295+1
 1606               	.LVL138:
 1607 000c 0E94 0000 		call timer_elapsed
 1608               	.LVL139:
 1609               	.LBB43:
 1610 0010 EC2F      		mov r30,r28
 1611 0012 F0E0      		ldi r31,0
 1612 0014 E050      		subi r30,lo8(-(RGBLED_RAINBOW_MOOD_INTERVALS))
 1613 0016 F040      		sbci r31,hi8(-(RGBLED_RAINBOW_MOOD_INTERVALS))
 1614               	/* #APP */
 1615               	 ;  477 "quantum/rgblight.c" 1
 1616 0018 E491      		lpm r30, Z
 1617               		
 1618               	 ;  0 "" 2
 1619               	.LVL140:
 1620               	/* #NOAPP */
 1621               	.LBE43:
 1622 001a F0E0      		ldi r31,0
 1623 001c 8E17      		cp r24,r30
 1624 001e 9F07      		cpc r25,r31
 1625 0020 00F0      		brlo .L80
 478:quantum/rgblight.c ****     return;
 479:quantum/rgblight.c ****   }
 480:quantum/rgblight.c ****   last_timer = timer_read();
 1626               		.loc 1 480 0
 1627 0022 0E94 0000 		call timer_read
 1628               	.LVL141:
 1629 0026 9093 0000 		sts last_timer.2295+1,r25
 1630 002a 8093 0000 		sts last_timer.2295,r24
 481:quantum/rgblight.c ****   rgblight_sethsv_noeeprom(current_hue, rgblight_config.sat, rgblight_config.val);
 1631               		.loc 1 481 0
 1632 002e 4091 0000 		lds r20,rgblight_config+3
 1633 0032 6091 0000 		lds r22,rgblight_config+2
 1634 0036 8091 0000 		lds r24,current_hue.2294
 1635 003a 9091 0000 		lds r25,current_hue.2294+1
 1636 003e 0E94 0000 		call rgblight_sethsv_noeeprom
 1637               	.LVL142:
 482:quantum/rgblight.c ****   current_hue = (current_hue + 1) % 360;
 1638               		.loc 1 482 0
 1639 0042 8091 0000 		lds r24,current_hue.2294
 1640 0046 9091 0000 		lds r25,current_hue.2294+1
 1641 004a 0196      		adiw r24,1
 1642 004c 68E6      		ldi r22,lo8(104)
 1643 004e 71E0      		ldi r23,lo8(1)
 1644 0050 0E94 0000 		call __udivmodhi4
 1645 0054 9093 0000 		sts current_hue.2294+1,r25
 1646 0058 8093 0000 		sts current_hue.2294,r24
 1647               	.L80:
 1648               	/* epilogue start */
 483:quantum/rgblight.c **** }
 1649               		.loc 1 483 0
 1650 005c CF91      		pop r28
 1651               	.LVL143:
 1652 005e 0895      		ret
 1653               		.cfi_endproc
 1654               	.LFE38:
 1656               		.section	.text.rgblight_effect_rainbow_swirl,"ax",@progbits
 1657               	.global	rgblight_effect_rainbow_swirl
 1659               	rgblight_effect_rainbow_swirl:
 1660               	.LFB39:
 484:quantum/rgblight.c **** void rgblight_effect_rainbow_swirl(uint8_t interval) {
 1661               		.loc 1 484 0
 1662               		.cfi_startproc
 1663               	.LVL144:
 1664 0000 FF92      		push r15
 1665               	.LCFI25:
 1666               		.cfi_def_cfa_offset 3
 1667               		.cfi_offset 15, -2
 1668 0002 0F93      		push r16
 1669               	.LCFI26:
 1670               		.cfi_def_cfa_offset 4
 1671               		.cfi_offset 16, -3
 1672 0004 1F93      		push r17
 1673               	.LCFI27:
 1674               		.cfi_def_cfa_offset 5
 1675               		.cfi_offset 17, -4
 1676 0006 CF93      		push r28
 1677               	.LCFI28:
 1678               		.cfi_def_cfa_offset 6
 1679               		.cfi_offset 28, -5
 1680 0008 DF93      		push r29
 1681               	.LCFI29:
 1682               		.cfi_def_cfa_offset 7
 1683               		.cfi_offset 29, -6
 1684               	/* prologue: function */
 1685               	/* frame size = 0 */
 1686               	/* stack size = 5 */
 1687               	.L__stack_usage = 5
 1688 000a F82E      		mov r15,r24
 485:quantum/rgblight.c ****   static uint16_t current_hue = 0;
 486:quantum/rgblight.c ****   static uint16_t last_timer = 0;
 487:quantum/rgblight.c ****   uint16_t hue;
 488:quantum/rgblight.c ****   uint8_t i;
 489:quantum/rgblight.c ****   if (timer_elapsed(last_timer) < pgm_read_byte(&RGBLED_RAINBOW_MOOD_INTERVALS[interval / 2])) {
 1689               		.loc 1 489 0
 1690 000c 8091 0000 		lds r24,last_timer.2303
 1691 0010 9091 0000 		lds r25,last_timer.2303+1
 1692               	.LVL145:
 1693 0014 0E94 0000 		call timer_elapsed
 1694               	.LVL146:
 1695               	.LBB44:
 1696 0018 EF2D      		mov r30,r15
 1697 001a E695      		lsr r30
 1698 001c F0E0      		ldi r31,0
 1699 001e E050      		subi r30,lo8(-(RGBLED_RAINBOW_MOOD_INTERVALS))
 1700 0020 F040      		sbci r31,hi8(-(RGBLED_RAINBOW_MOOD_INTERVALS))
 1701               	/* #APP */
 1702               	 ;  489 "quantum/rgblight.c" 1
 1703 0022 E491      		lpm r30, Z
 1704               		
 1705               	 ;  0 "" 2
 1706               	.LVL147:
 1707               	/* #NOAPP */
 1708               	.LBE44:
 1709 0024 F0E0      		ldi r31,0
 1710 0026 8E17      		cp r24,r30
 1711 0028 9F07      		cpc r25,r31
 1712 002a 00F0      		brlo .L82
 490:quantum/rgblight.c ****     return;
 491:quantum/rgblight.c ****   }
 492:quantum/rgblight.c ****   last_timer = timer_read();
 1713               		.loc 1 492 0
 1714 002c 0E94 0000 		call timer_read
 1715               	.LVL148:
 1716 0030 9093 0000 		sts last_timer.2303+1,r25
 1717 0034 8093 0000 		sts last_timer.2303,r24
 1718               	.LVL149:
 493:quantum/rgblight.c ****   for (i = 0; i < RGBLED_NUM; i++) {
 494:quantum/rgblight.c ****     hue = (360 / RGBLED_NUM * i + current_hue) % 360;
 1719               		.loc 1 494 0
 1720 0038 C091 0000 		lds r28,current_hue.2302
 1721 003c D091 0000 		lds r29,current_hue.2302+1
 1722               	.LVL150:
 495:quantum/rgblight.c ****     sethsv(hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[i]);
 1723               		.loc 1 495 0
 1724 0040 08E6      		ldi r16,lo8(104)
 1725 0042 11E0      		ldi r17,lo8(1)
 1726 0044 CE01      		movw r24,r28
 1727 0046 B801      		movw r22,r16
 1728 0048 0E94 0000 		call __udivmodhi4
 1729               	.LVL151:
 1730 004c 20E0      		ldi r18,lo8(led)
 1731 004e 30E0      		ldi r19,hi8(led)
 1732 0050 4091 0000 		lds r20,rgblight_config+3
 1733 0054 6091 0000 		lds r22,rgblight_config+2
 1734 0058 0E94 0000 		call sethsv
 1735               	.LVL152:
 1736 005c CE01      		movw r24,r28
 1737 005e 8C54      		subi r24,76
 1738 0060 9F4F      		sbci r25,-1
 1739 0062 B801      		movw r22,r16
 1740 0064 0E94 0000 		call __udivmodhi4
 1741               	.LVL153:
 1742 0068 20E0      		ldi r18,lo8(led+3)
 1743 006a 30E0      		ldi r19,hi8(led+3)
 1744 006c 4091 0000 		lds r20,rgblight_config+3
 1745 0070 6091 0000 		lds r22,rgblight_config+2
 1746 0074 0E94 0000 		call sethsv
 1747               	.LVL154:
 496:quantum/rgblight.c ****   }
 497:quantum/rgblight.c ****   rgblight_set();
 1748               		.loc 1 497 0
 1749 0078 0E94 0000 		call rgblight_set
 1750               	.LVL155:
 1751 007c 8091 0000 		lds r24,current_hue.2302
 1752 0080 9091 0000 		lds r25,current_hue.2302+1
 498:quantum/rgblight.c **** 
 499:quantum/rgblight.c ****   if (interval % 2) {
 1753               		.loc 1 499 0
 1754 0084 F0FE      		sbrs r15,0
 1755 0086 00C0      		rjmp .L84
 500:quantum/rgblight.c ****     current_hue = (current_hue + 1) % 360;
 1756               		.loc 1 500 0
 1757 0088 0196      		adiw r24,1
 1758 008a B801      		movw r22,r16
 1759 008c 0E94 0000 		call __udivmodhi4
 1760 0090 00C0      		rjmp .L85
 1761               	.L84:
 501:quantum/rgblight.c ****   } else {
 502:quantum/rgblight.c ****     if (current_hue - 1 < 0) {
 503:quantum/rgblight.c ****       current_hue = 359;
 504:quantum/rgblight.c ****     } else {
 505:quantum/rgblight.c ****       current_hue = current_hue - 1;
 1762               		.loc 1 505 0
 1763 0092 0197      		sbiw r24,1
 1764               	.L85:
 1765 0094 9093 0000 		sts current_hue.2302+1,r25
 1766 0098 8093 0000 		sts current_hue.2302,r24
 1767               	.LVL156:
 1768               	.L82:
 1769               	/* epilogue start */
 506:quantum/rgblight.c ****     }
 507:quantum/rgblight.c ****   }
 508:quantum/rgblight.c **** }
 1770               		.loc 1 508 0
 1771 009c DF91      		pop r29
 1772 009e CF91      		pop r28
 1773 00a0 1F91      		pop r17
 1774 00a2 0F91      		pop r16
 1775 00a4 FF90      		pop r15
 1776               	.LVL157:
 1777 00a6 0895      		ret
 1778               		.cfi_endproc
 1779               	.LFE39:
 1781               		.section	.text.rgblight_effect_snake,"ax",@progbits
 1782               	.global	rgblight_effect_snake
 1784               	rgblight_effect_snake:
 1785               	.LFB40:
 509:quantum/rgblight.c **** void rgblight_effect_snake(uint8_t interval) {
 1786               		.loc 1 509 0
 1787               		.cfi_startproc
 1788               	.LVL158:
 1789 0000 AF92      		push r10
 1790               	.LCFI30:
 1791               		.cfi_def_cfa_offset 3
 1792               		.cfi_offset 10, -2
 1793 0002 BF92      		push r11
 1794               	.LCFI31:
 1795               		.cfi_def_cfa_offset 4
 1796               		.cfi_offset 11, -3
 1797 0004 CF92      		push r12
 1798               	.LCFI32:
 1799               		.cfi_def_cfa_offset 5
 1800               		.cfi_offset 12, -4
 1801 0006 DF92      		push r13
 1802               	.LCFI33:
 1803               		.cfi_def_cfa_offset 6
 1804               		.cfi_offset 13, -5
 1805 0008 EF92      		push r14
 1806               	.LCFI34:
 1807               		.cfi_def_cfa_offset 7
 1808               		.cfi_offset 14, -6
 1809 000a FF92      		push r15
 1810               	.LCFI35:
 1811               		.cfi_def_cfa_offset 8
 1812               		.cfi_offset 15, -7
 1813 000c 0F93      		push r16
 1814               	.LCFI36:
 1815               		.cfi_def_cfa_offset 9
 1816               		.cfi_offset 16, -8
 1817 000e 1F93      		push r17
 1818               	.LCFI37:
 1819               		.cfi_def_cfa_offset 10
 1820               		.cfi_offset 17, -9
 1821 0010 CF93      		push r28
 1822               	.LCFI38:
 1823               		.cfi_def_cfa_offset 11
 1824               		.cfi_offset 28, -10
 1825 0012 DF93      		push r29
 1826               	.LCFI39:
 1827               		.cfi_def_cfa_offset 12
 1828               		.cfi_offset 29, -11
 1829               	/* prologue: function */
 1830               	/* frame size = 0 */
 1831               	/* stack size = 10 */
 1832               	.L__stack_usage = 10
 1833 0014 C82F      		mov r28,r24
 1834               	.LVL159:
 510:quantum/rgblight.c ****   static uint8_t pos = 0;
 511:quantum/rgblight.c ****   static uint16_t last_timer = 0;
 512:quantum/rgblight.c ****   uint8_t i, j;
 513:quantum/rgblight.c ****   int8_t k;
 514:quantum/rgblight.c ****   int8_t increment = 1;
 515:quantum/rgblight.c ****   if (interval % 2) {
 1835               		.loc 1 515 0
 1836 0016 80FF      		sbrs r24,0
 1837 0018 00C0      		rjmp .L95
 516:quantum/rgblight.c ****     increment = -1;
 1838               		.loc 1 516 0
 1839 001a 1FEF      		ldi r17,lo8(-1)
 1840 001c 00C0      		rjmp .L87
 1841               	.L95:
 514:quantum/rgblight.c ****   if (interval % 2) {
 1842               		.loc 1 514 0
 1843 001e 11E0      		ldi r17,lo8(1)
 1844               	.L87:
 1845               	.LVL160:
 517:quantum/rgblight.c ****   }
 518:quantum/rgblight.c ****   if (timer_elapsed(last_timer) < pgm_read_byte(&RGBLED_SNAKE_INTERVALS[interval / 2])) {
 1846               		.loc 1 518 0
 1847 0020 8091 0000 		lds r24,last_timer.2316
 1848 0024 9091 0000 		lds r25,last_timer.2316+1
 1849               	.LVL161:
 1850 0028 0E94 0000 		call timer_elapsed
 1851               	.LVL162:
 1852               	.LBB45:
 1853 002c C695      		lsr r28
 1854               	.LVL163:
 1855 002e EC2F      		mov r30,r28
 1856 0030 F0E0      		ldi r31,0
 1857 0032 E050      		subi r30,lo8(-(RGBLED_SNAKE_INTERVALS))
 1858 0034 F040      		sbci r31,hi8(-(RGBLED_SNAKE_INTERVALS))
 1859               	/* #APP */
 1860               	 ;  518 "quantum/rgblight.c" 1
 1861 0036 E491      		lpm r30, Z
 1862               		
 1863               	 ;  0 "" 2
 1864               	.LVL164:
 1865               	/* #NOAPP */
 1866               	.LBE45:
 1867 0038 F0E0      		ldi r31,0
 1868 003a 8E17      		cp r24,r30
 1869 003c 9F07      		cpc r25,r31
 1870 003e 00F4      		brsh .+2
 1871 0040 00C0      		rjmp .L86
 519:quantum/rgblight.c ****     return;
 520:quantum/rgblight.c ****   }
 521:quantum/rgblight.c ****   last_timer = timer_read();
 1872               		.loc 1 521 0
 1873 0042 0E94 0000 		call timer_read
 1874               	.LVL165:
 1875 0046 9093 0000 		sts last_timer.2316+1,r25
 1876 004a 8093 0000 		sts last_timer.2316,r24
 1877               	.LVL166:
 1878 004e C0E0      		ldi r28,lo8(led)
 1879 0050 D0E0      		ldi r29,hi8(led)
 1880 0052 E12C      		mov r14,__zero_reg__
 1881 0054 F12C      		mov r15,__zero_reg__
 522:quantum/rgblight.c ****   for (i = 0; i < RGBLED_NUM; i++) {
 523:quantum/rgblight.c ****     led[i].r = 0;
 524:quantum/rgblight.c ****     led[i].g = 0;
 525:quantum/rgblight.c ****     led[i].b = 0;
 526:quantum/rgblight.c ****     for (j = 0; j < RGBLIGHT_EFFECT_SNAKE_LENGTH; j++) {
 527:quantum/rgblight.c ****       k = pos + j * increment;
 528:quantum/rgblight.c ****       if (k < 0) {
 529:quantum/rgblight.c ****         k = k + RGBLED_NUM;
 530:quantum/rgblight.c ****       }
 531:quantum/rgblight.c ****       if (i == k) {
 532:quantum/rgblight.c ****         sethsv(rgblight_config.hue, rgblight_config.sat, (uint8_t)(rgblight_config.val*(RGBLIGHT_EF
 1882               		.loc 1 532 0
 1883 0056 97E0      		ldi r25,lo8(7)
 1884 0058 C92E      		mov r12,r25
 1885 005a D12C      		mov r13,__zero_reg__
 1886               	.LVL167:
 1887               	.L92:
 523:quantum/rgblight.c ****     led[i].g = 0;
 1888               		.loc 1 523 0
 1889 005c 1982      		std Y+1,__zero_reg__
 524:quantum/rgblight.c ****     led[i].b = 0;
 1890               		.loc 1 524 0
 1891 005e 1882      		st Y,__zero_reg__
 525:quantum/rgblight.c ****     for (j = 0; j < RGBLIGHT_EFFECT_SNAKE_LENGTH; j++) {
 1892               		.loc 1 525 0
 1893 0060 1A82      		std Y+2,__zero_reg__
 1894               	.LVL168:
 1895 0062 87E0      		ldi r24,lo8(7)
 1896 0064 A82E      		mov r10,r24
 1897 0066 B12C      		mov r11,__zero_reg__
 1898 0068 00E0      		ldi r16,0
 1899               	.LVL169:
 1900               	.L91:
 527:quantum/rgblight.c ****       if (k < 0) {
 1901               		.loc 1 527 0
 1902 006a 8091 0000 		lds r24,pos.2315
 1903 006e 800F      		add r24,r16
 1904               	.LVL170:
 528:quantum/rgblight.c ****         k = k + RGBLED_NUM;
 1905               		.loc 1 528 0
 1906 0070 87FD      		sbrc r24,7
 529:quantum/rgblight.c ****       }
 1907               		.loc 1 529 0
 1908 0072 8E5F      		subi r24,lo8(-(2))
 1909               	.LVL171:
 1910               	.L89:
 531:quantum/rgblight.c ****         sethsv(rgblight_config.hue, rgblight_config.sat, (uint8_t)(rgblight_config.val*(RGBLIGHT_EF
 1911               		.loc 1 531 0
 1912 0074 082E      		mov __tmp_reg__,r24
 1913 0076 000C      		lsl r0
 1914 0078 990B      		sbc r25,r25
 1915 007a E816      		cp r14,r24
 1916 007c F906      		cpc r15,r25
 1917 007e 01F4      		brne .L90
 1918               		.loc 1 532 0
 1919 0080 2091 0000 		lds r18,rgblight_config+3
 1920 0084 2A9D      		mul r18,r10
 1921 0086 C001      		movw r24,r0
 1922 0088 2B9D      		mul r18,r11
 1923 008a 900D      		add r25,r0
 1924 008c 1124      		clr __zero_reg__
 1925               	.LVL172:
 1926 008e B601      		movw r22,r12
 1927 0090 0E94 0000 		call __divmodhi4
 1928 0094 462F      		mov r20,r22
 1929 0096 8091 0000 		lds r24,rgblight_config
 1930 009a 881F      		rol r24
 1931 009c 8827      		clr r24
 1932 009e 881F      		rol r24
 1933 00a0 9091 0000 		lds r25,rgblight_config+1
 1934 00a4 592F      		mov r21,r25
 1935 00a6 550F      		lsl r21
 1936 00a8 97FB      		bst r25,7
 1937 00aa 9927      		clr r25
 1938 00ac 90F9      		bld r25,0
 1939 00ae 9E01      		movw r18,r28
 1940 00b0 6091 0000 		lds r22,rgblight_config+2
 1941 00b4 852B      		or r24,r21
 1942 00b6 0E94 0000 		call sethsv
 1943               	.LVL173:
 1944               	.L90:
 1945 00ba 010F      		add r16,r17
 1946 00bc 81E0      		ldi r24,1
 1947 00be A81A      		sub r10,r24
 1948 00c0 B108      		sbc r11,__zero_reg__
 526:quantum/rgblight.c ****       k = pos + j * increment;
 1949               		.loc 1 526 0 discriminator 2
 1950 00c2 01F4      		brne .L91
 1951               	.LVL174:
 1952 00c4 8FEF      		ldi r24,-1
 1953 00c6 E81A      		sub r14,r24
 1954 00c8 F80A      		sbc r15,r24
 1955               	.LVL175:
 1956 00ca 2396      		adiw r28,3
 522:quantum/rgblight.c ****     led[i].r = 0;
 1957               		.loc 1 522 0 discriminator 2
 1958 00cc 82E0      		ldi r24,2
 1959 00ce E816      		cp r14,r24
 1960 00d0 F104      		cpc r15,__zero_reg__
 1961 00d2 01F4      		brne .L92
 533:quantum/rgblight.c ****       }
 534:quantum/rgblight.c ****     }
 535:quantum/rgblight.c ****   }
 536:quantum/rgblight.c ****   rgblight_set();
 1962               		.loc 1 536 0
 1963 00d4 0E94 0000 		call rgblight_set
 1964               	.LVL176:
 1965 00d8 8091 0000 		lds r24,pos.2315
 537:quantum/rgblight.c ****   if (increment == 1) {
 1966               		.loc 1 537 0
 1967 00dc 1130      		cpi r17,lo8(1)
 1968 00de 01F4      		brne .L93
 538:quantum/rgblight.c ****     if (pos - 1 < 0) {
 1969               		.loc 1 538 0
 1970 00e0 8111      		cpse r24,__zero_reg__
 1971 00e2 00C0      		rjmp .L94
 539:quantum/rgblight.c ****       pos = RGBLED_NUM - 1;
 1972               		.loc 1 539 0
 1973 00e4 1093 0000 		sts pos.2315,r17
 1974 00e8 00C0      		rjmp .L86
 1975               	.L94:
 540:quantum/rgblight.c ****     } else {
 541:quantum/rgblight.c ****       pos -= 1;
 1976               		.loc 1 541 0
 1977 00ea 8150      		subi r24,lo8(-(-1))
 1978 00ec 00C0      		rjmp .L98
 1979               	.L93:
 542:quantum/rgblight.c ****     }
 543:quantum/rgblight.c ****   } else {
 544:quantum/rgblight.c ****     pos = (pos + 1) % RGBLED_NUM;
 1980               		.loc 1 544 0
 1981 00ee 90E0      		ldi r25,0
 1982 00f0 0196      		adiw r24,1
 1983 00f2 8170      		andi r24,1
 1984 00f4 9927      		clr r25
 1985               	.L98:
 1986 00f6 8093 0000 		sts pos.2315,r24
 1987               	.LVL177:
 1988               	.L86:
 1989               	/* epilogue start */
 545:quantum/rgblight.c ****   }
 546:quantum/rgblight.c **** }
 1990               		.loc 1 546 0
 1991 00fa DF91      		pop r29
 1992 00fc CF91      		pop r28
 1993 00fe 1F91      		pop r17
 1994               	.LVL178:
 1995 0100 0F91      		pop r16
 1996 0102 FF90      		pop r15
 1997 0104 EF90      		pop r14
 1998 0106 DF90      		pop r13
 1999 0108 CF90      		pop r12
 2000 010a BF90      		pop r11
 2001 010c AF90      		pop r10
 2002 010e 0895      		ret
 2003               		.cfi_endproc
 2004               	.LFE40:
 2006               		.section	.text.rgblight_effect_knight,"ax",@progbits
 2007               	.global	rgblight_effect_knight
 2009               	rgblight_effect_knight:
 2010               	.LFB41:
 547:quantum/rgblight.c **** void rgblight_effect_knight(uint8_t interval) {
 2011               		.loc 1 547 0
 2012               		.cfi_startproc
 2013               	.LVL179:
 2014 0000 DF92      		push r13
 2015               	.LCFI40:
 2016               		.cfi_def_cfa_offset 3
 2017               		.cfi_offset 13, -2
 2018 0002 EF92      		push r14
 2019               	.LCFI41:
 2020               		.cfi_def_cfa_offset 4
 2021               		.cfi_offset 14, -3
 2022 0004 FF92      		push r15
 2023               	.LCFI42:
 2024               		.cfi_def_cfa_offset 5
 2025               		.cfi_offset 15, -4
 2026 0006 0F93      		push r16
 2027               	.LCFI43:
 2028               		.cfi_def_cfa_offset 6
 2029               		.cfi_offset 16, -5
 2030 0008 1F93      		push r17
 2031               	.LCFI44:
 2032               		.cfi_def_cfa_offset 7
 2033               		.cfi_offset 17, -6
 2034 000a CF93      		push r28
 2035               	.LCFI45:
 2036               		.cfi_def_cfa_offset 8
 2037               		.cfi_offset 28, -7
 2038 000c DF93      		push r29
 2039               	.LCFI46:
 2040               		.cfi_def_cfa_offset 9
 2041               		.cfi_offset 29, -8
 2042 000e 00D0      		rcall .
 2043 0010 00D0      		rcall .
 2044 0012 00D0      		rcall .
 2045               	.LCFI47:
 2046               		.cfi_def_cfa_offset 15
 2047 0014 CDB7      		in r28,__SP_L__
 2048 0016 DEB7      		in r29,__SP_H__
 2049               	.LCFI48:
 2050               		.cfi_def_cfa_register 28
 2051               	/* prologue: function */
 2052               	/* frame size = 6 */
 2053               	/* stack size = 13 */
 2054               	.L__stack_usage = 13
 2055 0018 182F      		mov r17,r24
 548:quantum/rgblight.c ****   static int8_t pos = 0;
 549:quantum/rgblight.c ****   static uint16_t last_timer = 0;
 550:quantum/rgblight.c ****   uint8_t i, j, cur;
 551:quantum/rgblight.c ****   int8_t k;
 552:quantum/rgblight.c ****   LED_TYPE preled[RGBLED_NUM];
 553:quantum/rgblight.c ****   static int8_t increment = -1;
 554:quantum/rgblight.c ****   if (timer_elapsed(last_timer) < pgm_read_byte(&RGBLED_KNIGHT_INTERVALS[interval])) {
 2056               		.loc 1 554 0
 2057 001a 8091 0000 		lds r24,last_timer.2334
 2058 001e 9091 0000 		lds r25,last_timer.2334+1
 2059               	.LVL180:
 2060 0022 0E94 0000 		call timer_elapsed
 2061               	.LVL181:
 2062               	.LBB46:
 2063 0026 E12F      		mov r30,r17
 2064 0028 F0E0      		ldi r31,0
 2065 002a E050      		subi r30,lo8(-(RGBLED_KNIGHT_INTERVALS))
 2066 002c F040      		sbci r31,hi8(-(RGBLED_KNIGHT_INTERVALS))
 2067               	/* #APP */
 2068               	 ;  554 "quantum/rgblight.c" 1
 2069 002e E491      		lpm r30, Z
 2070               		
 2071               	 ;  0 "" 2
 2072               	.LVL182:
 2073               	/* #NOAPP */
 2074               	.LBE46:
 2075 0030 F0E0      		ldi r31,0
 2076 0032 8E17      		cp r24,r30
 2077 0034 9F07      		cpc r25,r31
 2078 0036 00F4      		brsh .+2
 2079 0038 00C0      		rjmp .L99
 555:quantum/rgblight.c ****     return;
 556:quantum/rgblight.c ****   }
 557:quantum/rgblight.c ****   last_timer = timer_read();
 2080               		.loc 1 557 0
 2081 003a 0E94 0000 		call timer_read
 2082               	.LVL183:
 2083 003e 9093 0000 		sts last_timer.2334+1,r25
 2084 0042 8093 0000 		sts last_timer.2334,r24
 2085               	.LVL184:
 2086 0046 8E01      		movw r16,r28
 2087 0048 0F5F      		subi r16,-1
 2088 004a 1F4F      		sbci r17,-1
 2089 004c E12C      		mov r14,__zero_reg__
 2090 004e F12C      		mov r15,__zero_reg__
 2091               	.LVL185:
 2092               	.L105:
 558:quantum/rgblight.c ****   for (i = 0; i < RGBLED_NUM; i++) {
 559:quantum/rgblight.c ****     preled[i].r = 0;
 2093               		.loc 1 559 0
 2094 0050 F801      		movw r30,r16
 2095 0052 1182      		std Z+1,__zero_reg__
 560:quantum/rgblight.c ****     preled[i].g = 0;
 2096               		.loc 1 560 0
 2097 0054 1082      		st Z,__zero_reg__
 561:quantum/rgblight.c ****     preled[i].b = 0;
 2098               		.loc 1 561 0
 2099 0056 1282      		std Z+2,__zero_reg__
 2100               	.LVL186:
 562:quantum/rgblight.c ****     for (j = 0; j < RGBLIGHT_EFFECT_KNIGHT_LENGTH; j++) {
 2101               		.loc 1 562 0
 2102 0058 D12C      		mov r13,__zero_reg__
 2103               	.LVL187:
 2104               	.L104:
 563:quantum/rgblight.c ****       k = pos + j * increment;
 2105               		.loc 1 563 0
 2106 005a 9091 0000 		lds r25,increment.2340
 2107 005e 8091 0000 		lds r24,pos.2333
 2108 0062 D99E      		mul r13,r25
 2109 0064 800D      		add r24,r0
 2110 0066 1124      		clr __zero_reg__
 2111               	.LVL188:
 564:quantum/rgblight.c ****       if (k < 0) {
 2112               		.loc 1 564 0
 2113 0068 87FD      		sbrc r24,7
 2114 006a 00C0      		rjmp .L111
 565:quantum/rgblight.c ****         k = 0;
 566:quantum/rgblight.c ****       }
 567:quantum/rgblight.c ****       if (k >= RGBLED_NUM) {
 2115               		.loc 1 567 0
 2116 006c 8230      		cpi r24,lo8(2)
 2117 006e 04F0      		brlt .L102
 568:quantum/rgblight.c ****         k = RGBLED_NUM - 1;
 2118               		.loc 1 568 0
 2119 0070 81E0      		ldi r24,lo8(1)
 2120               	.LVL189:
 2121 0072 00C0      		rjmp .L102
 2122               	.LVL190:
 2123               	.L111:
 565:quantum/rgblight.c ****         k = 0;
 2124               		.loc 1 565 0
 2125 0074 80E0      		ldi r24,0
 2126               	.LVL191:
 2127               	.L102:
 569:quantum/rgblight.c ****       }
 570:quantum/rgblight.c ****       if (i == k) {
 2128               		.loc 1 570 0
 2129 0076 082E      		mov __tmp_reg__,r24
 2130 0078 000C      		lsl r0
 2131 007a 990B      		sbc r25,r25
 2132 007c E816      		cp r14,r24
 2133 007e F906      		cpc r15,r25
 2134 0080 01F4      		brne .L103
 571:quantum/rgblight.c ****         sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&preled[i
 2135               		.loc 1 571 0
 2136 0082 8091 0000 		lds r24,rgblight_config
 2137               	.LVL192:
 2138 0086 881F      		rol r24
 2139 0088 8827      		clr r24
 2140 008a 881F      		rol r24
 2141 008c 9091 0000 		lds r25,rgblight_config+1
 2142 0090 592F      		mov r21,r25
 2143 0092 550F      		lsl r21
 2144 0094 97FB      		bst r25,7
 2145 0096 9927      		clr r25
 2146 0098 90F9      		bld r25,0
 2147 009a 9801      		movw r18,r16
 2148 009c 4091 0000 		lds r20,rgblight_config+3
 2149 00a0 6091 0000 		lds r22,rgblight_config+2
 2150 00a4 852B      		or r24,r21
 2151 00a6 0E94 0000 		call sethsv
 2152               	.LVL193:
 2153               	.L103:
 562:quantum/rgblight.c ****       k = pos + j * increment;
 2154               		.loc 1 562 0 discriminator 2
 2155 00aa D394      		inc r13
 2156               	.LVL194:
 2157 00ac F7E0      		ldi r31,lo8(7)
 2158 00ae DF12      		cpse r13,r31
 2159 00b0 00C0      		rjmp .L104
 2160               	.LVL195:
 2161 00b2 8FEF      		ldi r24,-1
 2162 00b4 E81A      		sub r14,r24
 2163 00b6 F80A      		sbc r15,r24
 2164               	.LVL196:
 2165 00b8 0D5F      		subi r16,-3
 2166 00ba 1F4F      		sbci r17,-1
 558:quantum/rgblight.c ****     preled[i].r = 0;
 2167               		.loc 1 558 0 discriminator 2
 2168 00bc E2E0      		ldi r30,2
 2169 00be EE16      		cp r14,r30
 2170 00c0 F104      		cpc r15,__zero_reg__
 2171 00c2 01F4      		brne .L105
 2172               	.LVL197:
 572:quantum/rgblight.c ****       }
 573:quantum/rgblight.c ****     }
 574:quantum/rgblight.c ****   }
 575:quantum/rgblight.c ****   if (RGBLIGHT_EFFECT_KNIGHT_OFFSET) {
 576:quantum/rgblight.c ****     for (i = 0; i < RGBLED_NUM; i++) {
 577:quantum/rgblight.c ****       cur = (i + RGBLIGHT_EFFECT_KNIGHT_OFFSET) % RGBLED_NUM;
 578:quantum/rgblight.c ****       led[i].r = preled[cur].r;
 2173               		.loc 1 578 0 discriminator 1
 2174 00c4 8D81      		ldd r24,Y+5
 2175 00c6 8093 0000 		sts led+1,r24
 579:quantum/rgblight.c ****       led[i].g = preled[cur].g;
 2176               		.loc 1 579 0 discriminator 1
 2177 00ca 8C81      		ldd r24,Y+4
 2178 00cc 8093 0000 		sts led,r24
 580:quantum/rgblight.c ****       led[i].b = preled[cur].b;
 2179               		.loc 1 580 0 discriminator 1
 2180 00d0 8E81      		ldd r24,Y+6
 2181 00d2 8093 0000 		sts led+2,r24
 2182               	.LVL198:
 578:quantum/rgblight.c ****       led[i].g = preled[cur].g;
 2183               		.loc 1 578 0 discriminator 1
 2184 00d6 8A81      		ldd r24,Y+2
 2185 00d8 8093 0000 		sts led+4,r24
 579:quantum/rgblight.c ****       led[i].g = preled[cur].g;
 2186               		.loc 1 579 0 discriminator 1
 2187 00dc 8981      		ldd r24,Y+1
 2188 00de 8093 0000 		sts led+3,r24
 2189               		.loc 1 580 0 discriminator 1
 2190 00e2 8B81      		ldd r24,Y+3
 2191 00e4 8093 0000 		sts led+5,r24
 2192               	.LVL199:
 581:quantum/rgblight.c ****     }
 582:quantum/rgblight.c ****   }
 583:quantum/rgblight.c ****   rgblight_set();
 2193               		.loc 1 583 0 discriminator 1
 2194 00e8 0E94 0000 		call rgblight_set
 2195               	.LVL200:
 584:quantum/rgblight.c ****   if (increment == 1) {
 2196               		.loc 1 584 0 discriminator 1
 2197 00ec 9091 0000 		lds r25,increment.2340
 2198 00f0 8091 0000 		lds r24,pos.2333
 2199 00f4 9130      		cpi r25,lo8(1)
 2200 00f6 01F4      		brne .L106
 585:quantum/rgblight.c ****     if (pos - 1 < 0 - RGBLIGHT_EFFECT_KNIGHT_LENGTH) {
 2201               		.loc 1 585 0
 2202 00f8 8A3F      		cpi r24,lo8(-6)
 2203 00fa 04F4      		brge .L107
 586:quantum/rgblight.c ****       pos = 0 - RGBLIGHT_EFFECT_KNIGHT_LENGTH;
 2204               		.loc 1 586 0
 2205 00fc 89EF      		ldi r24,lo8(-7)
 2206 00fe 8093 0000 		sts pos.2333,r24
 587:quantum/rgblight.c ****       increment = -1;
 2207               		.loc 1 587 0
 2208 0102 8FEF      		ldi r24,lo8(-1)
 2209 0104 00C0      		rjmp .L116
 2210               	.L107:
 588:quantum/rgblight.c ****     } else {
 589:quantum/rgblight.c ****       pos -= 1;
 2211               		.loc 1 589 0
 2212 0106 8150      		subi r24,lo8(-(-1))
 2213 0108 00C0      		rjmp .L115
 2214               	.L106:
 590:quantum/rgblight.c ****     }
 591:quantum/rgblight.c ****   } else {
 592:quantum/rgblight.c ****     if (pos + 1 > RGBLED_NUM + RGBLIGHT_EFFECT_KNIGHT_LENGTH) {
 2215               		.loc 1 592 0
 2216 010a 8930      		cpi r24,lo8(9)
 2217 010c 04F0      		brlt .L109
 593:quantum/rgblight.c ****       pos = RGBLED_NUM + RGBLIGHT_EFFECT_KNIGHT_LENGTH - 1;
 2218               		.loc 1 593 0
 2219 010e 88E0      		ldi r24,lo8(8)
 2220 0110 8093 0000 		sts pos.2333,r24
 594:quantum/rgblight.c ****       increment = 1;
 2221               		.loc 1 594 0
 2222 0114 81E0      		ldi r24,lo8(1)
 2223               	.L116:
 2224 0116 8093 0000 		sts increment.2340,r24
 2225 011a 00C0      		rjmp .L99
 2226               	.L109:
 595:quantum/rgblight.c ****     } else {
 596:quantum/rgblight.c ****       pos += 1;
 2227               		.loc 1 596 0
 2228 011c 8F5F      		subi r24,lo8(-(1))
 2229               	.L115:
 2230 011e 8093 0000 		sts pos.2333,r24
 2231               	.LVL201:
 2232               	.L99:
 2233               	/* epilogue start */
 597:quantum/rgblight.c ****     }
 598:quantum/rgblight.c ****   }
 599:quantum/rgblight.c **** }
 2234               		.loc 1 599 0
 2235 0122 2696      		adiw r28,6
 2236 0124 0FB6      		in __tmp_reg__,__SREG__
 2237 0126 F894      		cli
 2238 0128 DEBF      		out __SP_H__,r29
 2239 012a 0FBE      		out __SREG__,__tmp_reg__
 2240 012c CDBF      		out __SP_L__,r28
 2241 012e DF91      		pop r29
 2242 0130 CF91      		pop r28
 2243 0132 1F91      		pop r17
 2244               	.LVL202:
 2245 0134 0F91      		pop r16
 2246 0136 FF90      		pop r15
 2247 0138 EF90      		pop r14
 2248 013a DF90      		pop r13
 2249 013c 0895      		ret
 2250               		.cfi_endproc
 2251               	.LFE41:
 2253               		.section	.text.rgblight_effect_christmas,"ax",@progbits
 2254               	.global	rgblight_effect_christmas
 2256               	rgblight_effect_christmas:
 2257               	.LFB42:
 600:quantum/rgblight.c **** 
 601:quantum/rgblight.c **** 
 602:quantum/rgblight.c **** void rgblight_effect_christmas(void) {
 2258               		.loc 1 602 0
 2259               		.cfi_startproc
 2260               	/* prologue: function */
 2261               	/* frame size = 0 */
 2262               	/* stack size = 0 */
 2263               	.L__stack_usage = 0
 603:quantum/rgblight.c ****   static uint16_t current_offset = 0;
 604:quantum/rgblight.c ****   static uint16_t last_timer = 0;
 605:quantum/rgblight.c ****   uint16_t hue;
 606:quantum/rgblight.c ****   uint8_t i;
 607:quantum/rgblight.c ****   if (timer_elapsed(last_timer) < 1000) {
 2264               		.loc 1 607 0
 2265 0000 8091 0000 		lds r24,last_timer.2357
 2266 0004 9091 0000 		lds r25,last_timer.2357+1
 2267 0008 0E94 0000 		call timer_elapsed
 2268               	.LVL203:
 2269 000c 883E      		cpi r24,-24
 2270 000e 9340      		sbci r25,3
 2271 0010 00F0      		brlo .L117
 608:quantum/rgblight.c ****     return;
 609:quantum/rgblight.c ****   }
 610:quantum/rgblight.c ****   last_timer = timer_read();
 2272               		.loc 1 610 0
 2273 0012 0E94 0000 		call timer_read
 2274               	.LVL204:
 2275 0016 9093 0000 		sts last_timer.2357+1,r25
 2276 001a 8093 0000 		sts last_timer.2357,r24
 611:quantum/rgblight.c ****   current_offset = (current_offset + 1) % 2;
 2277               		.loc 1 611 0
 2278 001e 8091 0000 		lds r24,current_offset.2356
 2279 0022 9091 0000 		lds r25,current_offset.2356+1
 2280 0026 0196      		adiw r24,1
 2281 0028 8170      		andi r24,1
 2282 002a 9927      		clr r25
 2283 002c 9093 0000 		sts current_offset.2356+1,r25
 2284 0030 8093 0000 		sts current_offset.2356,r24
 2285               	.LVL205:
 612:quantum/rgblight.c ****   for (i = 0; i < RGBLED_NUM; i++) {
 613:quantum/rgblight.c ****     hue = 0 + ((RGBLED_NUM * (i + current_offset)) % 2) * 80;
 614:quantum/rgblight.c ****     sethsv(hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[i]);
 2286               		.loc 1 614 0
 2287 0034 20E0      		ldi r18,lo8(led)
 2288 0036 30E0      		ldi r19,hi8(led)
 2289 0038 4091 0000 		lds r20,rgblight_config+3
 2290 003c 6091 0000 		lds r22,rgblight_config+2
 2291 0040 80E0      		ldi r24,0
 2292 0042 90E0      		ldi r25,0
 2293 0044 0E94 0000 		call sethsv
 2294               	.LVL206:
 2295 0048 20E0      		ldi r18,lo8(led+3)
 2296 004a 30E0      		ldi r19,hi8(led+3)
 2297 004c 4091 0000 		lds r20,rgblight_config+3
 2298 0050 6091 0000 		lds r22,rgblight_config+2
 2299 0054 80E0      		ldi r24,0
 2300 0056 90E0      		ldi r25,0
 2301 0058 0E94 0000 		call sethsv
 2302               	.LVL207:
 615:quantum/rgblight.c ****   }
 616:quantum/rgblight.c ****   rgblight_set();
 2303               		.loc 1 616 0
 2304 005c 0C94 0000 		jmp rgblight_set
 2305               	.LVL208:
 2306               	.L117:
 2307 0060 0895      		ret
 2308               		.cfi_endproc
 2309               	.LFE42:
 2311               		.section	.text.rgblight_task,"ax",@progbits
 2312               	.global	rgblight_task
 2314               	rgblight_task:
 2315               	.LFB36:
 435:quantum/rgblight.c ****   if (rgblight_timer_enabled) {
 2316               		.loc 1 435 0
 2317               		.cfi_startproc
 2318               	/* prologue: function */
 2319               	/* frame size = 0 */
 2320               	/* stack size = 0 */
 2321               	.L__stack_usage = 0
 436:quantum/rgblight.c ****     // mode = 1, static light, do nothing here
 2322               		.loc 1 436 0
 2323 0000 8091 0000 		lds r24,rgblight_timer_enabled
 2324 0004 8823      		tst r24
 2325 0006 01F0      		breq .L119
 438:quantum/rgblight.c ****       // mode = 2 to 5, breathing mode
 2326               		.loc 1 438 0
 2327 0008 8091 0000 		lds r24,rgblight_config
 2328 000c 8695      		lsr r24
 2329 000e 8F73      		andi r24,lo8(63)
 2330 0010 9EE3      		ldi r25,lo8(62)
 2331 0012 980F      		add r25,r24
 2332 0014 9F73      		andi r25,lo8(63)
 2333 0016 9430      		cpi r25,lo8(4)
 2334 0018 00F4      		brsh .L121
 440:quantum/rgblight.c ****     } else if (rgblight_config.mode >= 6 && rgblight_config.mode <= 8) {
 2335               		.loc 1 440 0
 2336 001a 8250      		subi r24,lo8(-(-2))
 2337 001c 0C94 0000 		jmp rgblight_effect_breathing
 2338               	.LVL209:
 2339               	.L121:
 441:quantum/rgblight.c ****       // mode = 6 to 8, rainbow mood mod
 2340               		.loc 1 441 0
 2341 0020 9AE3      		ldi r25,lo8(58)
 2342 0022 980F      		add r25,r24
 2343 0024 9F73      		andi r25,lo8(63)
 2344 0026 9330      		cpi r25,lo8(3)
 2345 0028 00F4      		brsh .L122
 443:quantum/rgblight.c ****     } else if (rgblight_config.mode >= 9 && rgblight_config.mode <= 14) {
 2346               		.loc 1 443 0
 2347 002a 8650      		subi r24,lo8(-(-6))
 2348 002c 0C94 0000 		jmp rgblight_effect_rainbow_mood
 2349               	.LVL210:
 2350               	.L122:
 444:quantum/rgblight.c ****       // mode = 9 to 14, rainbow swirl mode
 2351               		.loc 1 444 0
 2352 0030 97E3      		ldi r25,lo8(55)
 2353 0032 980F      		add r25,r24
 2354 0034 9F73      		andi r25,lo8(63)
 2355 0036 9630      		cpi r25,lo8(6)
 2356 0038 00F4      		brsh .L123
 446:quantum/rgblight.c ****     } else if (rgblight_config.mode >= 15 && rgblight_config.mode <= 20) {
 2357               		.loc 1 446 0
 2358 003a 8950      		subi r24,lo8(-(-9))
 2359 003c 0C94 0000 		jmp rgblight_effect_rainbow_swirl
 2360               	.LVL211:
 2361               	.L123:
 447:quantum/rgblight.c ****       // mode = 15 to 20, snake mode
 2362               		.loc 1 447 0
 2363 0040 91E3      		ldi r25,lo8(49)
 2364 0042 980F      		add r25,r24
 2365 0044 9F73      		andi r25,lo8(63)
 2366 0046 9630      		cpi r25,lo8(6)
 2367 0048 00F4      		brsh .L124
 449:quantum/rgblight.c ****     } else if (rgblight_config.mode >= 21 && rgblight_config.mode <= 23) {
 2368               		.loc 1 449 0
 2369 004a 8F50      		subi r24,lo8(-(-15))
 2370 004c 0C94 0000 		jmp rgblight_effect_snake
 2371               	.LVL212:
 2372               	.L124:
 450:quantum/rgblight.c ****       // mode = 21 to 23, knight mode
 2373               		.loc 1 450 0
 2374 0050 9BE2      		ldi r25,lo8(43)
 2375 0052 980F      		add r25,r24
 2376 0054 9F73      		andi r25,lo8(63)
 2377 0056 9330      		cpi r25,lo8(3)
 2378 0058 00F4      		brsh .L125
 452:quantum/rgblight.c ****     } else {
 2379               		.loc 1 452 0
 2380 005a 8551      		subi r24,lo8(-(-21))
 2381 005c 0C94 0000 		jmp rgblight_effect_knight
 2382               	.LVL213:
 2383               	.L125:
 455:quantum/rgblight.c ****     }
 2384               		.loc 1 455 0
 2385 0060 0C94 0000 		jmp rgblight_effect_christmas
 2386               	.LVL214:
 2387               	.L119:
 2388 0064 0895      		ret
 2389               		.cfi_endproc
 2390               	.LFE36:
 2392               		.section	.bss.current_offset.2356,"aw",@nobits
 2395               	current_offset.2356:
 2396 0000 0000      		.zero	2
 2397               		.section	.bss.last_timer.2357,"aw",@nobits
 2400               	last_timer.2357:
 2401 0000 0000      		.zero	2
 2402               		.section	.bss.pos.2333,"aw",@nobits
 2405               	pos.2333:
 2406 0000 00        		.zero	1
 2407               		.section	.data.increment.2340,"aw",@progbits
 2410               	increment.2340:
 2411 0000 FF        		.byte	-1
 2412               		.section	.bss.last_timer.2334,"aw",@nobits
 2415               	last_timer.2334:
 2416 0000 0000      		.zero	2
 2417               		.section	.bss.pos.2315,"aw",@nobits
 2420               	pos.2315:
 2421 0000 00        		.zero	1
 2422               		.section	.bss.last_timer.2316,"aw",@nobits
 2425               	last_timer.2316:
 2426 0000 0000      		.zero	2
 2427               		.section	.bss.current_hue.2302,"aw",@nobits
 2430               	current_hue.2302:
 2431 0000 0000      		.zero	2
 2432               		.section	.bss.last_timer.2303,"aw",@nobits
 2435               	last_timer.2303:
 2436 0000 0000      		.zero	2
 2437               		.section	.bss.current_hue.2294,"aw",@nobits
 2440               	current_hue.2294:
 2441 0000 0000      		.zero	2
 2442               		.section	.bss.last_timer.2295,"aw",@nobits
 2445               	last_timer.2295:
 2446 0000 0000      		.zero	2
 2447               		.section	.bss.pos.2283,"aw",@nobits
 2450               	pos.2283:
 2451 0000 00        		.zero	1
 2452               		.section	.bss.last_timer.2284,"aw",@nobits
 2455               	last_timer.2284:
 2456 0000 0000      		.zero	2
 2457               	.global	rgblight_timer_enabled
 2458               		.section	.bss.rgblight_timer_enabled,"aw",@nobits
 2461               	rgblight_timer_enabled:
 2462 0000 00        		.zero	1
 2463               	.global	rgblight_inited
 2464               		.section	.bss.rgblight_inited,"aw",@nobits
 2467               	rgblight_inited:
 2468 0000 00        		.zero	1
 2469               		.comm	led,6,1
 2470               		.comm	inmem_config,4,1
 2471               		.comm	rgblight_config,4,1
 2472               		.weak	RGBLED_KNIGHT_INTERVALS
 2473               		.section	.progmem.data.RGBLED_KNIGHT_INTERVALS,"a",@progbits
 2476               	RGBLED_KNIGHT_INTERVALS:
 2477 0000 64        		.byte	100
 2478 0001 32        		.byte	50
 2479 0002 14        		.byte	20
 2480               		.weak	RGBLED_SNAKE_INTERVALS
 2481               		.section	.progmem.data.RGBLED_SNAKE_INTERVALS,"a",@progbits
 2484               	RGBLED_SNAKE_INTERVALS:
 2485 0000 64        		.byte	100
 2486 0001 32        		.byte	50
 2487 0002 14        		.byte	20
 2488               		.weak	RGBLED_RAINBOW_SWIRL_INTERVALS
 2489               		.section	.progmem.data.RGBLED_RAINBOW_SWIRL_INTERVALS,"a",@progbits
 2492               	RGBLED_RAINBOW_SWIRL_INTERVALS:
 2493 0000 64        		.byte	100
 2494 0001 32        		.byte	50
 2495 0002 14        		.byte	20
 2496               		.weak	RGBLED_RAINBOW_MOOD_INTERVALS
 2497               		.section	.progmem.data.RGBLED_RAINBOW_MOOD_INTERVALS,"a",@progbits
 2500               	RGBLED_RAINBOW_MOOD_INTERVALS:
 2501 0000 78        		.byte	120
 2502 0001 3C        		.byte	60
 2503 0002 1E        		.byte	30
 2504               		.weak	RGBLED_BREATHING_INTERVALS
 2505               		.section	.progmem.data.RGBLED_BREATHING_INTERVALS,"a",@progbits
 2508               	RGBLED_BREATHING_INTERVALS:
 2509 0000 1E        		.byte	30
 2510 0001 14        		.byte	20
 2511 0002 0A        		.byte	10
 2512 0003 05        		.byte	5
 2513               	.global	RGBLED_BREATHING_TABLE
 2514               		.section	.progmem.data.RGBLED_BREATHING_TABLE,"a",@progbits
 2517               	RGBLED_BREATHING_TABLE:
 2518 0000 00        		.byte	0
 2519 0001 00        		.byte	0
 2520 0002 00        		.byte	0
 2521 0003 00        		.byte	0
 2522 0004 01        		.byte	1
 2523 0005 01        		.byte	1
 2524 0006 01        		.byte	1
 2525 0007 02        		.byte	2
 2526 0008 02        		.byte	2
 2527 0009 03        		.byte	3
 2528 000a 04        		.byte	4
 2529 000b 05        		.byte	5
 2530 000c 05        		.byte	5
 2531 000d 06        		.byte	6
 2532 000e 07        		.byte	7
 2533 000f 09        		.byte	9
 2534 0010 0A        		.byte	10
 2535 0011 0B        		.byte	11
 2536 0012 0C        		.byte	12
 2537 0013 0E        		.byte	14
 2538 0014 0F        		.byte	15
 2539 0015 11        		.byte	17
 2540 0016 12        		.byte	18
 2541 0017 14        		.byte	20
 2542 0018 15        		.byte	21
 2543 0019 17        		.byte	23
 2544 001a 19        		.byte	25
 2545 001b 1B        		.byte	27
 2546 001c 1D        		.byte	29
 2547 001d 1F        		.byte	31
 2548 001e 21        		.byte	33
 2549 001f 23        		.byte	35
 2550 0020 25        		.byte	37
 2551 0021 28        		.byte	40
 2552 0022 2A        		.byte	42
 2553 0023 2C        		.byte	44
 2554 0024 2F        		.byte	47
 2555 0025 31        		.byte	49
 2556 0026 34        		.byte	52
 2557 0027 36        		.byte	54
 2558 0028 39        		.byte	57
 2559 0029 3B        		.byte	59
 2560 002a 3E        		.byte	62
 2561 002b 41        		.byte	65
 2562 002c 43        		.byte	67
 2563 002d 46        		.byte	70
 2564 002e 49        		.byte	73
 2565 002f 4C        		.byte	76
 2566 0030 4F        		.byte	79
 2567 0031 52        		.byte	82
 2568 0032 55        		.byte	85
 2569 0033 58        		.byte	88
 2570 0034 5A        		.byte	90
 2571 0035 5D        		.byte	93
 2572 0036 61        		.byte	97
 2573 0037 64        		.byte	100
 2574 0038 67        		.byte	103
 2575 0039 6A        		.byte	106
 2576 003a 6D        		.byte	109
 2577 003b 70        		.byte	112
 2578 003c 73        		.byte	115
 2579 003d 76        		.byte	118
 2580 003e 79        		.byte	121
 2581 003f 7C        		.byte	124
 2582 0040 7F        		.byte	127
 2583 0041 83        		.byte	-125
 2584 0042 86        		.byte	-122
 2585 0043 89        		.byte	-119
 2586 0044 8C        		.byte	-116
 2587 0045 8F        		.byte	-113
 2588 0046 92        		.byte	-110
 2589 0047 95        		.byte	-107
 2590 0048 98        		.byte	-104
 2591 0049 9B        		.byte	-101
 2592 004a 9E        		.byte	-98
 2593 004b A2        		.byte	-94
 2594 004c A5        		.byte	-91
 2595 004d A7        		.byte	-89
 2596 004e AA        		.byte	-86
 2597 004f AD        		.byte	-83
 2598 0050 B0        		.byte	-80
 2599 0051 B3        		.byte	-77
 2600 0052 B6        		.byte	-74
 2601 0053 B9        		.byte	-71
 2602 0054 BC        		.byte	-68
 2603 0055 BE        		.byte	-66
 2604 0056 C1        		.byte	-63
 2605 0057 C4        		.byte	-60
 2606 0058 C6        		.byte	-58
 2607 0059 C9        		.byte	-55
 2608 005a CB        		.byte	-53
 2609 005b CE        		.byte	-50
 2610 005c D0        		.byte	-48
 2611 005d D3        		.byte	-45
 2612 005e D5        		.byte	-43
 2613 005f D7        		.byte	-41
 2614 0060 DA        		.byte	-38
 2615 0061 DC        		.byte	-36
 2616 0062 DE        		.byte	-34
 2617 0063 E0        		.byte	-32
 2618 0064 E2        		.byte	-30
 2619 0065 E4        		.byte	-28
 2620 0066 E6        		.byte	-26
 2621 0067 E8        		.byte	-24
 2622 0068 EA        		.byte	-22
 2623 0069 EB        		.byte	-21
 2624 006a ED        		.byte	-19
 2625 006b EE        		.byte	-18
 2626 006c F0        		.byte	-16
 2627 006d F1        		.byte	-15
 2628 006e F3        		.byte	-13
 2629 006f F4        		.byte	-12
 2630 0070 F5        		.byte	-11
 2631 0071 F6        		.byte	-10
 2632 0072 F8        		.byte	-8
 2633 0073 F9        		.byte	-7
 2634 0074 FA        		.byte	-6
 2635 0075 FA        		.byte	-6
 2636 0076 FB        		.byte	-5
 2637 0077 FC        		.byte	-4
 2638 0078 FD        		.byte	-3
 2639 0079 FD        		.byte	-3
 2640 007a FE        		.byte	-2
 2641 007b FE        		.byte	-2
 2642 007c FE        		.byte	-2
 2643 007d FF        		.byte	-1
 2644 007e FF        		.byte	-1
 2645 007f FF        		.byte	-1
 2646 0080 FF        		.byte	-1
 2647 0081 FF        		.byte	-1
 2648 0082 FF        		.byte	-1
 2649 0083 FF        		.byte	-1
 2650 0084 FE        		.byte	-2
 2651 0085 FE        		.byte	-2
 2652 0086 FE        		.byte	-2
 2653 0087 FD        		.byte	-3
 2654 0088 FD        		.byte	-3
 2655 0089 FC        		.byte	-4
 2656 008a FB        		.byte	-5
 2657 008b FA        		.byte	-6
 2658 008c FA        		.byte	-6
 2659 008d F9        		.byte	-7
 2660 008e F8        		.byte	-8
 2661 008f F6        		.byte	-10
 2662 0090 F5        		.byte	-11
 2663 0091 F4        		.byte	-12
 2664 0092 F3        		.byte	-13
 2665 0093 F1        		.byte	-15
 2666 0094 F0        		.byte	-16
 2667 0095 EE        		.byte	-18
 2668 0096 ED        		.byte	-19
 2669 0097 EB        		.byte	-21
 2670 0098 EA        		.byte	-22
 2671 0099 E8        		.byte	-24
 2672 009a E6        		.byte	-26
 2673 009b E4        		.byte	-28
 2674 009c E2        		.byte	-30
 2675 009d E0        		.byte	-32
 2676 009e DE        		.byte	-34
 2677 009f DC        		.byte	-36
 2678 00a0 DA        		.byte	-38
 2679 00a1 D7        		.byte	-41
 2680 00a2 D5        		.byte	-43
 2681 00a3 D3        		.byte	-45
 2682 00a4 D0        		.byte	-48
 2683 00a5 CE        		.byte	-50
 2684 00a6 CB        		.byte	-53
 2685 00a7 C9        		.byte	-55
 2686 00a8 C6        		.byte	-58
 2687 00a9 C4        		.byte	-60
 2688 00aa C1        		.byte	-63
 2689 00ab BE        		.byte	-66
 2690 00ac BC        		.byte	-68
 2691 00ad B9        		.byte	-71
 2692 00ae B6        		.byte	-74
 2693 00af B3        		.byte	-77
 2694 00b0 B0        		.byte	-80
 2695 00b1 AD        		.byte	-83
 2696 00b2 AA        		.byte	-86
 2697 00b3 A7        		.byte	-89
 2698 00b4 A5        		.byte	-91
 2699 00b5 A2        		.byte	-94
 2700 00b6 9E        		.byte	-98
 2701 00b7 9B        		.byte	-101
 2702 00b8 98        		.byte	-104
 2703 00b9 95        		.byte	-107
 2704 00ba 92        		.byte	-110
 2705 00bb 8F        		.byte	-113
 2706 00bc 8C        		.byte	-116
 2707 00bd 89        		.byte	-119
 2708 00be 86        		.byte	-122
 2709 00bf 83        		.byte	-125
 2710 00c0 80        		.byte	-128
 2711 00c1 7C        		.byte	124
 2712 00c2 79        		.byte	121
 2713 00c3 76        		.byte	118
 2714 00c4 73        		.byte	115
 2715 00c5 70        		.byte	112
 2716 00c6 6D        		.byte	109
 2717 00c7 6A        		.byte	106
 2718 00c8 67        		.byte	103
 2719 00c9 64        		.byte	100
 2720 00ca 61        		.byte	97
 2721 00cb 5D        		.byte	93
 2722 00cc 5A        		.byte	90
 2723 00cd 58        		.byte	88
 2724 00ce 55        		.byte	85
 2725 00cf 52        		.byte	82
 2726 00d0 4F        		.byte	79
 2727 00d1 4C        		.byte	76
 2728 00d2 49        		.byte	73
 2729 00d3 46        		.byte	70
 2730 00d4 43        		.byte	67
 2731 00d5 41        		.byte	65
 2732 00d6 3E        		.byte	62
 2733 00d7 3B        		.byte	59
 2734 00d8 39        		.byte	57
 2735 00d9 36        		.byte	54
 2736 00da 34        		.byte	52
 2737 00db 31        		.byte	49
 2738 00dc 2F        		.byte	47
 2739 00dd 2C        		.byte	44
 2740 00de 2A        		.byte	42
 2741 00df 28        		.byte	40
 2742 00e0 25        		.byte	37
 2743 00e1 23        		.byte	35
 2744 00e2 21        		.byte	33
 2745 00e3 1F        		.byte	31
 2746 00e4 1D        		.byte	29
 2747 00e5 1B        		.byte	27
 2748 00e6 19        		.byte	25
 2749 00e7 17        		.byte	23
 2750 00e8 15        		.byte	21
 2751 00e9 14        		.byte	20
 2752 00ea 12        		.byte	18
 2753 00eb 11        		.byte	17
 2754 00ec 0F        		.byte	15
 2755 00ed 0E        		.byte	14
 2756 00ee 0C        		.byte	12
 2757 00ef 0B        		.byte	11
 2758 00f0 0A        		.byte	10
 2759 00f1 09        		.byte	9
 2760 00f2 07        		.byte	7
 2761 00f3 06        		.byte	6
 2762 00f4 05        		.byte	5
 2763 00f5 05        		.byte	5
 2764 00f6 04        		.byte	4
 2765 00f7 03        		.byte	3
 2766 00f8 02        		.byte	2
 2767 00f9 02        		.byte	2
 2768 00fa 01        		.byte	1
 2769 00fb 01        		.byte	1
 2770 00fc 01        		.byte	1
 2771 00fd 00        		.byte	0
 2772 00fe 00        		.byte	0
 2773 00ff 00        		.byte	0
 2774               	.global	DIM_CURVE
 2775               		.section	.progmem.data.DIM_CURVE,"a",@progbits
 2778               	DIM_CURVE:
 2779 0000 00        		.byte	0
 2780 0001 00        		.byte	0
 2781 0002 00        		.byte	0
 2782 0003 00        		.byte	0
 2783 0004 00        		.byte	0
 2784 0005 01        		.byte	1
 2785 0006 01        		.byte	1
 2786 0007 01        		.byte	1
 2787 0008 01        		.byte	1
 2788 0009 01        		.byte	1
 2789 000a 01        		.byte	1
 2790 000b 01        		.byte	1
 2791 000c 01        		.byte	1
 2792 000d 01        		.byte	1
 2793 000e 02        		.byte	2
 2794 000f 02        		.byte	2
 2795 0010 02        		.byte	2
 2796 0011 02        		.byte	2
 2797 0012 02        		.byte	2
 2798 0013 02        		.byte	2
 2799 0014 02        		.byte	2
 2800 0015 02        		.byte	2
 2801 0016 02        		.byte	2
 2802 0017 03        		.byte	3
 2803 0018 03        		.byte	3
 2804 0019 03        		.byte	3
 2805 001a 03        		.byte	3
 2806 001b 03        		.byte	3
 2807 001c 03        		.byte	3
 2808 001d 03        		.byte	3
 2809 001e 03        		.byte	3
 2810 001f 04        		.byte	4
 2811 0020 04        		.byte	4
 2812 0021 04        		.byte	4
 2813 0022 04        		.byte	4
 2814 0023 04        		.byte	4
 2815 0024 04        		.byte	4
 2816 0025 05        		.byte	5
 2817 0026 05        		.byte	5
 2818 0027 05        		.byte	5
 2819 0028 05        		.byte	5
 2820 0029 05        		.byte	5
 2821 002a 06        		.byte	6
 2822 002b 06        		.byte	6
 2823 002c 06        		.byte	6
 2824 002d 06        		.byte	6
 2825 002e 06        		.byte	6
 2826 002f 07        		.byte	7
 2827 0030 07        		.byte	7
 2828 0031 07        		.byte	7
 2829 0032 07        		.byte	7
 2830 0033 08        		.byte	8
 2831 0034 08        		.byte	8
 2832 0035 08        		.byte	8
 2833 0036 08        		.byte	8
 2834 0037 09        		.byte	9
 2835 0038 09        		.byte	9
 2836 0039 09        		.byte	9
 2837 003a 0A        		.byte	10
 2838 003b 0A        		.byte	10
 2839 003c 0A        		.byte	10
 2840 003d 0A        		.byte	10
 2841 003e 0B        		.byte	11
 2842 003f 0B        		.byte	11
 2843 0040 0B        		.byte	11
 2844 0041 0C        		.byte	12
 2845 0042 0C        		.byte	12
 2846 0043 0C        		.byte	12
 2847 0044 0D        		.byte	13
 2848 0045 0D        		.byte	13
 2849 0046 0D        		.byte	13
 2850 0047 0E        		.byte	14
 2851 0048 0E        		.byte	14
 2852 0049 0F        		.byte	15
 2853 004a 0F        		.byte	15
 2854 004b 0F        		.byte	15
 2855 004c 10        		.byte	16
 2856 004d 10        		.byte	16
 2857 004e 11        		.byte	17
 2858 004f 11        		.byte	17
 2859 0050 11        		.byte	17
 2860 0051 12        		.byte	18
 2861 0052 12        		.byte	18
 2862 0053 13        		.byte	19
 2863 0054 13        		.byte	19
 2864 0055 14        		.byte	20
 2865 0056 14        		.byte	20
 2866 0057 15        		.byte	21
 2867 0058 15        		.byte	21
 2868 0059 16        		.byte	22
 2869 005a 16        		.byte	22
 2870 005b 17        		.byte	23
 2871 005c 17        		.byte	23
 2872 005d 18        		.byte	24
 2873 005e 18        		.byte	24
 2874 005f 19        		.byte	25
 2875 0060 19        		.byte	25
 2876 0061 1A        		.byte	26
 2877 0062 1A        		.byte	26
 2878 0063 1B        		.byte	27
 2879 0064 1C        		.byte	28
 2880 0065 1C        		.byte	28
 2881 0066 1D        		.byte	29
 2882 0067 1D        		.byte	29
 2883 0068 1E        		.byte	30
 2884 0069 1F        		.byte	31
 2885 006a 1F        		.byte	31
 2886 006b 20        		.byte	32
 2887 006c 20        		.byte	32
 2888 006d 21        		.byte	33
 2889 006e 22        		.byte	34
 2890 006f 22        		.byte	34
 2891 0070 23        		.byte	35
 2892 0071 24        		.byte	36
 2893 0072 25        		.byte	37
 2894 0073 25        		.byte	37
 2895 0074 26        		.byte	38
 2896 0075 27        		.byte	39
 2897 0076 27        		.byte	39
 2898 0077 28        		.byte	40
 2899 0078 29        		.byte	41
 2900 0079 2A        		.byte	42
 2901 007a 2B        		.byte	43
 2902 007b 2B        		.byte	43
 2903 007c 2C        		.byte	44
 2904 007d 2D        		.byte	45
 2905 007e 2E        		.byte	46
 2906 007f 2F        		.byte	47
 2907 0080 2F        		.byte	47
 2908 0081 30        		.byte	48
 2909 0082 31        		.byte	49
 2910 0083 32        		.byte	50
 2911 0084 33        		.byte	51
 2912 0085 34        		.byte	52
 2913 0086 35        		.byte	53
 2914 0087 36        		.byte	54
 2915 0088 36        		.byte	54
 2916 0089 37        		.byte	55
 2917 008a 38        		.byte	56
 2918 008b 39        		.byte	57
 2919 008c 3A        		.byte	58
 2920 008d 3B        		.byte	59
 2921 008e 3C        		.byte	60
 2922 008f 3D        		.byte	61
 2923 0090 3E        		.byte	62
 2924 0091 3F        		.byte	63
 2925 0092 40        		.byte	64
 2926 0093 41        		.byte	65
 2927 0094 42        		.byte	66
 2928 0095 43        		.byte	67
 2929 0096 44        		.byte	68
 2930 0097 46        		.byte	70
 2931 0098 47        		.byte	71
 2932 0099 48        		.byte	72
 2933 009a 49        		.byte	73
 2934 009b 4A        		.byte	74
 2935 009c 4B        		.byte	75
 2936 009d 4C        		.byte	76
 2937 009e 4D        		.byte	77
 2938 009f 4F        		.byte	79
 2939 00a0 50        		.byte	80
 2940 00a1 51        		.byte	81
 2941 00a2 52        		.byte	82
 2942 00a3 53        		.byte	83
 2943 00a4 55        		.byte	85
 2944 00a5 56        		.byte	86
 2945 00a6 57        		.byte	87
 2946 00a7 58        		.byte	88
 2947 00a8 5A        		.byte	90
 2948 00a9 5B        		.byte	91
 2949 00aa 5C        		.byte	92
 2950 00ab 5E        		.byte	94
 2951 00ac 5F        		.byte	95
 2952 00ad 60        		.byte	96
 2953 00ae 62        		.byte	98
 2954 00af 63        		.byte	99
 2955 00b0 64        		.byte	100
 2956 00b1 66        		.byte	102
 2957 00b2 67        		.byte	103
 2958 00b3 69        		.byte	105
 2959 00b4 6A        		.byte	106
 2960 00b5 6C        		.byte	108
 2961 00b6 6D        		.byte	109
 2962 00b7 6E        		.byte	110
 2963 00b8 70        		.byte	112
 2964 00b9 71        		.byte	113
 2965 00ba 73        		.byte	115
 2966 00bb 74        		.byte	116
 2967 00bc 76        		.byte	118
 2968 00bd 78        		.byte	120
 2969 00be 79        		.byte	121
 2970 00bf 7B        		.byte	123
 2971 00c0 7C        		.byte	124
 2972 00c1 7E        		.byte	126
 2973 00c2 80        		.byte	-128
 2974 00c3 81        		.byte	-127
 2975 00c4 83        		.byte	-125
 2976 00c5 84        		.byte	-124
 2977 00c6 86        		.byte	-122
 2978 00c7 88        		.byte	-120
 2979 00c8 8A        		.byte	-118
 2980 00c9 8B        		.byte	-117
 2981 00ca 8D        		.byte	-115
 2982 00cb 8F        		.byte	-113
 2983 00cc 91        		.byte	-111
 2984 00cd 92        		.byte	-110
 2985 00ce 94        		.byte	-108
 2986 00cf 96        		.byte	-106
 2987 00d0 98        		.byte	-104
 2988 00d1 9A        		.byte	-102
 2989 00d2 9B        		.byte	-101
 2990 00d3 9D        		.byte	-99
 2991 00d4 9F        		.byte	-97
 2992 00d5 A1        		.byte	-95
 2993 00d6 A3        		.byte	-93
 2994 00d7 A5        		.byte	-91
 2995 00d8 A7        		.byte	-89
 2996 00d9 A9        		.byte	-87
 2997 00da AB        		.byte	-85
 2998 00db AD        		.byte	-83
 2999 00dc AF        		.byte	-81
 3000 00dd B1        		.byte	-79
 3001 00de B3        		.byte	-77
 3002 00df B5        		.byte	-75
 3003 00e0 B7        		.byte	-73
 3004 00e1 B9        		.byte	-71
 3005 00e2 BB        		.byte	-69
 3006 00e3 BD        		.byte	-67
 3007 00e4 BF        		.byte	-65
 3008 00e5 C1        		.byte	-63
 3009 00e6 C4        		.byte	-60
 3010 00e7 C6        		.byte	-58
 3011 00e8 C8        		.byte	-56
 3012 00e9 CA        		.byte	-54
 3013 00ea CC        		.byte	-52
 3014 00eb CF        		.byte	-49
 3015 00ec D1        		.byte	-47
 3016 00ed D3        		.byte	-45
 3017 00ee D6        		.byte	-42
 3018 00ef D8        		.byte	-40
 3019 00f0 DA        		.byte	-38
 3020 00f1 DC        		.byte	-36
 3021 00f2 DF        		.byte	-33
 3022 00f3 E1        		.byte	-31
 3023 00f4 E4        		.byte	-28
 3024 00f5 E6        		.byte	-26
 3025 00f6 E8        		.byte	-24
 3026 00f7 EB        		.byte	-21
 3027 00f8 ED        		.byte	-19
 3028 00f9 F0        		.byte	-16
 3029 00fa F2        		.byte	-14
 3030 00fb F5        		.byte	-11
 3031 00fc F7        		.byte	-9
 3032 00fd FA        		.byte	-6
 3033 00fe FC        		.byte	-4
 3034 00ff FF        		.byte	-1
 3035               		.text
 3036               	.Letext0:
 3037               		.file 3 "/usr/lib/avr/include/stdint.h"
 3038               		.file 4 "quantum/light_ws2812.h"
 3039               		.file 5 "quantum/rgblight.h"
 3040               		.file 6 "./tmk_core/common/debug.h"
 3041               		.file 7 "/usr/lib/avr/include/avr/eeprom.h"
 3042               		.file 8 "./tmk_core/common/eeconfig.h"
 3043               		.file 9 "./tmk_core/common/timer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 rgblight.c
     /tmp/ccer0fRv.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccer0fRv.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccer0fRv.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccer0fRv.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccer0fRv.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccer0fRv.s:13     .text.sethsv:0000000000000000 sethsv
     /tmp/ccer0fRv.s:2778   .progmem.data.DIM_CURVE:0000000000000000 DIM_CURVE
     /tmp/ccer0fRv.s:263    .text.setrgb:0000000000000000 setrgb
     /tmp/ccer0fRv.s:286    .text.eeconfig_read_rgblight:0000000000000000 eeconfig_read_rgblight
     /tmp/ccer0fRv.s:305    .text.eeconfig_update_rgblight:0000000000000000 eeconfig_update_rgblight
     /tmp/ccer0fRv.s:327    .text.eeconfig_update_rgblight_default:0000000000000000 eeconfig_update_rgblight_default
                            *COM*:0000000000000004 rgblight_config
     /tmp/ccer0fRv.s:360    .text.eeconfig_debug_rgblight:0000000000000000 eeconfig_debug_rgblight
     /tmp/ccer0fRv.s:375    .text.rgblight_set:0000000000000000 rgblight_set
                            *COM*:0000000000000006 led
     /tmp/ccer0fRv.s:418    .text.rgblight_setrgb:0000000000000000 rgblight_setrgb
     /tmp/ccer0fRv.s:454    .text.rgblight_sethsv_noeeprom:0000000000000000 rgblight_sethsv_noeeprom
                            *COM*:0000000000000004 inmem_config
     /tmp/ccer0fRv.s:561    .text.rgblight_sethsv:0000000000000000 rgblight_sethsv
     /tmp/ccer0fRv.s:688    .text.rgblight_increase_hue:0000000000000000 rgblight_increase_hue
     /tmp/ccer0fRv.s:729    .text.rgblight_decrease_hue:0000000000000000 rgblight_decrease_hue
     /tmp/ccer0fRv.s:778    .text.rgblight_increase_sat:0000000000000000 rgblight_increase_sat
     /tmp/ccer0fRv.s:824    .text.rgblight_decrease_sat:0000000000000000 rgblight_decrease_sat
     /tmp/ccer0fRv.s:869    .text.rgblight_increase_val:0000000000000000 rgblight_increase_val
     /tmp/ccer0fRv.s:915    .text.rgblight_decrease_val:0000000000000000 rgblight_decrease_val
     /tmp/ccer0fRv.s:960    .text.rgblight_mode:0000000000000000 rgblight_mode
     /tmp/ccer0fRv.s:2461   .bss.rgblight_timer_enabled:0000000000000000 rgblight_timer_enabled
     /tmp/ccer0fRv.s:1054   .text.rgblight_init:0000000000000000 rgblight_init
     /tmp/ccer0fRv.s:2467   .bss.rgblight_inited:0000000000000000 rgblight_inited
     /tmp/ccer0fRv.s:1126   .text.rgblight_increase:0000000000000000 rgblight_increase
     /tmp/ccer0fRv.s:1163   .text.rgblight_decrease:0000000000000000 rgblight_decrease
     /tmp/ccer0fRv.s:1200   .text.rgblight_step:0000000000000000 rgblight_step
     /tmp/ccer0fRv.s:1231   .text.rgblight_enable:0000000000000000 rgblight_enable
     /tmp/ccer0fRv.s:1277   .text.rgblight_update_dword:0000000000000000 rgblight_update_dword
     /tmp/ccer0fRv.s:1319   .text.rgblight_toggle:0000000000000000 rgblight_toggle
     /tmp/ccer0fRv.s:1383   .text.rgblight_timer_init:0000000000000000 rgblight_timer_init
     /tmp/ccer0fRv.s:1399   .text.rgblight_timer_enable:0000000000000000 rgblight_timer_enable
     /tmp/ccer0fRv.s:1417   .text.rgblight_timer_disable:0000000000000000 rgblight_timer_disable
     /tmp/ccer0fRv.s:1432   .text.rgblight_timer_toggle:0000000000000000 rgblight_timer_toggle
     /tmp/ccer0fRv.s:1449   .text.rgblight_show_solid_color:0000000000000000 rgblight_show_solid_color
     /tmp/ccer0fRv.s:1501   .text.rgblight_effect_breathing:0000000000000000 rgblight_effect_breathing
     /tmp/ccer0fRv.s:2455   .bss.last_timer.2284:0000000000000000 last_timer.2284
     /tmp/ccer0fRv.s:2508   .progmem.data.RGBLED_BREATHING_INTERVALS:0000000000000000 RGBLED_BREATHING_INTERVALS
     /tmp/ccer0fRv.s:2450   .bss.pos.2283:0000000000000000 pos.2283
     /tmp/ccer0fRv.s:2517   .progmem.data.RGBLED_BREATHING_TABLE:0000000000000000 RGBLED_BREATHING_TABLE
     /tmp/ccer0fRv.s:1589   .text.rgblight_effect_rainbow_mood:0000000000000000 rgblight_effect_rainbow_mood
     /tmp/ccer0fRv.s:2445   .bss.last_timer.2295:0000000000000000 last_timer.2295
     /tmp/ccer0fRv.s:2500   .progmem.data.RGBLED_RAINBOW_MOOD_INTERVALS:0000000000000000 RGBLED_RAINBOW_MOOD_INTERVALS
     /tmp/ccer0fRv.s:2440   .bss.current_hue.2294:0000000000000000 current_hue.2294
     /tmp/ccer0fRv.s:1659   .text.rgblight_effect_rainbow_swirl:0000000000000000 rgblight_effect_rainbow_swirl
     /tmp/ccer0fRv.s:2435   .bss.last_timer.2303:0000000000000000 last_timer.2303
     /tmp/ccer0fRv.s:2430   .bss.current_hue.2302:0000000000000000 current_hue.2302
     /tmp/ccer0fRv.s:1784   .text.rgblight_effect_snake:0000000000000000 rgblight_effect_snake
     /tmp/ccer0fRv.s:2425   .bss.last_timer.2316:0000000000000000 last_timer.2316
     /tmp/ccer0fRv.s:2484   .progmem.data.RGBLED_SNAKE_INTERVALS:0000000000000000 RGBLED_SNAKE_INTERVALS
     /tmp/ccer0fRv.s:2420   .bss.pos.2315:0000000000000000 pos.2315
     /tmp/ccer0fRv.s:2009   .text.rgblight_effect_knight:0000000000000000 rgblight_effect_knight
     /tmp/ccer0fRv.s:2415   .bss.last_timer.2334:0000000000000000 last_timer.2334
     /tmp/ccer0fRv.s:2476   .progmem.data.RGBLED_KNIGHT_INTERVALS:0000000000000000 RGBLED_KNIGHT_INTERVALS
     /tmp/ccer0fRv.s:2410   .data.increment.2340:0000000000000000 increment.2340
     /tmp/ccer0fRv.s:2405   .bss.pos.2333:0000000000000000 pos.2333
     /tmp/ccer0fRv.s:2256   .text.rgblight_effect_christmas:0000000000000000 rgblight_effect_christmas
     /tmp/ccer0fRv.s:2400   .bss.last_timer.2357:0000000000000000 last_timer.2357
     /tmp/ccer0fRv.s:2395   .bss.current_offset.2356:0000000000000000 current_offset.2356
     /tmp/ccer0fRv.s:2314   .text.rgblight_task:0000000000000000 rgblight_task
     /tmp/ccer0fRv.s:2492   .progmem.data.RGBLED_RAINBOW_SWIRL_INTERVALS:0000000000000000 RGBLED_RAINBOW_SWIRL_INTERVALS

UNDEFINED SYMBOLS
__udivmodhi4
eeprom_read_dword
eeprom_update_dword
ws2812_setleds
__divmodhi4
debug_config
eeconfig_is_enabled
eeconfig_init
timer_elapsed
timer_read
__do_copy_data
__do_clear_bss
